<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lqbz</title>
    <link href="/2021/07/lqbz/"/>
    <url>/2021/07/lqbz/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><br>                <span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/.+?(省|市|自治区|自治州|行政区|区|镇|盟|县|旗)/g</span>;<br>                <span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;福建省厦门市湖里区XX街XX号&quot;</span>.match(reg))<br>                <br>                <span class="hljs-comment">// 结果： [&quot;福建省&quot;, &quot;厦门市&quot;, &quot;湖里区&quot;]</span><br>                <br><br> <span class="hljs-comment">// var address = &quot;辽宁省沈阳市和平区&quot;; // 以这个地址为例</span><br>      <span class="hljs-comment">// const address = msg.detail;</span><br>      <span class="hljs-comment">// const proExp = &quot;.+[省]&quot;,cityExp = &quot;.+[市]&quot;,disExp = &quot;.+[区]&quot;;</span><br>      <span class="hljs-comment">// const province = address.match(new RegExp(proExp)); // 省</span><br>      <span class="hljs-comment">// const city = address.match(new RegExp(cityExp))[0].replace(province, &quot;&quot;); // 市</span><br>      <span class="hljs-comment">// const district = address.match(new RegExp(disExp))[0].replace(province, &quot;&quot;).replace(city, &quot;&quot;); // 区</span><br><br><br>      <span class="hljs-keyword">let</span> regex = <span class="hljs-string">&quot;(?&lt;province&gt;[^省]+省|[^市]+市|[^行政区]+行政区|.+自治区)(?&lt;city&gt;[^自治州]+自治州|[^市]+市|[^盟]+盟|[^地区]+地区|[^城区]+城区|[^林区]+林区|[^自治县]+自治县|.+区划)(?&lt;county&gt;[^市]+市|[^县]+县|[^旗]+旗|.+区)?(?&lt;town&gt;[^区]+区|.+镇)?(?&lt;village&gt;.*)&quot;</span>;<br>      <span class="hljs-keyword">let</span> address = <span class="hljs-string">&quot;上海市上海城区闵行区东方红东方红&quot;</span>;<br>      <span class="hljs-built_in">console</span>.log(address.match(regex));<br><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">if</span>(str.indexOf(<span class="hljs-string">&quot;省&quot;</span>) != -<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">var</span> sheng=str.split(<span class="hljs-string">&#x27;省&#x27;</span>)[<span class="hljs-number">0</span>]+<span class="hljs-string">&#x27;省&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(str.indexOf(<span class="hljs-string">&quot;市&quot;</span>) != -<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">var</span> shi=str.split(<span class="hljs-string">&#x27;市&#x27;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;省&#x27;</span>)[<span class="hljs-number">1</span>]+<span class="hljs-string">&#x27;市&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(str.indexOf(<span class="hljs-string">&quot;区&quot;</span>) != -<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">var</span> qu=str.split(<span class="hljs-string">&#x27;区&#x27;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;市&#x27;</span>)[<span class="hljs-number">1</span>]+<span class="hljs-string">&#x27;区&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> add =sheng+shi+qu<br>    <span class="hljs-built_in">console</span>.log(add);<br></code></pre></div></td></tr></table></figure><table><thead><tr><th><a href="https://www.cnblogs.com/cjw-blogs/p/11981222.html">https://www.cnblogs.com/cjw-blogs/p/11981222.html</a></th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><a href="https://blog.csdn.net/Fxhani/article/details/108605160">https://blog.csdn.net/Fxhani/article/details/108605160</a></th></tr></thead><tbody><tr><td></td></tr></tbody></table><table><thead><tr><th><a href="https://blog.csdn.net/Fxhani/article/details/108605160">https://blog.csdn.net/Fxhani/article/details/108605160</a></th></tr></thead><tbody><tr><td></td></tr></tbody></table><p><a href="https://blog.csdn.net/qq_40542728/article/details/95490634">https://blog.csdn.net/qq_40542728/article/details/95490634</a></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS3+SVG评星效果<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>* &#123;<br><span class="css">  <span class="hljs-attribute">box-sizing</span>: border-box;</span><br>&#125;<br><span class="css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#232323</span>;</span><br>&#125;<br>.container &#123;<br><span class="css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="css"><span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="css"><span class="hljs-attribute">align-items</span>: center;</span><br><span class="css"><span class="hljs-attribute">justify-content</span>: center;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span>;</span><br>&#125;<br><br>.rating &#123;<br><span class="css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="css">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">  <span class="hljs-attribute">flex-direction</span>: row-reverse;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">  <span class="hljs-attribute">position</span>: relative;</span><br>&#125;<br><br>.rating-0 &#123;<br><span class="css">  -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);</span><br><span class="css">          <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.rating</span> &gt; <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">display</span>: none;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.rating</span> &gt; <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">  <span class="hljs-attribute">margin-top</span>: auto;</span><br><span class="css">  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;data:image/svg+xml;charset=UTF-8,%3csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; width=&#x27;126.729&#x27; height=&#x27;126.73&#x27;%3e%3cpath fill=&#x27;%23e3e3e3&#x27; d=&#x27;M121.215 44.212l-34.899-3.3c-2.2-.2-4.101-1.6-5-3.7l-12.5-30.3c-2-5-9.101-5-11.101 0l-12.4 30.3c-.8 2.1-2.8 3.5-5 3.7l-34.9 3.3c-5.2.5-7.3 7-3.4 10.5l26.3 23.1c1.7 1.5 2.4 3.7 1.9 5.9l-7.9 32.399c-1.2 5.101 4.3 9.3 8.9 6.601l29.1-17.101c1.9-1.1 4.2-1.1 6.1 0l29.101 17.101c4.6 2.699 10.1-1.4 8.899-6.601l-7.8-32.399c-.5-2.2.2-4.4 1.9-5.9l26.3-23.1c3.8-3.5 1.6-10-3.6-10.5z&#x27;/%3e%3c/svg%3e&quot;</span>);</span><br><span class="css">  <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="css">  <span class="hljs-attribute">background-position</span>: center;</span><br><span class="css">  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">76%</span>;</span><br><span class="css">  <span class="hljs-attribute">transition</span>: .<span class="hljs-number">3s</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.rating</span> &gt; <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">label</span>,</span><br><span class="css"><span class="hljs-selector-class">.rating</span> &gt; <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">label</span> ~ <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;data:image/svg+xml;charset=UTF-8,%3csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; width=&#x27;126.729&#x27; height=&#x27;126.73&#x27;%3e%3cpath fill=&#x27;%23fcd93a&#x27; d=&#x27;M121.215 44.212l-34.899-3.3c-2.2-.2-4.101-1.6-5-3.7l-12.5-30.3c-2-5-9.101-5-11.101 0l-12.4 30.3c-.8 2.1-2.8 3.5-5 3.7l-34.9 3.3c-5.2.5-7.3 7-3.4 10.5l26.3 23.1c1.7 1.5 2.4 3.7 1.9 5.9l-7.9 32.399c-1.2 5.101 4.3 9.3 8.9 6.601l29.1-17.101c1.9-1.1 4.2-1.1 6.1 0l29.101 17.101c4.6 2.699 10.1-1.4 8.899-6.601l-7.8-32.399c-.5-2.2.2-4.4 1.9-5.9l26.3-23.1c3.8-3.5 1.6-10-3.6-10.5z&#x27;/%3e%3c/svg%3e&quot;</span>);</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.rating</span> &gt; <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:checked</span>) ~ <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:hover</span>,</span><br><span class="css"><span class="hljs-selector-class">.rating</span> &gt; <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:checked</span>) ~ <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:hover</span> ~ <span class="hljs-selector-tag">label</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;data:image/svg+xml;charset=UTF-8,%3csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; width=&#x27;126.729&#x27; height=&#x27;126.73&#x27;%3e%3cpath fill=&#x27;%23d8b11e&#x27; d=&#x27;M121.215 44.212l-34.899-3.3c-2.2-.2-4.101-1.6-5-3.7l-12.5-30.3c-2-5-9.101-5-11.101 0l-12.4 30.3c-.8 2.1-2.8 3.5-5 3.7l-34.9 3.3c-5.2.5-7.3 7-3.4 10.5l26.3 23.1c1.7 1.5 2.4 3.7 1.9 5.9l-7.9 32.399c-1.2 5.101 4.3 9.3 8.9 6.601l29.1-17.101c1.9-1.1 4.2-1.1 6.1 0l29.101 17.101c4.6 2.699 10.1-1.4 8.899-6.601l-7.8-32.399c-.5-2.2.2-4.4 1.9-5.9l26.3-23.1c3.8-3.5 1.6-10-3.6-10.5z&#x27;/%3e%3c/svg%3e&quot;</span>);</span><br>&#125;<br><br>.emoji-wrapper &#123;<br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">  <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br>&#125;<br><br>.emoji-wrapper:before,<br>.emoji-wrapper:after &#123;<br><span class="css">  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br>&#125;<br><br>.emoji-wrapper:before &#123;<br><span class="css">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom, white <span class="hljs-number">0%</span>, white <span class="hljs-number">35%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>) <span class="hljs-number">100%</span>);</span><br>&#125;<br><br>.emoji-wrapper:after &#123;<br><span class="css">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to top, white <span class="hljs-number">0%</span>, white <span class="hljs-number">35%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>) <span class="hljs-number">100%</span>);</span><br>&#125;<br><br>.emoji &#123;<br><span class="css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="css">  <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">  <span class="hljs-attribute">transition</span>: .<span class="hljs-number">3s</span>;</span><br>&#125;<br><br>.emoji &gt; svg &#123;<br><span class="css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;</span><br><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;</span><br><span class="css">  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#rating-1</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-class">.emoji-wrapper</span> &gt; <span class="hljs-selector-class">.emoji</span> &#123;</span><br><span class="css">  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">100px</span>);</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">100px</span>);</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#rating-2</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-class">.emoji-wrapper</span> &gt; <span class="hljs-selector-class">.emoji</span> &#123;</span><br><span class="css">  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">200px</span>);</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">200px</span>);</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#rating-3</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-class">.emoji-wrapper</span> &gt; <span class="hljs-selector-class">.emoji</span> &#123;</span><br><span class="css">  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">300px</span>);</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">300px</span>);</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#rating-4</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-class">.emoji-wrapper</span> &gt; <span class="hljs-selector-class">.emoji</span> &#123;</span><br><span class="css">  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">400px</span>);</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">400px</span>);</span><br>&#125;<br><br><span class="css"><span class="hljs-selector-id">#rating-5</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-class">.emoji-wrapper</span> &gt; <span class="hljs-selector-class">.emoji</span> &#123;</span><br><span class="css">  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);</span><br><span class="css">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">500px</span>);</span><br>&#125;<br><br>.feedback &#123;<br><span class="css">  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">360px</span>;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;</span><br><span class="css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="css">  <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="css">  <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">30px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>);</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 900px;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;feedback&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rating&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rating&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rating-5&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rating-5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rating&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rating-4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rating-4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rating&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rating-3&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rating-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rating&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rating-2&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rating-2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rating&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rating-1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;rating-1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;emoji-wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;emoji&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rating-0&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 512 512&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#ffd93b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512 256c0 141.44-114.64 256-256 256-80.48 0-152.32-37.12-199.28-95.28 43.92 35.52 99.84 56.72 160.72 56.72 141.36 0 256-114.56 256-256 0-60.88-21.2-116.8-56.72-160.72C474.8 103.68 512 175.52 512 256z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#f4c534&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(-1) rotate(31.21 715.433 -595.455)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;166.318&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;199.829&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;56.146&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;56.13&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(-148.804 180.87 175.82)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;180.871&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;175.822&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;28.048&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;28.08&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(-113.778 194.434 165.995)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;194.433&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;165.993&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;8.016&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;5.296&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#5a5f63&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(-1) rotate(31.21 715.397 -1237.664)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;345.695&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;199.819&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;56.146&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;56.13&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(-148.804 360.25 175.837)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;360.252&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;175.84&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;28.048&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;28.08&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(-1) rotate(66.227 254.508 -573.138)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;373.794&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;165.987&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;8.016&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;5.296&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#5a5f63&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M370.56 344.4c0 7.696-6.224 13.92-13.92 13.92H155.36c-7.616 0-13.92-6.224-13.92-13.92s6.304-13.92 13.92-13.92h201.296c7.696.016 13.904 6.224 13.904 13.92z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rating-1&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 512 512&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#ffd93b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#f4c534&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M328.4 428a92.8 92.8 0 0 0-145-.1 6.8 6.8 0 0 1-12-5.8 86.6 86.6 0 0 1 84.5-69 86.6 86.6 0 0 1 84.7 69.8c1.3 6.9-7.7 10.6-12.2 5.1z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M269.2 222.3c5.3 62.8 52 113.9 104.8 113.9 52.3 0 90.8-51.1 85.6-113.9-2-25-10.8-47.9-23.7-66.7-4.1-6.1-12.2-8-18.5-4.2a111.8 111.8 0 0 1-60.1 16.2c-22.8 0-42.1-5.6-57.8-14.8-6.8-4-15.4-1.5-18.9 5.4-9 18.2-13.2 40.3-11.4 64.1z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#f4c534&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M357 189.5c25.8 0 47-7.1 63.7-18.7 10 14.6 17 32.1 18.7 51.6 4 49.6-26.1 89.7-67.5 89.7-41.6 0-78.4-40.1-82.5-89.7A95 95 0 0 1 298 174c16 9.7 35.6 15.5 59 15.5z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M396.2 246.1a38.5 38.5 0 0 1-38.7 38.6 38.5 38.5 0 0 1-38.6-38.6 38.6 38.6 0 1 1 77.3 0z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M380.4 241.1c-3.2 3.2-9.9 1.7-14.9-3.2-4.8-4.8-6.2-11.5-3-14.7 3.3-3.4 10-2 14.9 2.9 4.9 5 6.4 11.7 3 15z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M242.8 222.3c-5.3 62.8-52 113.9-104.8 113.9-52.3 0-90.8-51.1-85.6-113.9 2-25 10.8-47.9 23.7-66.7 4.1-6.1 12.2-8 18.5-4.2 16.2 10.1 36.2 16.2 60.1 16.2 22.8 0 42.1-5.6 57.8-14.8 6.8-4 15.4-1.5 18.9 5.4 9 18.2 13.2 40.3 11.4 64.1z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#f4c534&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M155 189.5c-25.8 0-47-7.1-63.7-18.7-10 14.6-17 32.1-18.7 51.6-4 49.6 26.1 89.7 67.5 89.7 41.6 0 78.4-40.1 82.5-89.7A95 95 0 0 0 214 174c-16 9.7-35.6 15.5-59 15.5z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M115.8 246.1a38.5 38.5 0 0 0 38.7 38.6 38.5 38.5 0 0 0 38.6-38.6 38.6 38.6 0 1 0-77.3 0z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M131.6 241.1c3.2 3.2 9.9 1.7 14.9-3.2 4.8-4.8 6.2-11.5 3-14.7-3.3-3.4-10-2-14.9 2.9-4.9 5-6.4 11.7-3 15z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rating-2&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 512 512&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#ffd93b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#f4c534&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M336.6 403.2c-6.5 8-16 10-25.5 5.2a117.6 117.6 0 0 0-110.2 0c-9.4 4.9-19 3.3-25.6-4.6-6.5-7.7-4.7-21.1 8.4-28 45.1-24 99.5-24 144.6 0 13 7 14.8 19.7 8.3 27.4z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M276.6 244.3a79.3 79.3 0 1 1 158.8 0 79.5 79.5 0 1 1-158.8 0z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;340&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;260.4&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;36.2&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(-135 326.4 246.6)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;326.4&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;246.6&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;6.5&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M231.9 244.3a79.3 79.3 0 1 0-158.8 0 79.5 79.5 0 1 0 158.8 0z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;168.5&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;260.4&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;36.2&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;rotate(-135 182.1 246.7)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;182.1&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;246.7&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;6.5&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rating-3&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 512 512&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#ffd93b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M407.7 352.8a163.9 163.9 0 0 1-303.5 0c-2.3-5.5 1.5-12 7.5-13.2a780.8 780.8 0 0 1 288.4 0c6 1.2 9.9 7.7 7.6 13.2z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#f4c534&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M115.3 339c18.2 29.6 75.1 32.8 143.1 32.8 67.1 0 124.2-3.2 143.2-31.6l-1.5-.6a780.6 780.6 0 0 0-284.8-.6z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;356.4&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;205.3&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;81.1&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;81&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;356.4&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;205.3&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;44.2&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;44.2&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(-1) rotate(45 454 -906)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;375.3&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;188.1&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;8.1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;155.6&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;205.3&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;81.1&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;81&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;155.6&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;205.3&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;44.2&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;44.2&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ellipse</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(-1) rotate(45 454 -421.3)&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;174.5&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;188&quot;</span> <span class="hljs-attr">rx</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">ry</span>=<span class="hljs-string">&quot;8.1&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ellipse</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rating-4&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 512 512&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#ffd93b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#f4c534&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M232.3 201.3c0 49.2-74.3 94.2-74.3 94.2s-74.4-45-74.4-94.2a38 38 0 0 1 74.4-11.1 38 38 0 0 1 74.3 11.1z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#e24b4b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M96.1 173.3a37.7 37.7 0 0 0-12.4 28c0 49.2 74.3 94.2 74.3 94.2C80.2 229.8 95.6 175.2 96 173.3z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#d03f3f&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M215.2 200c-3.6 3-9.8 1-13.8-4.1-4.2-5.2-4.6-11.5-1.2-14.1 3.6-2.8 9.7-.7 13.9 4.4 4 5.2 4.6 11.4 1.1 13.8z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M428.4 201.3c0 49.2-74.4 94.2-74.4 94.2s-74.3-45-74.3-94.2a38 38 0 0 1 74.4-11.1 38 38 0 0 1 74.3 11.1z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#e24b4b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M292.2 173.3a37.7 37.7 0 0 0-12.4 28c0 49.2 74.3 94.2 74.3 94.2-77.8-65.7-62.4-120.3-61.9-122.2z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#d03f3f&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M411.3 200c-3.6 3-9.8 1-13.8-4.1-4.2-5.2-4.6-11.5-1.2-14.1 3.6-2.8 9.7-.7 13.9 4.4 4 5.2 4.6 11.4 1.1 13.8z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M381.7 374.1c-30.2 35.9-75.3 64.4-125.7 64.4s-95.4-28.5-125.8-64.2a17.6 17.6 0 0 1 16.5-28.7 627.7 627.7 0 0 0 218.7-.1c16.2-2.7 27 16.1 16.3 28.6z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M256 438.5c25.7 0 50-7.5 71.7-19.5-9-33.7-40.7-43.3-62.6-31.7-29.7 15.8-62.8-4.7-75.6 34.3 20.3 10.4 42.8 17 66.5 17z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#e24b4b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rating-5&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 512 512&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#ffd93b&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;256&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512 256A256 256 0 0 1 56.8 416.7a256 256 0 0 0 360-360c58 47 95.2 118.8 95.2 199.3z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M512 99.4v165.1c0 11-8.9 19.9-19.7 19.9h-187c-13 0-23.5-10.5-23.5-23.5v-21.3c0-12.9-8.9-24.8-21.6-26.7-16.2-2.5-30 10-30 25.5V261c0 13-10.5 23.5-23.5 23.5h-187A19.7 19.7 0 0 1 0 264.7V99.4c0-10.9 8.8-19.7 19.7-19.7h472.6c10.8 0 19.7 8.7 19.7 19.7z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#e9eff4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M204.6 138v88.2a23 23 0 0 1-23 23H58.2a23 23 0 0 1-23-23v-88.3a23 23 0 0 1 23-23h123.4a23 23 0 0 1 23 23z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#45cbea&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M476.9 138v88.2a23 23 0 0 1-23 23H330.3a23 23 0 0 1-23-23v-88.3a23 23 0 0 1 23-23h123.4a23 23 0 0 1 23 23z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#e84d88&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#38c0dc&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M95.2 114.9l-60 60v15.2l75.2-75.2zM123.3 114.9L35.1 203v23.2c0 1.8.3 3.7.7 5.4l116.8-116.7h-29.3z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">g</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#d23f77&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M373.3 114.9l-66 66V196l81.3-81.2zM401.5 114.9l-94.1 94v17.3c0 3.5.8 6.8 2.2 9.8l121.1-121.1h-29.2z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">g</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M329.5 395.2c0 44.7-33 81-73.4 81-40.7 0-73.5-36.3-73.5-81s32.8-81 73.5-81c40.5 0 73.4 36.3 73.4 81z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#3e4347&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M256 476.2a70 70 0 0 0 53.3-25.5 34.6 34.6 0 0 0-58-25 34.4 34.4 0 0 0-47.8 26 69.9 69.9 0 0 0 52.6 24.5z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#e24b4b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M290.3 434.8c-1 3.4-5.8 5.2-11 3.9s-8.4-5.1-7.4-8.7c.8-3.3 5.7-5 10.7-3.8 5.1 1.4 8.5 5.3 7.7 8.6z&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#fff&quot;</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">&quot;.2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><a href="https://github.com/sma11black/hexo-action">https://github.com/sma11black/hexo-action</a> <a href="https://blog.csdn.net/qq_41426117/article/details/108703295">https://blog.csdn.net/qq_41426117/article/details/108703295</a> <a href="https://blog.csdn.net/u012208219/article/details/106883054?ops_request_misc=%7B%22request_id%22:%22160061139819195188346686%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=160061139819195188346686&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v3-1-106883054.pc_ecpm_v3_pc_rank_v3&utm_term=github+action+%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo&spm=1018.2118.3001.4187">https://blog.csdn.net/u012208219/article/details/106883054?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160061139819195188346686%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160061139819195188346686&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>first_rank_ecpm_v3~pc_rank_v3-1-106883054.pc_ecpm_v3_pc_rank_v3&amp;utm_term=github+action+%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo&amp;spm=1018.2118.3001.4187</a> <a href="https://www.cnblogs.com/deppwang/p/12326906.html">https://www.cnblogs.com/deppwang/p/12326906.html</a> <a href="https://www.antmoe.com/posts/6081157f/index.html#%E6%B7%BB%E5%8A%A0actions">https://www.antmoe.com/posts/6081157f/index.html#%E6%B7%BB%E5%8A%A0actions</a> <a href="https://www.jianshu.com/p/7dbbe8b1a866">https://www.jianshu.com/p/7dbbe8b1a866</a> <a href="https://segmentfault.com/a/1190000022360769">https://segmentfault.com/a/1190000022360769</a> <a href="https://zhuanlan.zhihu.com/p/137867759">https://zhuanlan.zhihu.com/p/137867759</a></p><p><a href="https://github.com/actions/cache">https://github.com/actions/cache</a></p><p><a href="https://github.com/actions/checkout">https://github.com/actions/checkout</a></p><p><a href="https://github.com/actions/setup-node">https://github.com/actions/setup-node</a></p><p><a href="https://github.com/actions/cache/blob/main/examples.md#node---npm">https://github.com/actions/cache/blob/main/examples.md#node---npm</a></p><p><a href="https://docs.github.com/cn/actions/guides/caching-dependencies-to-speed-up-workflows">https://docs.github.com/cn/actions/guides/caching-dependencies-to-speed-up-workflows</a></p><p><a href="https://github.com/ElpsyCN/el-bot-api/blob/8aa3c64fe7cb715349c14b363ef4c43996c5ef8a/data/setu.json">https://github.com/ElpsyCN/el-bot-api/blob/8aa3c64fe7cb715349c14b363ef4c43996c5ef8a/data/setu.json</a></p><p>let regex =  “(?[^省]+省|[^市]+市|[^行政区]+行政区|.+自治区)(?[^自治州]+自治州|[^市]+市|[^盟]+盟|[^地区]+地区|[^城区]+城区|[^林区]+林区|[^自治县]+自治县|.+区划)(?[^市]+市|[^县]+县|[^旗]+旗|.+区)?(?[^区]+区|.+镇)?(?.*)”;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【转】Git/SVN提交代码规范</title>
    <link href="/2020/07/commit-standard/"/>
    <url>/2020/07/commit-standard/</url>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">feat - 新功能 feature<br>fix - 修复 bug<br>docs - 文档注释<br>style - 代码格式(不影响代码运行的变动)<br>refactor - 重构、优化(既不增加新功能，也不是修复bug)<br>perf - 性能优化<br><span class="hljs-keyword">test </span>- 增加测试<br>chore - 构建过程或辅助工具的变动<br>revert - 回退<br>build - 打包<br></code></pre></div></td></tr></table></figure><p>示例：</p><p><img src="" srcset="/img/loading.gif" lazyload></p><p><strong>原文链接：</strong><a href="https://www.cnblogs.com/PeunZhang/p/11507454.html">Git/SVN提交代码规范</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>富文本编辑器 Summernote 从入门到放弃（实例篇）</title>
    <link href="/2020/07/summernote-example/"/>
    <url>/2020/07/summernote-example/</url>
    
    <content type="html"><![CDATA[<p>前篇把Summernote的用法和配置基本都介绍了一遍，本篇就来实现一个完整的富文本编辑器吧。</p><h2 id="需要引入的文件"><a href="#需要引入的文件" class="headerlink" title="需要引入的文件"></a>需要引入的文件</h2><p>CSS</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/summernote.min.css&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>JavaScript</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/summernote.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lang/summernote-zh-CN.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/summernote-cleaner.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="初始化富文本编辑器"><a href="#初始化富文本编辑器" class="headerlink" title="初始化富文本编辑器"></a>初始化富文本编辑器</h2><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;summernote&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> $summernote = $(<span class="hljs-string">&#x27;#summernote&#x27;</span>).summernote(&#123;<br>    height: <span class="hljs-number">350</span>,<br>    lang: <span class="hljs-string">&#x27;zh-CN&#x27;</span>,<br>    disableDragAndDrop: <span class="hljs-literal">true</span>,<br>    toolbar: [<br>        [<span class="hljs-string">&#x27;style&#x27;</span>, [<span class="hljs-string">&#x27;style&#x27;</span>]],<br>        [<span class="hljs-string">&#x27;font&#x27;</span>, [<span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-string">&#x27;underline&#x27;</span>, <span class="hljs-string">&#x27;clear&#x27;</span>]],<br>        [<span class="hljs-string">&#x27;fontname&#x27;</span>, [<span class="hljs-string">&#x27;fontname&#x27;</span>]],<br>        [<span class="hljs-string">&#x27;color&#x27;</span>, [<span class="hljs-string">&#x27;color&#x27;</span>]],<br>        [<span class="hljs-string">&#x27;para&#x27;</span>, [<span class="hljs-string">&#x27;ul&#x27;</span>, <span class="hljs-string">&#x27;ol&#x27;</span>, <span class="hljs-string">&#x27;paragraph&#x27;</span>]],<br>        [<span class="hljs-string">&#x27;table&#x27;</span>, [<span class="hljs-string">&#x27;table&#x27;</span>]],<br>        [<span class="hljs-string">&#x27;insert&#x27;</span>, [<span class="hljs-string">&#x27;link&#x27;</span>, <span class="hljs-string">&#x27;picture&#x27;</span>]],<br>        [<span class="hljs-string">&#x27;view&#x27;</span>, [<span class="hljs-string">&#x27;fullscreen&#x27;</span>,<span class="hljs-string">&#x27;undo&#x27;</span>,<span class="hljs-string">&#x27;redo&#x27;</span>]]<br>      ],<br>    styleTags: [<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-string">&#x27;h2&#x27;</span>, <span class="hljs-string">&#x27;h3&#x27;</span>, <span class="hljs-string">&#x27;h4&#x27;</span>, <span class="hljs-string">&#x27;h5&#x27;</span>, <span class="hljs-string">&#x27;h6&#x27;</span>],<br>    fontNames: [<span class="hljs-string">&#x27;微软雅黑&#x27;</span>,<span class="hljs-string">&#x27;宋体&#x27;</span>,<span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-string">&#x27;Arial Black&#x27;</span>, <br>    <span class="hljs-string">&#x27;Comic Sans MS&#x27;</span>, <span class="hljs-string">&#x27;Courier New&#x27;</span>, <span class="hljs-string">&#x27;Merriweather&#x27;</span>,<span class="hljs-string">&#x27;Tahoma&#x27;</span>,<span class="hljs-string">&#x27;Verdana&#x27;</span>]<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这样一个完整的富文本编辑器就出现了：</p><p><img src="" srcset="/img/loading.gif" lazyload></p><p>接下来根据需要加点别的功能：</p><h2 id="设置行高"><a href="#设置行高" class="headerlink" title="设置行高"></a>设置行高</h2><p>在初始化的js中添加下面两段的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&#x27;#summernote&#x27;</span>).summernote(&#123;<br>  toolbar: [<br>    [<span class="hljs-string">&#x27;height&#x27;</span>, [<span class="hljs-string">&#x27;height&#x27;</span>]],<span class="hljs-comment">//行高(自定义行高时一定不要忘记写这个)</span><br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>下面的代码如果添加到最后一项后面的话，需要给最后一项后面加上逗号再添加。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&#x27;#summernote&#x27;</span>).summernote(&#123;<br> lineHeights: [<span class="hljs-string">&#x27;0.5&#x27;</span>,<span class="hljs-string">&#x27;1.0&#x27;</span>, <span class="hljs-string">&#x27;1.2&#x27;</span>, <span class="hljs-string">&#x27;1.4&#x27;</span>, <span class="hljs-string">&#x27;1.5&#x27;</span>, <span class="hljs-string">&#x27;1.6&#x27;</span>, <span class="hljs-string">&#x27;1.8&#x27;</span>, <span class="hljs-string">&#x27;2.0&#x27;</span>, <span class="hljs-string">&#x27;9.0&#x27;</span>],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><img src="" srcset="/img/loading.gif" lazyload></p><h2 id="清除复制文本的格式"><a href="#清除复制文本的格式" class="headerlink" title="清除复制文本的格式"></a>清除复制文本的格式</h2><p>清除格式的功能需要引入插件来实现，到<a href="https://github.com/DiemenDesign/summernote-cleaner">这里</a>下载需要的JS文件，然后引入文件，在初始化编辑器的JS中添加下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&#x27;#summernote&#x27;</span>).summernote(&#123;<br>  cleaner:&#123;<br>    action: <span class="hljs-string">&#x27;both&#x27;</span>, <span class="hljs-comment">// both|button|paste &#x27;button&#x27; only cleans via toolbar button, &#x27;paste&#x27; only clean when pasting content, both does both options.</span><br>    <span class="hljs-comment">// newline: &#x27;&lt;br&gt;&#x27;, // Summernote&#x27;s default is to use &#x27;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#x27;</span><br>    notStyle: <span class="hljs-string">&#x27;position:absolute;top:0;left:0;right:0&#x27;</span>, <span class="hljs-comment">// Position of Notification</span><br>    <span class="hljs-comment">// icon: &#x27;&lt;i class=&quot;note-icon&quot;&gt;[Your Button]&lt;/i&gt;&#x27;, //按钮图标</span><br>    keepHtml: <span class="hljs-literal">false</span>, <span class="hljs-comment">// Remove all Html formats</span><br>    keepOnlyTags: [<span class="hljs-string">&#x27;&lt;p&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;ul&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;b&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;strong&gt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;i&gt;&#x27;</span>, <span class="hljs-string">&#x27;&lt;a&gt;&#x27;</span>], <span class="hljs-comment">// If keepHtml is true, remove all tags except these</span><br>    keepClasses: <span class="hljs-literal">false</span>, <span class="hljs-comment">// Remove Classes</span><br>    badTags: [<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;script&#x27;</span>, <span class="hljs-string">&#x27;applet&#x27;</span>, <span class="hljs-string">&#x27;embed&#x27;</span>, <span class="hljs-string">&#x27;noframes&#x27;</span>, <span class="hljs-string">&#x27;noscript&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>], <span class="hljs-comment">// Remove full tags with contents</span><br>    badAttributes: [<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>], <span class="hljs-comment">// Remove attributes from remaining tags</span><br>    limitChars: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 0/false|# 0/false disables option</span><br>    limitDisplay: <span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-comment">// text|html|both</span><br>    limitStop: <span class="hljs-literal">false</span> <span class="hljs-comment">// true/false</span><br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>因为这个插件是英文的，并不支持中文，所以插件里的提示信息也是英文，我们可以在插件里添加上中文的翻译，这样就能显示中文的提示信息了。</p><p>打开<code>summernote-cleaner.js</code>，将</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$.extend(<span class="hljs-literal">true</span>, $.summernote.lang, &#123;<br>  <span class="hljs-string">&#x27;en-US&#x27;</span>: &#123;<br>    cleaner: &#123;<br>      tooltip: <span class="hljs-string">&#x27;Cleaner&#x27;</span>,<br>      not: <span class="hljs-string">&#x27;Text has been Cleaned!!!&#x27;</span>,<br>      limitText: <span class="hljs-string">&#x27;Text&#x27;</span>,<br>      limitHTML: <span class="hljs-string">&#x27;HTML&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>修改为</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$.extend(<span class="hljs-literal">true</span>, $.summernote.lang, &#123;<br>  <span class="hljs-string">&#x27;en-US&#x27;</span>: &#123;<br>    cleaner: &#123;<br>      tooltip: <span class="hljs-string">&#x27;Cleaner&#x27;</span>,<br>      not: <span class="hljs-string">&#x27;Text has been Cleaned!!!&#x27;</span>,<br>      limitText: <span class="hljs-string">&#x27;Text&#x27;</span>,<br>      limitHTML: <span class="hljs-string">&#x27;HTML&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&#x27;zh-CN&#x27;</span>: &#123;<br>    cleaner: &#123;<br>      tooltip: <span class="hljs-string">&#x27;Cleaner&#x27;</span>,<br>      not: <span class="hljs-string">&#x27;文本格式已被清除&#x27;</span>,<br>      limitText: <span class="hljs-string">&#x27;字数&#x27;</span>,<br>      limitHTML: <span class="hljs-string">&#x27;HTML&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这样提示信息就可以显示为中文了。</p><h2 id="图片上传和删除"><a href="#图片上传和删除" class="headerlink" title="图片上传和删除"></a>图片上传和删除</h2><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>在初始化JS中添加回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$(<span class="hljs-string">&#x27;#summernote&#x27;</span>).summernote(&#123;<br>  callbacks: &#123;<br>    onImageUpload: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">files</span>) </span>&#123;<br>      uploadSummerPic($summernote1, files[<span class="hljs-number">0</span>]);<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadSummerPic</span>(<span class="hljs-params">$summernote, file</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> imgFile = <span class="hljs-keyword">new</span> FileReader();<br>    imgFile.readAsDataURL(file);<br>    <span class="hljs-keyword">var</span> base64 = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (file) &#123;<br>        imgFile.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>) </span>&#123;<br>            base64 = evt.target.result;<br>            <span class="hljs-comment">// base64 = base64.substring(base64.indexOf(&#x27;,&#x27;)+1);</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(base64);<br>        <span class="hljs-keyword">var</span> sj = &#123;<span class="hljs-attr">base64</span>:base64&#125;;<br>        <span class="hljs-keyword">var</span> sj = <span class="hljs-built_in">JSON</span>.stringify(sj);<br>        $summernote.summernote(<span class="hljs-string">&#x27;insertImage&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:5500/tianjia.jpg&#x27;</span>);<br>    <span class="hljs-comment">// $.ajax(&#123;</span><br>    <span class="hljs-comment">//     type:&quot;POST&quot;,</span><br>    <span class="hljs-comment">//     url:&quot;/addimage&quot;,</span><br>    <span class="hljs-comment">//     data: sj,</span><br>    <span class="hljs-comment">//     // cache: false,</span><br>    <span class="hljs-comment">//     // contentType: false,</span><br>    <span class="hljs-comment">//     // processData: false,</span><br>    <span class="hljs-comment">//     success: function (res) &#123;</span><br>    <span class="hljs-comment">//         if (res.result == &quot;OK&quot;) &#123;</span><br>                <span class="hljs-comment">// var url = &#x27;https://mgr.ytdfzyjt.com/getimage?imgid=&#x27;+res.img;</span><br>                <span class="hljs-comment">//     $summernote.summernote(&#x27;insertImage&#x27;,url);</span><br>                <span class="hljs-comment">// &#125;else&#123;&#125;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;);</span><br>    &#125;,<span class="hljs-number">100</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="图片删除"><a href="#图片删除" class="headerlink" title="图片删除"></a>图片删除</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://summernote.org/">Summernote</a></p><p><a href="https://github.com/summernote/awesome-summernote">awesome-summernote（包含插件主题等）</a></p><p><a href="https://blog.csdn.net/sincy09/article/details/82853547">summernote 上传图片、删除图片</a></p><p><a href="https://blog.csdn.net/weixin_42881256/article/details/82863204">summernote富文本编辑器实现图片添加上传和删除图片</a></p><p><a href="https://blog.csdn.net/xiaotudeluobo/article/details/90637351">summernote中关于上传图片的问题（解决）</a></p><p><a href="https://blog.csdn.net/zero_295813128/article/details/52670128">summernote处理上传图片到自己的服务器</a></p><p><a href="https://blog.csdn.net/sky_sunshine_x/article/details/80985097">富文本编辑器summernote的基本使用（自定义行高字体属性）</a></p><p><a href="https://www.xuexiareas.com/index/Articles/details/num/13.html">富文本编辑器之图片上传删除问题</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>HTML</tag>
      
      <tag>JS</tag>
      
      <tag>富文本编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode插件</title>
    <link href="/2020/06/vscode-plugins/"/>
    <url>/2020/06/vscode-plugins/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>live2d点击下载没反应解决办法</title>
    <link href="/2020/06/live2d-download/"/>
    <url>/2020/06/live2d-download/</url>
    
    <content type="html"><![CDATA[<p>在Live2D官网下载Live2D Cublsm的时候，发现点击下载按钮没有反应的情况。不管点“アップデートをダウンロードする” （“Download updates”）还是“初めてダウンロードする” （“Download for the first time”），都没有反应。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在打开控制台查看源代码后发现Live2D官网通过谷歌的CDN （ajax.googleapis.com）引用jquery，而按钮被点击时的行为是通过jquery的函数定义的。由于众所周知的原因，我们没法直接访问谷歌CDN。这就导致按钮失效，我们无法通过点击按钮获取下载链接。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在浏览器中按F12或者鼠标右键检查，打开控制台，点击“console”一项，然后在下面输入以下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">genFileURL</span><span class="hljs-params">(LATEST_VERSION_WIN, <span class="hljs-string">&quot;zh&quot;</span>, <span class="hljs-string">&quot;exe&quot;</span>)</span></span><br></code></pre></div></td></tr></table></figure><p>如果是Mac用户，把<code>LATEST_VERSION_WIN</code>改成<code>LATEST_VERSION_MAC</code>，把<code>exe</code>改成<code>pkg</code>；</p><p>如果想用日文版、英文版，把zh改成jp或者en然后回车，把返回的链接放到浏览器地址栏里就能下载最新的Live2D安装包。</p><p>如果要下载以前版本的安装包，只要把上面的<code>LATEST_VERSION_XXX</code>改成<code>OLDER_VERSIONS_XXX</code>，然后在后面加一个英文的点，控制台就会列出之前可下载的版本，然后移动方向键选择，按回车键确认。</p><p>最后完整命令看起来像是这样：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">genFileURL</span>(OLDER_VERSIONS_WIN.v<span class="hljs-number">4</span>_<span class="hljs-number">00</span>_<span class="hljs-number">02</span>,<span class="hljs-string">&quot;zh&quot;</span>,<span class="hljs-string">&quot;exe&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>再按一次回车就可以看到下载链接了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>add-live2d</title>
    <link href="/2020/06/add-live2d/"/>
    <url>/2020/06/add-live2d/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【转】用markdown画图（流程图、序列图等等）</title>
    <link href="/2020/06/markdown-diagrams/"/>
    <url>/2020/06/markdown-diagrams/</url>
    
    <content type="html"><![CDATA[<h3 id="1、横向流程图源码格式："><a href="#1、横向流程图源码格式：" class="headerlink" title="1、横向流程图源码格式："></a>1、横向流程图源码格式：</h3><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">mermaid<br>graph LR<br>A[方形] --&gt;B(圆角)<br>    B --&gt; C&#123;条件a&#125;<br>    C --&gt;|<span class="hljs-type">a</span>=<span class="hljs-number">1</span>| <span class="hljs-type">D</span>[结果<span class="hljs-number">1</span>]<br>    C --&gt;|<span class="hljs-type">a</span>=<span class="hljs-number">2</span>| <span class="hljs-type">E</span>[结果<span class="hljs-number">2</span>]<br>    F[横向流程图]<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><pre><code class=" mermaid">graph LRA[方形] --&gt;B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt;|a&#x3D;1| D[结果1]    C --&gt;|a&#x3D;2| E[结果2]    F[横向流程图]</code></pre><h3 id="2、竖向流程图源码格式："><a href="#2、竖向流程图源码格式：" class="headerlink" title="2、竖向流程图源码格式："></a>2、竖向流程图源码格式：</h3><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">mermaid<br>graph TD<br>A[方形] --&gt; B(圆角)<br>    B --&gt; C&#123;条件a&#125;<br>    C --&gt; |<span class="hljs-type">a</span>=<span class="hljs-number">1</span>| <span class="hljs-type">D</span>[结果<span class="hljs-number">1</span>]<br>    C --&gt; |<span class="hljs-type">a</span>=<span class="hljs-number">2</span>| <span class="hljs-type">E</span>[结果<span class="hljs-number">2</span>]<br>    F[竖向流程图]<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><pre><code class=" mermaid">graph TDA[方形] --&gt; B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt; |a&#x3D;1| D[结果1]    C --&gt; |a&#x3D;2| E[结果2]    F[竖向流程图]</code></pre><h3 id="3、标准流程图源码格式："><a href="#3、标准流程图源码格式：" class="headerlink" title="3、标准流程图源码格式："></a>3、标准流程图源码格式：</h3><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">flow<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond<span class="hljs-function"><span class="hljs-params">(<span class="hljs-literal">yes</span>)</span>-&gt;</span>io-&gt;e<br>cond<span class="hljs-function"><span class="hljs-params">(<span class="hljs-literal">no</span>)</span>-&gt;</span>sub1<span class="hljs-function"><span class="hljs-params">(right)</span>-&gt;</span>op<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs flow">st&#x3D;&gt;start: 开始框<br>op&#x3D;&gt;operation: 处理框<br>cond&#x3D;&gt;condition: 判断框(是或否?)<br>sub1&#x3D;&gt;subroutine: 子流程<br>io&#x3D;&gt;inputoutput: 输入输出框<br>e&#x3D;&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></div></td></tr></table></figure><h3 id="4、标准流程图源码格式（横向）："><a href="#4、标准流程图源码格式（横向）：" class="headerlink" title="4、标准流程图源码格式（横向）："></a>4、标准流程图源码格式（横向）：</h3><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">flow<br>st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st<span class="hljs-function"><span class="hljs-params">(right)</span>-&gt;</span>op<span class="hljs-function"><span class="hljs-params">(right)</span>-&gt;</span>cond<br>cond<span class="hljs-function"><span class="hljs-params">(<span class="hljs-literal">yes</span>)</span>-&gt;</span>io<span class="hljs-function"><span class="hljs-params">(bottom)</span>-&gt;</span>e<br>cond<span class="hljs-function"><span class="hljs-params">(<span class="hljs-literal">no</span>)</span>-&gt;</span>sub1<span class="hljs-function"><span class="hljs-params">(right)</span>-&gt;</span>op<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs flow">st&#x3D;&gt;start: 开始框<br>op&#x3D;&gt;operation: 处理框<br>cond&#x3D;&gt;condition: 判断框(是或否?)<br>sub1&#x3D;&gt;subroutine: 子流程<br>io&#x3D;&gt;inputoutput: 输入输出框<br>e&#x3D;&gt;end: 结束框<br>st(right)-&gt;op(right)-&gt;cond<br>cond(yes)-&gt;io(bottom)-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></div></td></tr></table></figure><h3 id="5、UML时序图源码样例："><a href="#5、UML时序图源码样例：" class="headerlink" title="5、UML时序图源码样例："></a>5、UML时序图源码样例：</h3><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">sequence</span><br>对象<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">-</span>&gt;对象<span class="hljs-selector-tag">B</span>: 对象<span class="hljs-selector-tag">B</span>你好吗?（请求）<br><span class="hljs-selector-tag">Note</span> <span class="hljs-selector-tag">right</span> <span class="hljs-selector-tag">of</span> 对象<span class="hljs-selector-tag">B</span>: 对象<span class="hljs-selector-tag">B</span>的描述<br><span class="hljs-selector-tag">Note</span> <span class="hljs-selector-tag">left</span> <span class="hljs-selector-tag">of</span> 对象<span class="hljs-selector-tag">A</span>: 对象<span class="hljs-selector-tag">A</span>的描述(提示)<br>对象<span class="hljs-selector-tag">B</span><span class="hljs-selector-tag">--</span>&gt;对象<span class="hljs-selector-tag">A</span>: 我很好(响应)<br>对象<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">-</span>&gt;对象<span class="hljs-selector-tag">B</span>: 你真的好吗？<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sequence">对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象A-&gt;对象B: 你真的好吗？<br></code></pre></div></td></tr></table></figure><h3 id="6、UML时序图源码复杂样例："><a href="#6、UML时序图源码复杂样例：" class="headerlink" title="6、UML时序图源码复杂样例："></a>6、UML时序图源码复杂样例：</h3><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">sequence</span><br><span class="hljs-selector-tag">Title</span>: 标题：复杂使用<br>对象<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">-</span>&gt;对象<span class="hljs-selector-tag">B</span>: 对象<span class="hljs-selector-tag">B</span>你好吗?（请求）<br><span class="hljs-selector-tag">Note</span> <span class="hljs-selector-tag">right</span> <span class="hljs-selector-tag">of</span> 对象<span class="hljs-selector-tag">B</span>: 对象<span class="hljs-selector-tag">B</span>的描述<br><span class="hljs-selector-tag">Note</span> <span class="hljs-selector-tag">left</span> <span class="hljs-selector-tag">of</span> 对象<span class="hljs-selector-tag">A</span>: 对象<span class="hljs-selector-tag">A</span>的描述(提示)<br>对象<span class="hljs-selector-tag">B</span><span class="hljs-selector-tag">--</span>&gt;对象<span class="hljs-selector-tag">A</span>: 我很好(响应)<br>对象<span class="hljs-selector-tag">B</span><span class="hljs-selector-tag">-</span>&gt;小三: 你好吗<br>小三<span class="hljs-selector-tag">--</span>&gt;&gt;对象<span class="hljs-selector-tag">A</span>: 对象<span class="hljs-selector-tag">B</span>找我了<br>对象<span class="hljs-selector-tag">A</span><span class="hljs-selector-tag">-</span>&gt;对象<span class="hljs-selector-tag">B</span>: 你真的好吗？<br><span class="hljs-selector-tag">Note</span> <span class="hljs-selector-tag">over</span> 小三,对象<span class="hljs-selector-tag">B</span>: 我们是朋友<br><span class="hljs-selector-tag">participant</span> <span class="hljs-selector-tag">C</span><br><span class="hljs-selector-tag">Note</span> <span class="hljs-selector-tag">right</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">C</span>: 没人陪我玩<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><pre><code class=" mermaid">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头  sequenceDiagram    participant 张三    participant 李四    张三-&gt;王五: 王五你好吗？    loop 健康检查        王五-&gt;王五: 与疾病战斗    end    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...    李四--&gt;&gt;张三: 很好!    王五-&gt;李四: 你怎么样?    李四--&gt;王五: 很好!</code></pre><h3 id="7、UML标准时序图样例："><a href="#7、UML标准时序图样例：" class="headerlink" title="7、UML标准时序图样例："></a>7、UML标准时序图样例：</h3><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">mermaid<br>%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头<br>  sequenceDiagram<br>    participant 张三<br>    participant 李四<br>    张三-&gt;王五: 王五你好吗？<br>    loop 健康检查<br>        王五-&gt;王五: 与疾病战斗<br>    <span class="hljs-keyword">end</span><br>    Note <span class="hljs-built_in">right</span> of 王五: 合理 食物 &lt;br/&gt;看医生...<br>    李四--&gt;&gt;张三: 很好!<br>    王五-&gt;李四: 你怎么样?<br>    李四--&gt;王五: 很好!<br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><pre><code class=" mermaid">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头  sequenceDiagram    participant 张三    participant 李四    张三-&gt;王五: 王五你好吗？    loop 健康检查        王五-&gt;王五: 与疾病战斗    end    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...    李四--&gt;&gt;张三: 很好!    王五-&gt;李四: 你怎么样?    李四--&gt;王五: 很好!</code></pre><h3 id="8、甘特图样例："><a href="#8、甘特图样例：" class="headerlink" title="8、甘特图样例："></a>8、甘特图样例：</h3><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">mermaid<br>%% 语法示例<br>        gantt<br>        dateFormat  YYYY-MM-<span class="hljs-built_in">DD</span><br>        title 软件开发甘特图<br>        <span class="hljs-meta">section</span> 设计<br>        需求                      :done,    des1, <span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">06</span>,<span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">08</span><br>        原型                      :active,  des2, <span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">09</span>, <span class="hljs-number">3d</span><br>        UI设计                     :         des3, after des2, <span class="hljs-number">5d</span><br>    未来任务                     :         des4, after des3, <span class="hljs-number">5d</span><br>        <span class="hljs-meta">section</span> 开发<br>        学习准备理解需求                      :crit, done, <span class="hljs-number">2014</span>-<span class="hljs-number">01</span>-<span class="hljs-number">06</span>,<span class="hljs-number">24h</span><br>        设计框架                             :crit, done, after des2, <span class="hljs-number">2d</span><br>        开发                                 :crit, active, <span class="hljs-number">3d</span><br>        未来任务                              :crit, <span class="hljs-number">5d</span><br>        耍                                   :<span class="hljs-number">2d</span><br>        <span class="hljs-meta">section</span> 测试<br>        功能测试                              :active, a1, after des3, <span class="hljs-number">3d</span><br>        压力测试                               :after a1  , <span class="hljs-number">20h</span><br>        测试报告                               : <span class="hljs-number">48h</span><br></code></pre></div></td></tr></table></figure><p><strong>效果图：</strong></p><pre><code class=" mermaid">%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h</code></pre><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://www.runoob.com/markdown/md-advance.html">Markdown 高级技巧-笔记</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网页自动播放问题</title>
    <link href="/2020/06/media-autoplay/"/>
    <url>/2020/06/media-autoplay/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【转】JS工厂模式</title>
    <link href="/2020/06/js-factory/"/>
    <url>/2020/06/js-factory/</url>
    
    <content type="html"><![CDATA[<p>本节书摘来自异步社区《JavaScript设计模式》一书中的第9章，第9.10节， 作者： 【美】Addy Osmani 译者： 徐涛 更多章节内容可以访问云栖社区“异步社区”公众号查看。</p><h2 id="9-10-Factory（工厂）模式"><a href="#9-10-Factory（工厂）模式" class="headerlink" title="9.10 Factory（工厂）模式"></a>9.10 Factory（工厂）模式</h2><p>Factory模式是另一种创建型模式，涉及创建对象的概念。其分类不同于其他模式的地方在于它不显式地要求使用一个构造函数。而Factory可以提供一个通用的接口来创建对象，我们可以指定我们所希望创建的工厂对象的类型（见图9-9）。<br><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="图9-9 JS工厂模式"></p><p>假设有一个UI工厂，我们要创建一个UI组件的类型。不需要直接使用new运算符或者通过另一个创建型构造函数创建这个组件，而是要求Factory对象创建一个新的组件。我们通知Factory需要什么类型的对象（如“按钮”、“面板”），它会进行实例化，然后将它返回给我们使用。</p><p>如果对象创建过程相对比较复杂，这种方法特别有用，例如，如果它强烈依赖于动态因素或应用程序配置的话。</p><p>可以在ExtJS等UI库中找到此模式的示例，其中创建对象或组件的方法也有可能被归入子类了。</p><p>下面这个示例构建在之前的代码片段之上，使用Constructor模式逻辑来定义汽车。它展示了如何使用Factory模式来实现vehicle工厂：</p><p>// Types.js –本例构造函数的存放文件<br>// 定义Car构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">options</span>) </span>&#123;<br>  <span class="hljs-comment">// 默认值</span><br>  <span class="hljs-built_in">this</span>.doors = options.doors || <span class="hljs-number">4</span>;<br>  <span class="hljs-built_in">this</span>.state = options.state || <span class="hljs-string">&quot;brand new&quot;</span>;<br>  <span class="hljs-built_in">this</span>.color = options.color || <span class="hljs-string">&quot;silver&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>// 定义Truck构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Truck</span>(<span class="hljs-params">options</span>) </span>&#123;<br>   <span class="hljs-built_in">this</span>.state = options.state || <span class="hljs-string">&quot;used&quot;</span>;<br>   <span class="hljs-built_in">this</span>.wheelSize = options.wheelSize || <span class="hljs-string">&quot;large&quot;</span>;<br>   <span class="hljs-built_in">this</span>.color = options.color || <span class="hljs-string">&quot;blue&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>// FactoryExample.js<br>// 定义vehicle工厂的大体代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">VehicleFactory</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br></code></pre></div></td></tr></table></figure><p>// 定义该工厂factory的原型和试用工具，默认的vehicleClass是Car</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">VehicleFactory.prototype.vehicleClass = Car;<br></code></pre></div></td></tr></table></figure><p>// 创建新Vehicle实例的工厂方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">VehicleFactory.prototype.createVehicle = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;<br>   <span class="hljs-keyword">if</span> (options.vehicleType === <span class="hljs-string">&quot;car&quot;</span>) &#123;<br>       <span class="hljs-built_in">this</span>.vehicleClass = Car;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-built_in">this</span>.vehicleClass = Truck;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">this</span>.vehicleClass(options);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>// 创建生成汽车的工厂实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> carFactory = <span class="hljs-keyword">new</span> VehicleFactory();<br><span class="hljs-keyword">var</span> car = carFactory.createVehicle(&#123;<br>               vehicleType: <span class="hljs-string">&quot;car&quot;</span>,<br>               color: <span class="hljs-string">&quot;yellow&quot;</span>,<br>               doors: <span class="hljs-number">6</span>&#125;);<br></code></pre></div></td></tr></table></figure><p>// 测试汽车是由vehicleClass的原型prototype里的Car创建的<br>// 输出: true</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(car <span class="hljs-keyword">instanceof</span> Car);<br></code></pre></div></td></tr></table></figure><p>// 输出: Car对象，color: “yellow”, doors: 6,state:”brand new”</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(car);<br></code></pre></div></td></tr></table></figure><p>在方法 1 中，我们修改了VehicleFactory实例来使用Truck类：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> movingTruck = carFactory.createVehicle(&#123;<br>                      vehicleType: <span class="hljs-string">&quot;truck&quot;</span>,<br>                      state: <span class="hljs-string">&quot;like new&quot;</span>,<br>                      color: <span class="hljs-string">&quot;red&quot;</span>,<br>                      wheelSize: <span class="hljs-string">&quot;small&quot;</span>&#125;);<br></code></pre></div></td></tr></table></figure><p>// 测试卡车是由vehicleClass的原型prototype里的Truck创建的<br>// 输出: true</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(movingTruck <span class="hljs-keyword">instanceof</span> Truck);<br></code></pre></div></td></tr></table></figure><p>// 输出: Truck对象，color ：”red”, state：”like new” ，wheelSize：”small”</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(movingTruck);<br></code></pre></div></td></tr></table></figure><p>在方法2中，我们把VehicleFactory归入子类来创建一个构建Truck的工厂类：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TruckFactory</span>(<span class="hljs-params"></span>) </span>&#123; &#125;<br>TruckFactory.prototype = <span class="hljs-keyword">new</span> VehicleFactory();<br>TruckFactory.prototype.vehicleClass = Truck;<br><span class="hljs-keyword">var</span> truckFactory = <span class="hljs-keyword">new</span> TruckFactory();<br><span class="hljs-keyword">var</span> myBigTruck = truckFactory.createVehicle(&#123;<br>                      state: <span class="hljs-string">&quot;omg..so bad.&quot;</span>,<br>                      color: <span class="hljs-string">&quot;pink&quot;</span>,<br>                      wheelSize: <span class="hljs-string">&quot;so big&quot;</span>&#125;);<br></code></pre></div></td></tr></table></figure><p>// 确认myBigTruck是由原型Truck创建的<br>// 输出: true</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(myBigTruck <span class="hljs-keyword">instanceof</span> Truck);<br></code></pre></div></td></tr></table></figure><p>// 输出：Truck对象，color: pink”, wheelSize: “so big”, state: “omg. so bad”</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(myBigTruck);<br></code></pre></div></td></tr></table></figure><h3 id="9-10-1-何时使用Factory模式"><a href="#9-10-1-何时使用Factory模式" class="headerlink" title="9.10.1 何时使用Factory模式"></a>9.10.1 何时使用Factory模式</h3><p>Factory模式应用于如下场景时是特别有用的：</p><p>当对象或组件设置涉及高复杂性时<br>当需要根据所在的不同环境轻松生成对象的不同实例时<br>当处理很多共享相同属性的小型对象或组件时<br>在编写只需要满足一个API契约（亦称鸭子类型）的其他对象的实例对象时。对于解耦是很有用的。</p><h3 id="9-10-2-何时不应使用Factory模式"><a href="#9-10-2-何时不应使用Factory模式" class="headerlink" title="9.10.2 何时不应使用Factory模式"></a>9.10.2 何时不应使用Factory模式</h3><p>如果应用错误，这种模式会为应用程序带来大量不必要的复杂性。除非为创建对象提供一个接口是我们正在编写的库或框架的设计目标，否则我建议坚持使用显式构造函数，以避免不必要的开销。</p><p>由于对象创建的过程实际上是藏身接口之后抽象出来的，单元测试也可能带来问题，这取决于对象创建的过程有多复杂。</p><h3 id="9-10-3-Abstract-Factory（抽象工厂）"><a href="#9-10-3-Abstract-Factory（抽象工厂）" class="headerlink" title="9.10.3 Abstract Factory（抽象工厂）"></a>9.10.3 Abstract Factory（抽象工厂）</h3><p>了解抽象工厂模式也是有用的，它用于封装一组具有共同目标的单个工厂。它能够将一组对象的实现细节从一般用法中分离出来。</p><p>应当使用抽象工厂模式的情况是：一个系统必须独立于它所创建的对象的生成方式，或它需要与多种对象类型一起工作。</p><p>既简单又容易理解的示例是车辆工厂，它定义了获取或注册车辆类型的方法。抽象工厂可以命名为AbstractVehicleFactory。抽象工厂将允许对像car或truck这样的车辆类型进行定义，具体工厂只需要实现履行车辆契约的类（如Vehicle.prototype.drive和Vehicle.prototype.breakDown）。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> AbstractVehicleFactory = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">// 存储车辆类型</span><br>  <span class="hljs-keyword">var</span> types = &#123;&#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>       getVehicle: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"> type, customizations </span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> Vehicle = types[type];<br>            <span class="hljs-keyword">return</span> (Vehicle) ? <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vehicle(customizations) : <span class="hljs-literal">null</span>;<br>       &#125;,<br>       registerVehicle: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"> type, Vehicle </span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> proto = Vehicle.prototype;<br>            <span class="hljs-comment">// 只注册实现车辆契约的类</span><br>            <span class="hljs-keyword">if</span> ( proto.drive &amp;&amp; proto.breakDown ) &#123;<br>                  types[type] = Vehicle;<br>            &#125;<br>            <span class="hljs-keyword">return</span> AbstractVehicleFactory;<br>        &#125;<br>  &#125;;<br>&#125;)();<br><span class="hljs-comment">// 用法:</span><br>AbstractVehicleFactory.registerVehicle( <span class="hljs-string">&quot;car&quot;</span>, Car );<br>AbstractVehicleFactory.registerVehicle( <span class="hljs-string">&quot;truck&quot;</span>, Truck );<br><span class="hljs-comment">// 基于抽象车辆类型实例化一个新car对象</span><br><span class="hljs-keyword">var</span> car = AbstractVehicleFactory.getVehicle( <span class="hljs-string">&quot;car&quot;</span> , &#123;<br>             color: <span class="hljs-string">&quot;lime green&quot;</span>,<br>             state: <span class="hljs-string">&quot;like new&quot;</span> &#125; );<br><span class="hljs-comment">// 同理实例化一个新truck对象</span><br><span class="hljs-keyword">var</span> truck = AbstractVehicleFactory.getVehicle( <span class="hljs-string">&quot;truck&quot;</span> , &#123;<br>                wheelSize: <span class="hljs-string">&quot;medium&quot;</span>,<br>                color: <span class="hljs-string">&quot;neon yellow&quot;</span> &#125; );<br></code></pre></div></td></tr></table></figure><h2 id="完整示例代码："><a href="#完整示例代码：" class="headerlink" title="完整示例代码："></a>完整示例代码：</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">//先定义几种车 构造函数  工厂方法</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">options</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.doors = options.doors || <span class="hljs-number">4</span>;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.state = options.state || <span class="hljs-string">&quot;brand&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.color = options.color || <span class="hljs-string">&quot;silver&quot;</span>;</span><br>&#125;<br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Truck</span>(<span class="hljs-params">options</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.state = options.state || <span class="hljs-string">&quot;used&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.wheelSize = options.wheelSize || <span class="hljs-string">&quot;large&quot;</span>;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.color = options.color || <span class="hljs-string">&quot;blue&quot;</span>;</span><br>&#125;<br> <br><span class="javascript"><span class="hljs-comment">//再定义生产车辆的工厂</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">VehicleFactory</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="javascript"><span class="hljs-comment">//定义该工厂生产的默认汽车类型</span></span><br><span class="javascript">VehicleFactory.prototype.vehicleClass = Car; <span class="hljs-comment">//Car是函数</span></span><br><span class="javascript"><span class="hljs-comment">//定义生产汽车的具体过程</span></span><br><span class="javascript">VehicleFactory.prototype.createVehicle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">if</span>(options.vehicleType === <span class="hljs-string">&quot;car&quot;</span>)&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.vehicleClass = Car;</span><br><span class="javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.vehicleClass = Truck;</span><br>&#125;<br> <br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">this</span>.vehicleClass(options); </span><br>&#125;;<br> <br><span class="javascript"><span class="hljs-comment">//建造工厂并命名</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> carFactory = <span class="hljs-keyword">new</span> VehicleFactory();</span><br><span class="javascript"><span class="hljs-comment">//开始生产汽车</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> car = carFactory.createVehicle(&#123;</span><br><span class="javascript">vehicleType: <span class="hljs-string">&quot;car&quot;</span>,</span><br><span class="javascript">color: <span class="hljs-string">&quot;yellow&quot;</span>,</span><br>doors: 6<br>&#125;);<br><span class="javascript"><span class="hljs-comment">//验证车是否是这个Car类型的车</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(car <span class="hljs-keyword">instanceof</span> Car);</span><br><span class="javascript"><span class="hljs-comment">//验验车，看看货</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(car);</span><br> <br><span class="javascript"><span class="hljs-comment">//再生产另一部车</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> movingTruck = carFactory.createVehicle(&#123;</span><br><span class="javascript">vehicleType: <span class="hljs-string">&quot;truck&quot;</span>,</span><br><span class="javascript">state: <span class="hljs-string">&quot;like new&quot;</span>,</span><br><span class="javascript">color: <span class="hljs-string">&quot;red&quot;</span>,</span><br><span class="javascript">wheelSize: <span class="hljs-string">&quot;small&quot;</span></span><br>&#125;);<br><span class="javascript"><span class="hljs-comment">//验证车是否是Track类型的车</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(movingTruck <span class="hljs-keyword">instanceof</span> Truck);</span><br><span class="javascript"><span class="hljs-comment">//验验车，看看货</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(movingTruck);</span><br> <br><span class="javascript"><span class="hljs-comment">//-----------------------------------------------</span></span><br><span class="javascript"><span class="hljs-comment">//定义第二个工厂  是上面那个工厂的子工厂</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">TruckFactory</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="javascript">TruckFactory.prototype = <span class="hljs-keyword">new</span> VehicleFactory();</span><br>TruckFactory.prototype.vehicleClass = Truck;<br><span class="javascript"><span class="hljs-comment">//创建工厂</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> TruckFactory = <span class="hljs-keyword">new</span> TruckFactory();</span><br><span class="javascript"><span class="hljs-comment">//生产卡车</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> myBigTruck = TruckFactory.createVehicle(&#123;</span><br><span class="javascript">state: <span class="hljs-string">&quot;omg..so bad.&quot;</span>,</span><br><span class="javascript">color: <span class="hljs-string">&quot;pink&quot;</span>,</span><br><span class="javascript">wheelSize: <span class="hljs-string">&quot;so big&quot;</span></span><br>&#125;);<br><span class="javascript"><span class="hljs-comment">//验验车</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(myBigTruck <span class="hljs-keyword">instanceof</span> Truck);</span><br><span class="javascript"><span class="hljs-comment">//看看货</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(myBigTruck);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h2><p><a href="https://yq.aliyun.com/articles/91494?spm=a2c4e.11153940.0.0.5d4630f9s89vDO&type=2">《JavaScript设计模式》——9.10 Factory（工厂）模式</a></p><p><a href="https://blog.csdn.net/spflinux/article/details/78437032">JS——Factory(工厂)模式</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【转】Git常用的几个命令详解</title>
    <link href="/2020/06/git-commond/"/>
    <url>/2020/06/git-commond/</url>
    
    <content type="html"><![CDATA[<h2 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h2><p>git help <command> # 显示command的help</p><p>git show # 显示某次提交的内容 git show $id</p><p>git co – <file> # 抛弃工作区修改</p><p>git co . # 抛弃工作区修改</p><p>git add <file> # 将工作文件修改提交到本地暂存区</p><p>git add . # 将所有修改过的工作文件提交暂存区</p><p>git rm <file> # 从版本库中删除文件</p><p>git rm <file> –cached # 从版本库中删除文件，但不删除文件</p><p>git reset <file> # 从暂存区恢复到工作文件</p><p>git reset – . # 从暂存区恢复到工作文件</p><p>git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</p><p>git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p><p>git ci -am “some comments”</p><p>git ci –amend # 修改最后一次提交记录</p><p>git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</p><p>git revert HEAD # 恢复最后一次提交的状态</p><h2 id="git-tag-—-标签相关操作"><a href="#git-tag-—-标签相关操作" class="headerlink" title="git tag — 标签相关操作"></a>git tag — 标签相关操作</h2><p>标签可以针对某一时间点的版本做标记，常用于版本发布。</p><h4 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h4><p>$ git tag # 在控制台打印出当前仓库的所有标签</p><p>$ git tag -l ‘v0.1.*’ # 搜索符合模式的标签</p><h4 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h4><p>git标签分为两种类型：轻量标签和附注标签。轻量标签是指向提交对象的引用，附注标签则是仓库中的一个独立对象。建议使用附注标签。</p><p><strong>创建轻量标签</strong></p><p>$ git tag v0.1.2-light</p><p><strong>创建附注标签</strong></p><p>$ git tag -a v0.1.2 -m “0.1.2版本”</p><p>创建轻量标签不需要传递参数，直接指定标签名称即可。<br>创建附注标签时，参数a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说明，说明信息会保存在标签对象中。</p><h4 id="切换到标签"><a href="#切换到标签" class="headerlink" title="切换到标签"></a>切换到标签</h4><p>与切换分支命令相同，用git checkout [tagname]<br>查看标签信息<br>用git show命令可以查看标签的版本信息：<br>$ git show v0.1.2</p><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><p>误打或需要修改标签时，需要先将标签删除，再打新标签。<br>$ git tag -d v0.1.2 # 删除标签</p><p>参数d即delete的缩写，意为删除其后指定的标签。</p><h4 id="给指定的commit打标签"><a href="#给指定的commit打标签" class="headerlink" title="给指定的commit打标签"></a>给指定的commit打标签</h4><p>打标签不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。</p><p><strong>补打标签</strong></p><p>$ git tag -a v0.1.1 9fbc3d0</p><h4 id="标签发布"><a href="#标签发布" class="headerlink" title="标签发布"></a>标签发布</h4><p>通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：<br>git push origin v0.1.2 # 将v0.1.2标签提交到git服务器 </p><p>git push origin –tags # 将本地所有标签一次性提交到git服务器</p><p><strong>注意：</strong>如果想看之前某个标签状态下的文件，可以这样操作</p><p>1.git tag   查看当前分支下的标签</p><p>2.git  checkout v0.21   此时会指向打v0.21标签时的代码状态，（但现在处于一个空的分支上）</p><p>3.cat  test.txt   查看某个文件</p><h2 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h2><p>git diff <file> # 比较当前文件和暂存区文件差异 git diff</p><p>git diff <id1>&lt;</p><p>git diff <branch1>..<branch2> # 在两个分支之间比较</p><p>git diff –staged # 比较暂存区和版本库差异</p><p>git diff –cached # 比较暂存区和版本库差异</p><p>git diff –stat # 仅仅比较统计信息</p><h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><p>git log git log <file> # 查看该文件每次提交记录</p><p>git log -p <file> # 查看每次详细修改内容的diff</p><p>git log -p -2 # 查看最近两次详细修改内容的diff</p><p>git log –stat #查看提交统计信息</p><h2 id="tig"><a href="#tig" class="headerlink" title="tig"></a>tig</h2><p>Mac上可以使用tig代替diff和log，brew install tig</p><h2 id="Git-本地分支管理-查看、切换、创建和删除分支"><a href="#Git-本地分支管理-查看、切换、创建和删除分支" class="headerlink" title="Git 本地分支管理 - 查看、切换、创建和删除分支"></a>Git 本地分支管理 - 查看、切换、创建和删除分支</h2><p>git br -r # 查看远程分支</p><p>git br <new_branch> # 创建新的分支</p><p>git br -v # 查看各个分支最后提交信息</p><p>git br –merged # 查看已经被合并到当前分支的分支</p><p>git br –no-merged # 查看尚未被合并到当前分支的分支</p><p>git co <branch> # 切换到某个分支</p><p>git co -b <new_branch> # 创建新的分支，并且切换过去</p><p>git co -b <new_branch> <branch> # 基于branch创建新的new_branch</p><p>git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</p><p>git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支</p><p>git br -d <branch> # 删除某个分支</p><p>git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</p><h2 id="Git-本地分支管理-分支合并和rebase"><a href="#Git-本地分支管理-分支合并和rebase" class="headerlink" title="Git 本地分支管理 - 分支合并和rebase"></a>Git 本地分支管理 - 分支合并和rebase</h2><p>git merge <branch> # 将branch分支合并到当前分支</p><p>git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交</p><p>git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch></p><h2 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h2><p>git diff &gt; ../sync.patch # 生成补丁</p><p>git apply ../sync.patch # 打补丁</p><p>git apply –check ../sync.patch #测试补丁能否成功</p><h2 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h2><p>git stash # 暂存</p><p>git stash list # 列所有stash</p><p>git stash apply # 恢复暂存的内容</p><p>git stash drop # 删除暂存区</p><h2 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h2><p>git pull # 抓取远程仓库所有分支更新并合并到本地</p><p>git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</p><p>git fetch origin # 抓取远程仓库更新</p><p>git merge origin/master # 将远程主分支合并到本地当前分支</p><p>git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支</p><p>git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上</p><p>git push # push所有分支</p><p>git push origin master # 将本地主分支推到远程主分支</p><p>git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</p><p>git push origin <local_branch> # 创建远程分支， origin是远程仓库名</p><p>git push origin <local_branch>:<remote_branch> # 创建远程分支</p><p>git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支</p><h2 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h2><p>git remote -v # 查看远程服务器地址和仓库名称</p><p>git remote show origin # 查看远程服务器仓库状态</p><p>git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</p><p>git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库</p><h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</p><p>scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</p><p>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库</p><p>git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</p><p>git push -u origin master # 客户端首次提交</p><p>git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</p><p>git remote set-head origin master # 设置远程仓库的HEAD指向master分支</p><p>也可以命令设置跟踪远程库和本地库</p><p>git branch –set-upstream master origin/master</p><p>git branch –set-upstream develop origin/develop</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/cspku/articles/Git_cmds.html">《Git常用命令》</a></p><p><a href="https://blog.csdn.net/wangjia55/article/details/8793577/">《git tag — 标签相关操作》</a></p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p><strong>原文链接：<a href="https://www.cnblogs.com/PeunZhang/p/5957211.html">Git常用的几个命令详解</a>    作者：白树</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm换源和常用命令</title>
    <link href="/2020/06/npm-registry-basecommond/"/>
    <url>/2020/06/npm-registry-basecommond/</url>
    
    <content type="html"><![CDATA[<p>npm 官方站点 <a href="http://www.npmjs.org/">http://www.npmjs.org/</a> 虽然没有被墙，但是下载第三方依赖包是从国外服务器下载，下载的速度是非常慢让人着急不说还有可能会出现异常。</p><h2 id="切换npm源的几种方式"><a href="#切换npm源的几种方式" class="headerlink" title="切换npm源的几种方式"></a>切换npm源的几种方式</h2><h4 id="通过使用cnpm命令"><a href="#通过使用cnpm命令" class="headerlink" title="通过使用cnpm命令"></a>通过使用cnpm命令</h4><p>首先安装cnpm命令行工具</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></div></td></tr></table></figure><p>安装完成后检测是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cnpm -v<br></code></pre></div></td></tr></table></figure><p>安装成功之后，以后安装依赖包的方式和npm是一样的，只是把npm命令换成cnpm就可以了。</p><p>如果已经习惯了用npm安装，不想用cnpm的话，也不是没有办法，只要直接把源换掉就好了，下面有三种方法可以换源：</p><h4 id="通过config配置国内镜像源"><a href="#通过config配置国内镜像源" class="headerlink" title="通过config配置国内镜像源"></a>通过config配置国内镜像源</h4><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org </span><br></code></pre></div></td></tr></table></figure><h4 id="通过-npm-命令指定下载源"><a href="#通过-npm-命令指定下载源" class="headerlink" title="通过 npm 命令指定下载源"></a>通过 npm 命令指定下载源</h4><p>注意：这种方式只会在当次下载中生效</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">npm install 你要下载的包名 --registry https:<span class="hljs-regexp">//</span>registry.npm.taobao.org <br></code></pre></div></td></tr></table></figure><p>如：</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue<span class="hljs-regexp">/cli --registry https:/</span>/registry.<span class="hljs-built_in">npm</span>.taobao.org<br></code></pre></div></td></tr></table></figure><h4 id="编辑配置文件-npmrc-添加源地址"><a href="#编辑配置文件-npmrc-添加源地址" class="headerlink" title="编辑配置文件 ~/.npmrc 添加源地址"></a>编辑配置文件 ~/.npmrc 添加源地址</h4><p>打开.npmrc文件（通常位于C:\Program Files\nodejs\node_modules\npm.npmrc），写入下面的内容：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">registry = https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br></code></pre></div></td></tr></table></figure><h4 id="检查是否更换成功"><a href="#检查是否更换成功" class="headerlink" title="检查是否更换成功"></a>检查是否更换成功</h4><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span>list<br>或<br>npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">get</span> registery <br></code></pre></div></td></tr></table></figure><p>输出结果是：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><h4 id="还原为npm源"><a href="#还原为npm源" class="headerlink" title="还原为npm源"></a>还原为npm源</h4><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmjs.org/</span><br></code></pre></div></td></tr></table></figure><h2 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h2><h4 id="npm-install-安装模块"><a href="#npm-install-安装模块" class="headerlink" title="npm install 安装模块"></a>npm install 安装模块</h4><p>最普通的一条安装命令：</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install @vue/cli<br></code></pre></div></td></tr></table></figure><p>安装指定版本</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install gulp@<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）</strong></p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> gulp --save 或 npm <span class="hljs-keyword">install</span> gulp -S<br></code></pre></div></td></tr></table></figure><p>package.json 文件的 dependencies 字段：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;gulp&quot;</span>: <span class="hljs-string">&quot;^3.9.1&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</strong></p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> gulp --save-dev 或 npm <span class="hljs-keyword">install</span> gulp -D<br></code></pre></div></td></tr></table></figure><p>package.json 文件的 devDependencies字段：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;gulp&quot;</span>: <span class="hljs-string">&quot;^3.9.1&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</strong></p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> gulp --save-optional 或 npm <span class="hljs-keyword">install</span> gulp -O<br></code></pre></div></td></tr></table></figure><p>package.json 文件的optionalDependencies字段：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">&quot;optionalDependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;gulp&quot;</span>: <span class="hljs-string">&quot;^3.9.1&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>-E, –save-exact 精确安装指定模块版本</strong></p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> gulp --save-exact 或 npm <span class="hljs-keyword">install</span> gulp -E<br></code></pre></div></td></tr></table></figure><p>输入命令<code>npm install gulp -ES</code>，留意<code>package.json</code> 文件的 <code>dependencies</code> 字段，以看出版本号中的<strong>^</strong>消失了</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;gulp&quot;</span>: <span class="hljs-string">&quot;3.9.1&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>模块的依赖都被写入了<code>package.json</code>文件后，他人打开项目的根目录（项目开源、内部团队合作），使用<code>npm install</code>命令可以根据<code>dependencies</code>配置安装所有的依赖包。</p><p>根据安装位置不同分为<strong>本地安装（local）</strong>和<strong>全局安装（global）</strong>：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> &lt;package&gt;      <span class="hljs-comment"># 本地安装</span><br></code></pre></div></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install &lt;<span class="hljs-keyword">package</span>&gt; -g   # 全局安装,使用 -g 或 <span class="hljs-comment">--global</span><br></code></pre></div></td></tr></table></figure><p><strong>本地安装（安装到项目）</strong><br>将安装包放在项目的 ./node_modules 下（即运行 npm 命令时所在的目录，项目根目录），包的命令行只能在当前目录下使用，如果在其他目录下运行会提示命令不存在。</p><p>如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录，并将信息保存到项目的package.json文件中。（package.json即每次npm install安装项目依赖包的参照文件。）所以，我们第一次运行项目需要npm install的原因就是：下载所有项目依赖包。</p><p>注意：若在项目过程中需要引入外包，<code>npm install &lt;package&gt; </code>不会将包录入package.json中。只有用<code>npm install &lt;package&gt; --save</code>才会录入。</p><p><strong>全局安装（安装到环境）</strong><br>将安装包放在 <code>$NODE_HOME/lib/node_modules</code>，包的命令可以直接所有目录里使用。如：安装vue-cli：<code>npm install vue-cli -g</code>，安装完便可在所有目录下直接使用 vue 命令。</p><h4 id="npm-uninstall-卸载模块"><a href="#npm-uninstall-卸载模块" class="headerlink" title="npm uninstall 卸载模块"></a>npm uninstall 卸载模块</h4><p>基础语法</p><figure class="highlight fsharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fsharp">npm uninstall <span class="hljs-meta">[&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]</span>... [-S|--save|-D|--save-dev|-O|--save-optional]<br></code></pre></div></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">aliases</span>: <span class="hljs-built_in">remove</span>, rm, r, un, unlink<br></code></pre></div></td></tr></table></figure><p>如卸载开发版本的模块</p><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q">npm uninstall gulp --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span><br></code></pre></div></td></tr></table></figure><h4 id="npm-update-更新模块"><a href="#npm-update-更新模块" class="headerlink" title="npm update 更新模块"></a>npm update 更新模块</h4><p>基础语法</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">npm update <span class="hljs-selector-attr">[-g]</span> <span class="hljs-selector-attr">[&lt;pkg&gt;...]</span><br></code></pre></div></td></tr></table></figure><h4 id="npm-outdated-检查模块是否已经过时"><a href="#npm-outdated-检查模块是否已经过时" class="headerlink" title="npm outdated 检查模块是否已经过时"></a>npm outdated 检查模块是否已经过时</h4><p>基础语法</p><figure class="highlight bnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bnf">npm outdated [[<span class="hljs-attribute">&lt;@scope&gt;</span>/]<span class="hljs-attribute">&lt;pkg&gt;</span> ...]<br></code></pre></div></td></tr></table></figure><p>此命令会列出所有已经过时的包，可以及时进行包的更新。</p><h4 id="npm-ls-查看安装的模块"><a href="#npm-ls-查看安装的模块" class="headerlink" title="npm ls 查看安装的模块"></a>npm ls 查看安装的模块</h4><p>基础语法</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">npm <span class="hljs-keyword">ls</span> [[&lt;@scope&gt;/]<span class="hljs-symbol">&lt;pkg&gt;</span> ...]<br><br>aliase<span class="hljs-variable">s:</span> <span class="hljs-keyword">list</span>, <span class="hljs-keyword">la</span>, <span class="hljs-keyword">ll</span><br></code></pre></div></td></tr></table></figure><p>查看全局安装的模块及依赖 </p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> ls -g <br></code></pre></div></td></tr></table></figure><h4 id="npm-version-查看模块版本"><a href="#npm-version-查看模块版本" class="headerlink" title="npm version 查看模块版本"></a>npm version 查看模块版本</h4><p>基础语法</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">npm <span class="hljs-keyword">version</span> [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | <span class="hljs-keyword">from</span>-git]<br><br><span class="hljs-string">&#x27;npm [-v | --version]&#x27;</span> <span class="hljs-keyword">to</span> print npm <span class="hljs-keyword">version</span><br><span class="hljs-string">&#x27;npm view &lt;pkg&gt; version&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">view</span> a packag<span class="hljs-string">e&#x27;s published version</span><br><span class="hljs-string">&#x27;</span>npm ls<span class="hljs-string">&#x27; to inspect current package/dependency versions</span><br></code></pre></div></td></tr></table></figure><p>查看模块的版本：<code>npm version</code></p><h5 id="模块的版本号"><a href="#模块的版本号" class="headerlink" title="模块的版本号"></a>模块的版本号</h5><p>npm 使用的是一种叫做 semantic version 的规范，它的规则很简单，总结起来就是下面几条：</p><p>使用 semver 的软件必须定义公开、严谨、易于理解的 API。也就是模块要提供功能给用户。</p><p>版本号格式为：<strong>X.Y.Z</strong>，并且 X、Y、Z 均为正整数并且不断递增。X 表示大版本（major）、Y 表示小版本（minor）、Z 表示补丁版本（patch）。</p><p>一个版本发布后，此版本内容不能再变更，变更必须再发布一个新版本。也就是不能覆盖发布。</p><p><strong>0.Y.Z</strong> 表示初始版本，这种版本下的 API 不能保证稳定，随时可能变更。</p><p>当进行了向后兼容的 bug 修复时，补丁版本 Z 必须增加。</p><p>当引入了向后兼容的新功能时，小版本 Y 必须增加，同时 Z 必须重置为 0（小版本里面可能会包含 bug 修复）。</p><p>当引入了不兼容的变更时，大版本 X 必须增加，同时 Y、Z 必须重置为 0（大版本里面可能会包含小版本或者补丁版本的改动）。</p><p><strong>X.Y.Z</strong> 后面还可以加预发布版本号、构建信息，格式为：<strong>X.Y.Z-pre_lease+build_meta</strong>，比如：<strong>1.0.0-alpha+20151226</strong>、<strong>1.0.0-beta.2+20151230</strong>。</p><p>进行版本号比较时，遵循下面的规则：1）依次按数值比较 X、Y、Z 的值，直到第一个不同的位置；2）如果两个版本的 X、Y、Z 都相等，含有 pre-release 版本号的较小；3）如果两个版本的 X、Y、Z 都相等并且都含有 pre-release 版本号，要单独比较 pre-release 版本。比如：<strong>1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1，1.0.0-alpha &lt; 1.0.0，1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2</strong>。</p><h4 id="npm-view-查看模块的注册信息"><a href="#npm-view-查看模块的注册信息" class="headerlink" title="npm view 查看模块的注册信息"></a>npm view 查看模块的注册信息</h4><p>基础语法</p><figure class="highlight fsharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fsharp">npm view <span class="hljs-meta">[&lt;@scope&gt;/]&lt;name&gt;[@&lt;version&gt;]</span> <span class="hljs-meta">[&lt;field&gt;[.&lt;subfield&gt;]</span>...]<br><br>aliases: info, show, v<br></code></pre></div></td></tr></table></figure><p>查看模块的依赖关系</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">npm <span class="hljs-built_in">view</span> gulp <span class="hljs-built_in">dependencies</span><br></code></pre></div></td></tr></table></figure><p>查看模块的源文件地址</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> view gulp repository.url<br></code></pre></div></td></tr></table></figure><p>查看模块的贡献者，包含邮箱地址</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> view <span class="hljs-built_in">npm</span> contributors<br></code></pre></div></td></tr></table></figure><h4 id="npm-help-查看某条命令的详细帮助"><a href="#npm-help-查看某条命令的详细帮助" class="headerlink" title="npm help 查看某条命令的详细帮助"></a>npm help 查看某条命令的详细帮助</h4><p>基础语法</p><figure class="highlight fsharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fsharp">npm help &lt;term&gt; <span class="hljs-meta">[&lt;terms..&gt;]</span><br></code></pre></div></td></tr></table></figure><p>例如输入<code>npm help install</code>，系统在默认的浏览器或者默认的编辑器中打开本地nodejs安装包的文件<code>/nodejs/node_modules/npm/html/doc/cli/npm-install.html</code></p><h4 id="npm-init-在项目中引导创建一个package-json文件"><a href="#npm-init-在项目中引导创建一个package-json文件" class="headerlink" title="npm init 在项目中引导创建一个package.json文件"></a>npm init 在项目中引导创建一个package.json文件</h4><p>安装包的信息可保持到项目的package.json文件中，以便后续的其它的项目开发或者他人合作使用，也说package.json在项目中是必不可少的。</p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">npm init [-f|<span class="hljs-type">--force</span>|<span class="hljs-type">-y</span>|<span class="hljs-type">--yes</span>]<br></code></pre></div></td></tr></table></figure><h4 id="npm-package-json的语法"><a href="#npm-package-json的语法" class="headerlink" title="npm package.json的语法"></a>npm package.json的语法</h4><p>英文原版：<a href="https://docs.npmjs.com/files/package.json">https://docs.npmjs.com/files/package.json</a></p><p>这块内容好多，国内有好心人整理：《npm的package.json中文文档》，从这份文档拷贝出一些比较常见的，如下：</p><p><strong>默认值</strong></p><p>npm会根据包内容设置一些默认值。</p><p>“scripts”: {“start”: “node server.js”}</p><p>如果包的根目录有server.js文件，npm会默认将start命令设置为node server.js。</p><p>“scripts”:{“preinstall”: “node-waf clean || true; node-waf configure build”}</p><p>如果包的根目录有wscript文件，npm会默认将preinstall命令用node-waf进行编译。</p><p>“scripts”:{“preinstall”: “node-gyp rebuild”}</p><p>如果包的根目录有binding.gyp文件，npm会默认将preinstall命令用node-gyp进行编译。</p><p>“contributors”: […]</p><p>如果包的根目录有AUTHORS文件，npm会默认逐行按Name <email> (url)格式处理，邮箱和url是可选的。#号和空格开头的行会被忽略。</p><p><strong>name</strong></p><p>在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。</p><p>name是这个东西的名字。注意：</p><ul><li>不要把node或者js放在名字中。因为你写了package.json它就被假定成为了js，不过你可以用”engine”字段指定一个引擎（见后文）。</li><li>这个名字会作为在URL的一部分、命令行的参数或者文件夹的名字。任何non-url-safe的字符都是不能用的。</li><li>这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰。</li><li>在你爱上你的名字之前，你可能要去npm registry查看一下这个名字是否已经被使用了。<a href="http://registry.npmjs.org/">http://registry.npmjs.org/</a><br><strong>version</strong></li></ul><p>version必须能被<a href="https://github.com/npm/node-semver">node-semver</a>解析，它被包在npm的依赖中。（要自己用可以执行npm install semver）</p><p>可用的“数字”或者“范围”见semver(7).</p><p><strong>description</strong></p><p>放简介，字符串，方便在npm search中搜索</p><p><strong>keywords</strong></p><p>关键字，数组、字符串，方便在npm search中搜索</p><p><strong>bugs</strong></p><p>你项目的提交问题的url和（或）邮件地址</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br> <span class="hljs-attr">&quot;url&quot;</span> : <span class="hljs-string">&quot;http://github.com/owner/project/issues&quot;</span>, <br><span class="hljs-attr">&quot;email&quot;</span> : <span class="hljs-string">&quot;project@hostname.com&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>license</strong></p><p>你应该要指定一个许可证，让人知道使用的权利和限制的。</p><p>最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;license&quot;</span> : <span class="hljs-string">&quot;BSD&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><p>如果你又更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-string">&quot;licenses&quot;</span> : [<br>  &#123; <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">MyLicense</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">  , &quot;</span>url<span class="hljs-string">&quot; : &quot;</span>http://github.com/owner/project/path/to/license<span class="hljs-string">&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">]</span><br></code></pre></div></td></tr></table></figure><p><strong>repository</strong></p><p>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么npm docs命令能找到你。</p><p>这样做：</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-string">&quot;repository&quot;</span> :<br>  &#123; <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">git</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">  , &quot;</span>url<span class="hljs-string">&quot; : &quot;</span>http://github.com/isaacs/npm.git<span class="hljs-string">&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>repository<span class="hljs-string">&quot; :</span><br><span class="hljs-string">  &#123; &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>svn<span class="hljs-string">&quot;</span><br><span class="hljs-string">  , &quot;</span>url<span class="hljs-string">&quot; : &quot;</span>http://v8.googlecode.com/svn/trunk/<span class="hljs-string">&quot;</span><br><span class="hljs-string">  &#125;</span><br></code></pre></div></td></tr></table></figure><p>URL应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的url。不应该是一个html的项目页面。因为它是给计算机看的。</p><p><strong>scripts</strong></p><p>“scripts”是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。</p><p><strong>config</strong></p><p>“config” hash可以用来配置用于包脚本中的跨版本参数。在实例中，如果一个包有下面的配置：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br> <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;foo&quot;</span>,<br> <span class="hljs-attr">&quot;config&quot;</span> : &#123; <span class="hljs-attr">&quot;port&quot;</span> : <span class="hljs-string">&quot;8080&quot;</span> &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后有一个“start”命令引用了npm_package_config_port环境变量，用户可以通过npm config set foo:port 8001来重写他。</p><p><strong>dependencies</strong></p><p>依赖是给一组包名指定版本范围的一个hash。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用tarball或者git URL。</p><p>请不要将测试或过渡性的依赖放在dependencieshash中。见下文的devDependencies</p><ul><li><p>version 必须完全和version一致</p></li><li><p>&gt;version 必须比version大</p></li><li><p>&gt;=version 同上</p></li><li><p>&lt;version 同上</p></li><li><p>&lt;=version 同上</p></li><li><p>~version 大约一样</p></li><li><p>1.2.x 1.2.0, 1.2.1, 等，但不包括1.3.0</p></li><li><p>http://… 见下文’依赖URL’</p></li><li><p>*所有</p></li><li><p>“” 空，同*</p></li><li><p>version1 - version2 同 &gt;=version1 &lt;=version2.</p></li><li><p>range1 || range2 二选一。</p></li><li><p>git… 见下文’依赖Git URL’</p></li><li><p>user/repo 见下文’GitHub URLs’</p></li></ul><p>比如下面都是合法的：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;dependencies&quot;</span> :<br>  &#123; <span class="hljs-attr">&quot;foo&quot;</span> : <span class="hljs-string">&quot;1.0.0 - 2.9999.9999&quot;</span><br>  , <span class="hljs-attr">&quot;bar&quot;</span> : <span class="hljs-string">&quot;&gt;=1.0.2 &lt;2.1.2&quot;</span><br>  , <span class="hljs-attr">&quot;baz&quot;</span> : <span class="hljs-string">&quot;&gt;1.0.2 &lt;=2.3.4&quot;</span><br>  , <span class="hljs-attr">&quot;boo&quot;</span> : <span class="hljs-string">&quot;2.0.1&quot;</span><br>  , <span class="hljs-attr">&quot;qux&quot;</span> : <span class="hljs-string">&quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;</span><br>  , <span class="hljs-attr">&quot;asd&quot;</span> : <span class="hljs-string">&quot;http://asdf.com/asdf.tar.gz&quot;</span><br>  , <span class="hljs-attr">&quot;til&quot;</span> : <span class="hljs-string">&quot;~1.2&quot;</span><br>  , <span class="hljs-attr">&quot;elf&quot;</span> : <span class="hljs-string">&quot;~1.2.3&quot;</span><br>  , <span class="hljs-attr">&quot;two&quot;</span> : <span class="hljs-string">&quot;2.x&quot;</span><br>  , <span class="hljs-attr">&quot;thr&quot;</span> : <span class="hljs-string">&quot;3.3.x&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>devDependencies</strong></p><p>如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。</p><p>在这种情况下，最好将这些附属的项目列在devDependencies中。</p><p>这些东西会在执行npm link或者npm install的时候初始化，并可以像其他npm配置参数一样管理。详见npm-config(7)。</p><p>对于非特定平台的构建步骤，比如需要编译CoffeeScript，可以用prepublish脚本去实现，并把它依赖的包放在devDependency中。（译者注：prepublish定义了在执行npm publish的时候先行执行的脚本）</p><p>比如：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;ethopia-waza&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;a delightfully fruity coffee varietal&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.2.3&quot;</span>,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;coffee-script&quot;</span>: <span class="hljs-string">&quot;~1.6.3&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;prepublish&quot;</span>: <span class="hljs-string">&quot;coffee -o lib/ -c src/waza.coffee&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;lib/waza.js&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>prepublish脚本会在publishing前运行，这样用户就不用自己去require来编译就能使用。并且在开发模式中（比如本地运行npm install）会运行这个脚本以便更好地测试。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/PeunZhang/p/5553574.html">【原】npm 常用命令详解</a></p><p><a href="https://segmentfault.com/a/1190000004221514">深入 Node 模块的安装和发布</a></p><p><a href="https://github.com/ericdum/mujiang.info/issues/6/">npm的package.json中文文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一台电脑多git账号如何部署hexo博客</title>
    <link href="/2020/06/gits-hexo-d/"/>
    <url>/2020/06/gits-hexo-d/</url>
    
    <content type="html"><![CDATA[<h3 id="多git账号部署hexo博客"><a href="#多git账号部署hexo博客" class="headerlink" title="多git账号部署hexo博客"></a>多git账号部署hexo博客</h3><p>如何在一台电脑上配置多个git账号可以看我的这篇博客<a href="">一台电脑设置多个Git账号</a></p><p>前面成功配置git账号之后，接下来就是修改hexo配置文件的git部署地址，打开你博客根目录下的<code>_config.yml</code>文件（注意是博客根目录下的配置文件，不是别的地方的），找到deploy项，改为如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@你在config文件内配置的host别名:你的用户名/你的用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>按理来说这样就可以成功使用<code>hexo g-d</code>部署博客到Github 上了，但是我却遇到了问题。。</p><h3 id="部署时遇到的问题和解决办法"><a href="#部署时遇到的问题和解决办法" class="headerlink" title="部署时遇到的问题和解决办法"></a>部署时遇到的问题和解决办法</h3><p>当在一台电脑上配置了不止一个git账号时，部署博客就出现了一个奇怪的问题：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>就像上面图片一样，错误的原因是没有配置user.email和user.name，既然没有配置，那我配置上不就好了吗：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config user.email <span class="hljs-string">&quot;youremail&quot;</span><br>git config user.name  <span class="hljs-string">&quot;yourname&quot;</span><br></code></pre></div></td></tr></table></figure><p>备注：这里我没有用<code>--global</code>设置全局的name和Email，主要是因为电脑有多个git账户，怕以后提交的时候出现，明明想用这个用户提交，结果实际却用了另外一个，用上面的代码分别为每个项目设置name和Email就不用担心这样的问题了。</p><p>但是当我配置完之后再执行部署命令时依然报错，而且和原来的好像还有一点不一样，但是看原因好像还是没有配置name和Email：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>这就奇怪了，我刚刚才配置完，怎么还说没有配置呢。我又检查了博客下的<code>_config.yml</code>文件deploy配置，确定没有错误之后我又尝试了一下，还是不行。这时我想到以前为了配置多个git账号，曾经看了很多相关的文章，其中有篇文章好像提到了git提交时报没有配置user的错误，解决办法是到项目下的<code>.git</code>文件夹内找到<code>config</code>这个文件，在这个文件的后面加上这样一段内容：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br><span class="hljs-attr">email</span>=your email<br><span class="hljs-attr">name</span>=your name<br></code></pre></div></td></tr></table></figure><p>想到这里，我又去了博客下的<code>.git</code>文件夹看了下<code>config</code>这个文件，发现里面有上面的内容，既然这样那就不应该了，为什么会部署不上呢，这时我突然看到有一个叫<code>.deploy_git</code>的文件夹，这个文件夹我记得一开始是不存在的，应该是在部署之后生成的，并且我在把博客源文件推到git上时也忽略了这个文件夹没有推送，这个文件夹内我记得也有一个<code>.git</code>文件夹，那肯定也有<code>config</code>文件，打开文件一看果然这个文件内没有上面提到的user，在我添加上之后再使用<code>hexo d</code>部署博客，发现推送成功了。之后我又仔细看了下两个<code>.git</code>文件夹内的<code>config</code>文件的区别，发现一个是配置的博客源文件的地址，另一个则是生成的博客静态文件也就是博客网站那个仓库的地址，因为只配置了源文件仓库的地址没有配置网站静态文件仓库的地址，所以才会一直报错。</p><p>但是还有一个不太明白的点，之前我只用一个git账号部署博客的时候并没有出现这样的问题，只要把博客的配置文件和user.email与user.name都写好就能完成部署，但是现在有多个账号了则不行，我还没有搞清楚是什么原因，如果有人知道是怎么回事麻烦告诉我一下。</p>]]></content>
    
    
    
    <tags>
      
      <tag>-Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一台电脑设置多个Git账号</title>
    <link href="/2020/06/cfg-multiple-git-accounts/"/>
    <url>/2020/06/cfg-multiple-git-accounts/</url>
    
    <content type="html"><![CDATA[<p>我们可能经常会用到不止一个git账号（比如一个github一个gitee），用于管理不同的项目，那怎么在一台电脑上配置两个或两个以上的git账号呢，下面介绍一下具体的方法，也算做个记录，以后忘了可以来看看。</p><h3 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h3><p>如果之前没有生成过SSH Key的话，需要先生成，在命令行内执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C<span class="hljs-string">&quot;你的github邮箱地址&quot;</span><br></code></pre></div></td></tr></table></figure><p>通常配置一个SSH Key的时候只要一路回车下去就行了，但是现在要配置多个，就不能一路回车到底了，因为要设置某些内容。在运行上面命令之后会一步一步的出现下面的提示内容：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#提示是否使用新的文件名,如果不输入新的文件名，则生成id_rsa文件。</span><br><span class="hljs-comment">##直接输入文件名会在当前执行cmd或者bash文件夹内生成，如果想在.ssh文件夹生成需要把路径写完整</span><br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (~/.ssh/id_rsa):<br><span class="hljs-comment">#请输入确认密码，后面还会用到（至少4位数），如果缺省直接按回车</span><br><span class="hljs-comment">##此密码是验证id_rsa的密码，每次代码commit时得输入</span><br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br><span class="hljs-comment">#再次输入密码</span><br>Enter same passphrase again:<br></code></pre></div></td></tr></table></figure><p>在生成多个SSH Key重复执行上面的命令即可，在生成第二个之后的ssh keygen时，一定要把生成的ssh keygen文件名或者路径改掉，不要用默认的，不然会把前面生成的覆盖掉。密码有没有都无所谓，记不住就别设，免得到时候忘了密码用不了。</p><h3 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h3><p>前面生成的ssh keygen文件正常情况下应该在<code>C:\\\\User\\你的用户名\\.ssh</code>这个文件夹内，如果没有就自己搜索一下放在哪了吧，打开这个文件夹，你会看到有多个文件，把其中有<code>pub</code>后缀的文件打开，将里面的内容添加到对应的git账号上，以GitHub为例，登录上你的GitHub账号，然后点击你的头像，在下拉菜单中找到settings，</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>然后在页面中找到<code>SSH and GPG keys</code>这一项，</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>接着在右边点击<code>New SSHKey</code>把对应的公钥文件内容复制进去，并且起一个名字，大体知道是用来做什么的。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><h3 id="配置config文件（重点）"><a href="#配置config文件（重点）" class="headerlink" title="配置config文件（重点）"></a>配置config文件（重点）</h3><p>进入<code>.ssh</code>文件夹，查看这个文件夹内是否有名为<code>config</code>的文件，如果没有就用<code>touch config</code>新建一个（注意这个命令是bash内执行，如果使用的是cmd则不能用），在新建的文件内加上下面的内容：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#github one</span><br>   Host github_one            <br>   Hostname github.com      <br>   User git_one                    <br>   IdentityFile ~/.ssh/id_rsa   <br>   <br><span class="hljs-comment">#github two</span><br>   Host github_two<br>   Hostname github.com<br>   User git_two<br>   IdentityFile C:\\Users\\你的用户名\\.ssh\\id_rsa_two<br><br><span class="hljs-comment">##如果有第三个或者更多</span><br><span class="hljs-comment">#github more</span><br>   Host github_more<br>   Hostname github.com<br>   User git_more<br>   IdentityFile ~/.ssh/id_rsa_more<br></code></pre></div></td></tr></table></figure><p><strong>说明：</strong><br> HostName 　　　　　　　真实的域名地址<br> IdentityFile 　　　　　　　这个是id_rsa的地址（就是私钥的位置，上面两种写法都可）<br> PreferredAuthentications   配置登录时用什么权限认证（可设为publickey,password publickey,keyboard-interactive等）<br> User 　　　　　　　　　　配置使用用户名</p><p>每个账号单独配置一个<strong>Host</strong>，每个<strong>Host</strong>要取一个别名，每个Host主要配置<strong>HostName</strong>和<strong>IdentityFile</strong>两个属性即可，host可以取为便于区分的名字，如GitHub，gitee，这个host后续会影响到git的相关命令，如果忘了可以到这个config文件中查看。</p><h3 id="测试是否配置成功"><a href="#测试是否配置成功" class="headerlink" title="测试是否配置成功"></a>测试是否配置成功</h3><p>在命令行中输入下面的命令测试是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github_one <br>ssh -T git@github_two<br></code></pre></div></td></tr></table></figure><p>注意@后面不再是<code>github.com</code>，而是前面你在config文件配置的host的名字。如果配置成功会返回下面的话：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Hi XXX! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></div></td></tr></table></figure><h3 id="设置提交用户名和电子邮件地址"><a href="#设置提交用户名和电子邮件地址" class="headerlink" title="设置提交用户名和电子邮件地址"></a>设置提交用户名和电子邮件地址</h3><p>在电脑上设置了多个git账号之后最好为每个项目分别设置提交的用户名和电子邮件，这样就不会有希望用这个账号提交项目，结果实际上是另外一个账号提交的情况发生了。另外，GitHub的contributions统计就是按照你提交时设置的邮箱来统计的。</p><p>如果已经设置了全局（global）的user和email，最好先取消掉：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> user.name<br>git config --global --<span class="hljs-built_in">unset</span> user.email<br></code></pre></div></td></tr></table></figure><p>然后为每个项目设置自己的user和email：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config user.email <span class="hljs-string">&quot;youremail&quot;</span><br>git config user.name <span class="hljs-string">&quot;yourusername&quot;</span><br></code></pre></div></td></tr></table></figure><p>git通常有三个级别的配置文件，分别是：</p><ol><li><code>/etc/gitconfig</code> 文件：这个文件位于Git的安装目录下，包含系统上每一个用户及他们仓库的通用配置。 如果在执行 <code>git config</code> 时带上 <code>--system</code> 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）</li><li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户（在 Windows 系统中，一般情况下是 <code>C:\Users\$USER</code> ）。你可以传递 <code>--global</code> 选项让 Git 读写此文件，这会对你系统上 <strong>所有</strong> 的仓库生效。</li><li>当前使用仓库的 Git 目录中的 <code>config</code> 文件（即 <code>.git/config</code>）：针对该仓库。 你可以传递 <code>--local</code> 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。（当然，你需要进入某个 Git 仓库中才能让该选项生效。）</li></ol><p>另外，每一个级别会覆盖上一级别的配置，所以 <code>.git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量，也就是说Git会优先使用库级别的配置，再然后是global级别的配置，最后是system级别的配置。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.melodydance.top/git-more.html">一台电脑配置两个或多个git帐号</a></p><p><a href="https://www.jianshu.com/p/7ee167911597">一个git配置多个github账号</a></p><p><a href="https://www.cnblogs.com/popfisher/p/5731232.html">Windows下Git多账号配置，同一电脑多个ssh-key的管理</a></p><p><a href="https://www.jianshu.com/p/d696b5fef750">git多账号提交适配</a></p><p><a href="https://help.github.com/cn/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address">设置提交电子邮件地址</a></p><p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE">1.6 起步 - 初次运行 Git 前的配置</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>舔狗日记生成器</title>
    <link href="/2020/06/tiangou-riji/"/>
    <url>/2020/06/tiangou-riji/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2020/06/data-structure01/"/>
    <url>/2020/06/data-structure01/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2020/06/data-structure02/"/>
    <url>/2020/06/data-structure02/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2020/06/data-structure03/"/>
    <url>/2020/06/data-structure03/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2020/06/data-structure04/"/>
    <url>/2020/06/data-structure04/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2020/06/data-structure05/"/>
    <url>/2020/06/data-structure05/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2020/06/data-structure06/"/>
    <url>/2020/06/data-structure06/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2020/06/tree-traversal/"/>
    <url>/2020/06/tree-traversal/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式零宽断言</title>
    <link href="/2020/06/regexp-lookaround/"/>
    <url>/2020/06/regexp-lookaround/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【转】修改hosts有时不生效的原因和可能的解决办法</title>
    <link href="/2020/06/hosts-not-effect/"/>
    <url>/2020/06/hosts-not-effect/</url>
    
    <content type="html"><![CDATA[<p> <strong>Update:</strong></p><p>如果浏览器使用了代理工具，修改 Hosts 也不会生效。这里是因为，浏览器会优先考虑代理工具（如添加 pac 文件、SwitchySharp等）的代理，建议调试的时候先关闭这些代理。<br>使用 pac 文件代理有的时候部分文件的代理不生效，应该是 pac 对应的代理服务器上，做了部分处理。<br>部分浏览器也有 DNS 缓存，如 chrome(chrome://dns)，这是为什么重启浏览器也不生效的原因，一般设定时间为 60s (如 Firefox)。<br>浏览器有DNS缓存，系统也会存在 DNS 缓存，有的时候即便在 chrome://dns 清空了浏览器 DNS 缓存，依然不生效，是因为系统 DNS 缓存还未刷新，刷新方式可以看<a href="https://cnzhx.net/blog/how-to-flush-dns-cache-in-linux-windows-mac/">这篇文章</a>。</p><hr><p> 相信很多同学都在使用 SwitchHosts/iHosts/Gas Mask 等 Hosts 管理工具，当然也有人直接修改 /etc/hosts 或者 system32/drivers/etc/hosts 文件，而经常遇到的疑问是：咿，刚才不是修改并且保存了么，为何 Chrome 浏览器还不生效呢？</p><p>有人说重启下浏览器就好了，<br>有人说清空下缓存 DNS（chrome://net-internals/#DNS）就好了，<br>有人说隐私模式下打开就好了，<br>有人说等一分钟吧…<br>结果就是，进入隐私模式的都好了，重启、清空缓存DNS和等一分钟的同学还在继续纠结中。。。</p><p>上面提到的三个工具，SwitchHosts/iHosts/Gas Mask，其实也只有 iHosts 生效了(Mac下)。</p><p>开发过程中我们会无数次的切换 Hosts，如果不知道原理，我们在测试的时候还是很心惊胆战的=_=||</p><h3 id="修改Hosts不生效的根本原因"><a href="#修改Hosts不生效的根本原因" class="headerlink" title="修改Hosts不生效的根本原因"></a>修改Hosts不生效的根本原因</h3><p>因为服务器设置了 keep-alive ！次要原因是存在浏览器 DNS 缓存和系统 DNS 缓存。<a href="http://zh.wikipedia.org/wiki/HTTP%E6%8C%81%E4%B9%85%E8%BF%9E%E6%8E%A5">Keep-alive 相关文档</a></p><p>服务器在响应头设置了 Connection: keep-alive （一般的网页都会设置 keep-alive，保持长连接，避免多次连接产生网络消耗）之后，客户端会跟服务器保持长连接，只要长连接不断开，页面在请求的时候就不会重新解析域名！</p><p>我们可以这样来测试：</p><ol><li><p>打开一个你至少两分钟没有打开的浏览器（你也可以关闭掉你的浏览器，然后重新打开，记得把所有的 tab 都关了，除了当前 tab ^_^）</p></li><li><p>在 hosts 添加 127.0.0.1 <a href="http://www.taobao.com/">www.taobao.com</a></p></li><li><p>新开 tab，打开 <a href="http://www.taobao.com,是不是进不去了/">www.taobao.com，是不是进不去了</a> &lt;这里说明 hosts 修改生效了&gt;</p></li><li><p>注释掉刚才hosts修改，# 127.0.0.1 <a href="http://www.taobao.com/">www.taobao.com</a> ，再打开 <a href="http://www.taobao.com,很好,正常打开了/">www.taobao.com，很好，正常打开了</a> &lt;这里说明 hosts 修改也生效了&gt;</p></li><li><p>去掉注释符，127.0.0.1 <a href="http://www.taobao.com/">www.taobao.com</a> ，再打开 <a href="http://www.taobao.com,依然可以访问!!!/">www.taobao.com，依然可以访问！！！</a></p></li><li><p>Chrome 中进入 chrome://net-internals/#sockets，</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>可以看到淘宝首页中很多域名都是与服务器保持着长连接，点击上方的 close idle sockets 按钮，可以关闭所有的长连接</p></li><li><p>此时，再去访问 <a href="http://www.taobao.com,是不是进不去了!/">www.taobao.com，是不是进不去了！</a></p></li></ol><h3 id="为何一些修改可以让-“Hosts-生效”"><a href="#为何一些修改可以让-“Hosts-生效”" class="headerlink" title="为何一些修改可以让 “Hosts 生效”"></a>为何一些修改可以让 “Hosts 生效”</h3><ol><li><p>重启浏览器<br>重启浏览器之后，所有的连接（包括长连接）都会断开，自然就生效了</p></li><li><p>隐私模式打开<br>因为隐私模式下不会复用 TCP 连接，新开连接的时候，会重新解析 DNS 域名，自然也生效了</p></li><li><p>iHosts 管理器在 Mac 下生效<br>因为我在 Windows 下测试过，貌似没有立即生效。问了 iHosts 的作者@必隆，他告诉我，在修改 hosts 文件的时候，会重启网络服务，这个时候必然会断开所有的 TCP 连接（重启网络服务，差不多相当于先断网再联网…)</p></li><li><p>修改之后，等一会儿…<br>“等一会儿”，要稍微等久一点，keep-alive 的默认设置是 120s，开发者也有可能增大或者减小这个配置，所以“等一会儿”也是很伤神的=。 =</p></li></ol><p>看到这里，你对其中的原理是否有所了解了呢？</p><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://www.cnblogs.com/hustskyking/p/hosts-modify.html">修改Hosts为何不生效，是DNS缓存？——Barret李靖</a></p>]]></content>
    
    
    <categories>
      
      <category>杂类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hosts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】LocalStorage过期删除</title>
    <link href="/2020/06/localstorage-expire/"/>
    <url>/2020/06/localstorage-expire/</url>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>浏览器端需要存储一个用户的标识和<code>cookie</code>一样需要过期时间，但是用的是<code>localStorage</code>存储。而<code>localStorage</code>一经存储除非手动删除是不会过期的。那就需要自己实现过期机制。网上找了几种简单的方法。</p><h2 id="方案一：ES5扩展Storage"><a href="#方案一：ES5扩展Storage" class="headerlink" title="方案一：ES5扩展Storage"></a>方案一：ES5扩展Storage</h2><p>思路很简单，存储的值加一个时间戳，下次取值时验证时间戳。<br><strong>注意：</strong> <code>localStorage</code>只能存储字符，存入时将对象转为<code>json</code>字符串,读取时也要解析</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">CopyStorage.prototype.setExpire = <span class="hljs-function">(<span class="hljs-params">key, value, expire</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> obj = &#123;<br>data: value,<br>time: <span class="hljs-built_in">Date</span>.now(),<br>expire: expire<br>&#125;;<br><span class="hljs-comment">//localStorage 设置的值不能为对象,转为json字符串</span><br><span class="hljs-built_in">localStorage</span>.setItem(key, <span class="hljs-built_in">JSON</span>.stringify(obj));<br>&#125;<br><br>Storage.prototype.getExpire = <span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> val = <span class="hljs-built_in">localStorage</span>.getItem(key);<br>    <span class="hljs-keyword">if</span> (!val) &#123;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>    val = <span class="hljs-built_in">JSON</span>.parse(val);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Date</span>.now() - val.time &gt; val.expire) &#123;<br>        <span class="hljs-built_in">localStorage</span>.removeItem(key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> val.data;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试一下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">CopylocalStorage.setExpire(<span class="hljs-string">&#x27;userId&#x27;</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">5000</span>);<br><span class="hljs-built_in">window</span>.setInterval(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">localStorage</span>.getExpire(<span class="hljs-string">&quot;userId&quot;</span>));<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></div></td></tr></table></figure><p>前5秒还是有值的，之后即为<code>null</code></p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="image"></p><h2 id="方案二：ES6扩展Storage"><a href="#方案二：ES6扩展Storage" class="headerlink" title="方案二：ES6扩展Storage"></a>方案二：ES6扩展Storage</h2><p>大体思路和方案一是一样的只不过是用了ES6的最新语法实现。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Copyclass Storage &#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.props = props || &#123;&#125;<br>        <span class="hljs-built_in">this</span>.source = <span class="hljs-built_in">this</span>.props.source || <span class="hljs-built_in">window</span>.localStorage<br>        <span class="hljs-built_in">this</span>.initRun();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">initRun</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * set 存储方法</span><br><span class="hljs-comment">        * @ param &#123;String&#125;     key 键</span><br><span class="hljs-comment">        * @ param &#123;String&#125;     value 值，存储的值可能是数组/对象，不能直接存储，需要转换 JSON.stringify</span><br><span class="hljs-comment">        * @ param &#123;String&#125;     expired 过期时间，以分钟为单位</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">const</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;__expires__&quot;</span>);<br>        <span class="hljs-keyword">let</span> data = <span class="hljs-built_in">this</span>.source;<br>        <span class="hljs-keyword">let</span> list = <span class="hljs-built_in">Object</span>.keys(data);<br>        <span class="hljs-keyword">if</span>(list.length &gt; <span class="hljs-number">0</span>)&#123;<br>            list.map(<span class="hljs-function">(<span class="hljs-params">key,v</span>)=&gt;</span>&#123;<br>                <span class="hljs-keyword">if</span>( !reg.test(key ))&#123;<br>                    <span class="hljs-keyword">let</span> now = <span class="hljs-built_in">Date</span>.now();<br>                    <span class="hljs-keyword">let</span> expires = data[<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>__expires__`</span>]||<span class="hljs-built_in">Date</span>.now+<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (now &gt;= expires ) &#123;<br>                        <span class="hljs-built_in">this</span>.remove(key);<br>                    &#125;;<br>                &#125;;<br>                <span class="hljs-keyword">return</span> key;<br>            &#125;);<br>        &#125;;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">key, value, expired</span>)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * set 存储方法</span><br><span class="hljs-comment">    * @ param &#123;String&#125;     key 键</span><br><span class="hljs-comment">    * @ param &#123;String&#125;     value 值，</span><br><span class="hljs-comment">    * @ param &#123;String&#125;     expired 过期时间，以毫秒为单位，非必须</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">let</span> source = <span class="hljs-built_in">this</span>.source;<br>    source[key] = <span class="hljs-built_in">JSON</span>.stringify(value);<br>    <span class="hljs-keyword">if</span> (expired)&#123;<br>        source[<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>__expires__`</span>] = <span class="hljs-built_in">Date</span>.now() + expired<br>    &#125;;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * get 获取方法</span><br><span class="hljs-comment">        * @ param &#123;String&#125;     key 键</span><br><span class="hljs-comment">        * @ param &#123;String&#125;     expired 存储时为非必须字段，所以有可能取不到，默认为 Date.now+1</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">const</span> source = <span class="hljs-built_in">this</span>.source,<br>        expired = source[<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>__expires__`</span>]||<span class="hljs-built_in">Date</span>.now+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">const</span> now = <span class="hljs-built_in">Date</span>.now();<br>    <br>        <span class="hljs-keyword">if</span> ( now &gt;= expired ) &#123;<br>            <span class="hljs-built_in">this</span>.remove(key);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">const</span> value = source[key] ? <span class="hljs-built_in">JSON</span>.parse(source[key]) : source[key];<br>        <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">key</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-built_in">this</span>.source,<br>        value = data[key];<br>    <span class="hljs-keyword">delete</span> data[key];<br>    <span class="hljs-keyword">delete</span> data[<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>__expires__`</span>];<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中<code>set()</code>,<code>get()</code>,<code>remove()</code>方法可以理解用来存、取、删, <code>initRun()</code>做什么用呢？过期的值只有取时才能知道是不是过期，不取一直存着。<code>initRun()</code>和<code>constructor</code>只是在初始化时实现清理，也不是一定即时。另外写一个定时器去清理貌似也不值当，所以觉得做到这样已经够用了。</p><p>使用如下代码进行测试一下,效果和方案一相同</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Copyvar ls=<span class="hljs-keyword">new</span> Storage();<br>ls.set(<span class="hljs-string">&#x27;userId&#x27;</span>,<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">5000</span>);<br><span class="hljs-built_in">window</span>.setInterval(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(ls.get(<span class="hljs-string">&quot;userId&quot;</span>));<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/qq_20343517/article/details/83656450">localStorage 设置过期时间</a></li><li><a href="https://segmentfault.com/a/1190000016892019">如何给localStorage设置一个过期时间？</a></li><li>原文链接：<a href="https://www.cnblogs.com/ricolee/p/localstorage-expiretime.html">localStorage设置过期时间</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>LocalStorage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式获取图片src</title>
    <link href="/2020/06/regexp-img-src/"/>
    <url>/2020/06/regexp-img-src/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>regexp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记仇生成器</title>
    <link href="/2020/06/jichou/"/>
    <url>/2020/06/jichou/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>奇奇怪怪</category>
      
    </categories>
    
    
    <tags>
      
      <tag>奇奇怪怪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>富文本编辑器 Summernote 从入门到放弃（文档篇）</title>
    <link href="/2020/05/summernote-doc/"/>
    <url>/2020/05/summernote-doc/</url>
    
    <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><h3 id="i18n支持"><a href="#i18n支持" class="headerlink" title="i18n支持"></a>i18n支持</h3><h3 id="第三方支持"><a href="#第三方支持" class="headerlink" title="第三方支持"></a>第三方支持</h3><h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><h3 id="初始化选项"><a href="#初始化选项" class="headerlink" title="初始化选项"></a>初始化选项</h3><h3 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h3><h3 id="字体样式API"><a href="#字体样式API" class="headerlink" title="字体样式API"></a>字体样式API</h3><h3 id="段落API"><a href="#段落API" class="headerlink" title="段落API"></a>段落API</h3><h3 id="插入内容API"><a href="#插入内容API" class="headerlink" title="插入内容API"></a>插入内容API</h3><h3 id="范围和选择API"><a href="#范围和选择API" class="headerlink" title="范围和选择API"></a>范围和选择API</h3><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><h3 id="自定义按钮"><a href="#自定义按钮" class="headerlink" title="自定义按钮"></a>自定义按钮</h3><h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h3 id="轻巧模式"><a href="#轻巧模式" class="headerlink" title="轻巧模式"></a>轻巧模式</h3><h3 id="使用多个编辑器"><a href="#使用多个编辑器" class="headerlink" title="使用多个编辑器"></a>使用多个编辑器</h3><h3 id="点击编辑"><a href="#点击编辑" class="headerlink" title="点击编辑"></a>点击编辑</h3><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><h4 id="词语提示"><a href="#词语提示" class="headerlink" title="词语提示"></a>词语提示</h4><h4 id="表情提示"><a href="#表情提示" class="headerlink" title="表情提示"></a>表情提示</h4><h4 id="选择提示"><a href="#选择提示" class="headerlink" title="@选择提示"></a>@选择提示</h4><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://summernote.org/">Summernote</a></p><p><a href="https://www.bootstrap-table.com.cn/">Bootstrap Table中文网</a></p><p><a href="https://www.cnblogs.com/landeanfen/p/4976838.html">JS组件系列——表格组件神器：bootstrap table</a></p><p><a href="https://www.jianshu.com/p/b9d0f0935263">表格神器bootstraptable</a></p><p><a href="https://blog.csdn.net/S_clifftop/article/details/77937356">Bootstrap Table API 中文版（完整翻译文档）</a></p><p><a href="https://blog.csdn.net/sky_sunshine_x/article/details/80985097">富文本编辑器summernote的基本使用（自定义行高字体属性）</a></p><p><a href="https://www.xuexiareas.com/index/Articles/details/num/13.html">富文本编辑器之图片上传删除问题</a></p><p><a href="http://tinymce.ax-z.cn/">http://tinymce.ax-z.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>HTML</tag>
      
      <tag>JS</tag>
      
      <tag>富文本编辑器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;p&gt;不能嵌套&lt;div&gt;</title>
    <link href="/2020/05/p-div/"/>
    <url>/2020/05/p-div/</url>
    
    <content type="html"><![CDATA[<p>这是很久以前写网页碰到的事了，当时查到解决方法以后就草草过去了，今天突然想起来觉得还是记一下比较好。</p><p>复现一下当时的问题：</p><p>我在一个<code>&lt;p&gt;</code>内放了一个<code>&lt;div&gt;</code>标签，代码是这么写的：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span> 这是最外面的一个div，套个颜色好区分<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>这是一个p标签<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是p标签里面包含的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>CSS是这么写的：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-id">#test</span> &#123;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">500px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">600px</span>;<br><span class="hljs-attribute">background-color</span>:yellow;<br>&#125;<br><span class="hljs-selector-id">#test</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>;<br><span class="hljs-attribute">background-color</span>:red;<br>&#125;<br><span class="hljs-selector-id">#test</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">80px</span>;<br><span class="hljs-attribute">background-color</span>:blue;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后当我在浏览器里打开这个网页的时候，发现显示出来是这个样的：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>嗯？好像哪不对？里面的div不应该是蓝色的吗，赶紧到控制台查看元素，发现更不对了：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>为什么div跑到p外面了，为什么div下面还有个空的p？吓得我赶紧在里面又放了个<code>&lt;span&gt;</code>试试，一试好像没什么问题，但是div的位置依旧不对劲，这是怎么肥四？？我记得p和div都是块级标签，应该是可以互相嵌套的啊，想了半天没想通之后我去查了些资料，终于搞明白原来有的块元素不能包含另一些块元素。</p><p>而且根据新的HTML规范，元素类型已经不按inline和block来区分了，</p><blockquote><p>规范中的每个元素都有以下两项：</p><ul><li>Categories</li><li>Content Model</li></ul><p>Categories 是该元素本身的分类，content model 规定了合法的元素的内容（子元素、文本等）类型。</p></blockquote><p>MDN中的介绍是这样的：</p><blockquote><p>每一个HTML元素都必须遵循定义了它可以包含哪一类内容的规则。 这些规则被归类为几个常见的元素内容模型（content model）。每个HTML元素都属于0个、1 个或多个内容模型，每个模型都有一些规则使得元素中的内容必须遵循一个HTML规范文档( HTML-conformant document)。</p><p>以下是三种类型的内容分类：</p><ul><li>主内容类，描述了很多元素共享的内容规范；</li><li>表单相关的内容类，描述了表单相关元素共有的内容规范；</li><li>特殊内容类，描述了仅仅在某些特殊元素上才需要遵守的内容规范，通常这些元素都有特殊的上下文关系。</li></ul></blockquote><p><img src="https://media.prod.mdn.mozit.cloud/attachments/2012/07/09/3704/07b3e5bb546840a09bb35d45b36009a6/Content_categories_venn.png" srcset="/img/loading.gif" lazyload></p><p>每个元素都有内容分类（<strong>Content categories</strong>）和允许的内容（<strong>Permitted content</strong>）两项来说明元素属于何种内容模型和该元素内允许的内容类型。</p><p>回到原来的问题上来，p标签不能包含div的原因其实就是因为新规范中规定了p元素<strong>允许的内容</strong>不包括div，所以才会出现上面的问题，同样不能包含的还有其他元素，比如<code>&lt;p&gt;</code>自己，<code>&lt;ul&gt;</code>列表等都不能被放进p标签内。</p><p>规范其实也说明了一点，虽然有时候在HTML中随意嵌套元素也可以正常显示，但事实上元素应该在他出现的地方才能更好的发挥作用，比如：<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;table&gt;</code>，它们的子一层都是指定的元素，<code>&lt;ul&gt;、&lt;ol&gt;</code>的子一级是<code>&lt;li&gt;</code>；<code>&lt;dl&gt;</code>的子一级必须是<code>&lt;dt&gt;</code>或者<code>&lt;dd&gt;</code>；<code>&lt;table&gt;</code>的子一层可以是<code>&lt;caption&gt;</code> 或<code>&lt;thead&gt;</code>、<code>&lt;tfoot&gt;</code>、<code>&lt;tbody&gt;</code>等，而再子一层是<code>&lt;tr&gt; </code>（<code>&lt;tr&gt;</code>只存在于<code>&lt;thead&gt;</code>、<code>&lt;tfoot&gt;</code>、<code>&lt;tbody&gt;</code>中），之后才是<code>&lt;td&gt;</code>或者<code>&lt;th&gt;</code>。以后我们写完代码可以去<a href="https://validator.w3.org/">W3C验证平台</a>上检查一下自己的代码存在什么问题，就能减少一些像上面这样的错误。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.zhihu.com/question/34952563/answer/60672228">a 标签为什么能够包含块级元素？ - 顾轶灵的回答 - 知乎</a></p><p><a href="https://www.cnblogs.com/Iona/p/4732452.html">HTML中为何p标签内不可包含div标签?那哪些块元素里面不能放哪些块元素呢？</a></p><p><a href="https://html.spec.whatwg.org/multipage/dom.html#element-definitions">HTML Standard</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p">&lt;p&gt; - HTML（超文本标记语言） | MDN</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Content_categories">内容分类 - Web 开发者指南 | MDN</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap-Datepicker的基本用法</title>
    <link href="/2020/05/bootstrap-datepicker/"/>
    <url>/2020/05/bootstrap-datepicker/</url>
    
    <content type="html"><![CDATA[<p>在用Bootstrap-Datepicker之前，也用过一个<a href="https://github.com/Eonasdan/bootstrap-datetimepicker">日期时间选择插件</a>，同样也是基于Bootstrap的，可以选择日期和时间，但是因为好像有些小bug，所以再就没有用过，后来又找了一款<strong>日期选择</strong>插件，但是只能选择日期，不能选择时间，在不需要输入具体时间的地方用足够了，并且目前还没有发现什么问题。下面就介绍一下用法吧。</p><h2 id="使用和依赖"><a href="#使用和依赖" class="headerlink" title="使用和依赖"></a>使用和依赖</h2><p><a href="https://github.com/uxsolutions/bootstrap-datepicker"><strong>Bootstrap-datepicker</strong></a>是一款基于Bootstrap样式的datepicker小部件。要求使用<a href="https://getbootstrap.com/">Bootstrap</a> 2.0.4 版本以上，<a href="https://jquery.com/">jQuery</a> 1.7.1版本以上。</p><p>可以下载后引入CSS和JS文件，也可以直接通过CDN引入。</p><p>下载的完整库中包含一些不同的样式表。每个CSS文件的用途分别是：</p><ul><li><p><code>bootstrap-datepicker.css</code>提供对bootstrap v2的旧支持</p></li><li><p><code>bootstrap-datepicker3.css</code>用于bootstrap v3支持</p></li><li><p><code>bootstrap-datepicker.standalone.css</code>可以直接用于datepicker，而无需依赖 bootstrap 库。</p></li></ul><p><strong>下载地址放在最后参考链接中</strong>。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>通过javascript调用datepicker：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.datepicker&#x27;</span>).datepicker();<br></code></pre></div></td></tr></table></figure><p>通过data-API：</p><p>与bootstrap自己的插件一样，datepicker提供了一个数据API，可用于实例化datepicker，而无需自定义JavaScript。对于大多数日期选择器，只需在要初始化的元素上设置<code>data-provide=&quot;datepicker&quot;</code>，它就会延迟初始化。对于内联日期选择器，请使用<code>data-provide=&quot;datepicker-inline&quot;</code>; 这些将在页面加载时立即初始化，并且不能延迟加载。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">data-provide</span>=<span class="hljs-string">&quot;datepicker&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>选项<code>datepicker</code>在实例化时通过选项传递到函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.datepicker&#x27;</span>).datepicker(&#123;<br>    format: <span class="hljs-string">&#x27;mm/dd/yyyy&#x27;</span>,<br>    startDate: <span class="hljs-string">&#x27;-3d&#x27;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p>也可以在目标元素上通过data-API属性使用，大多数选项都提供支持：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;datepicker&quot;</span> <span class="hljs-attr">data-date-format</span>=<span class="hljs-string">&quot;mm/dd/yyyy&quot;</span>&gt;</span><br>$(&#x27;.datepicker&#x27;).datepicker(&#123;<br>    startDate: &#x27;-3d&#x27;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>可以通过更改<code>$.fn.datepicker.defaults</code>来修改所有选项的默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$.fn.datepicker.defaults.format = <span class="hljs-string">&quot;mm/dd/yyyy&quot;</span>;<br>$(<span class="hljs-string">&#x27;.datepicker&#x27;</span>).datepicker(&#123;<br>    startDate: <span class="hljs-string">&#x27;-3d&#x27;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="无冲突模式"><a href="#无冲突模式" class="headerlink" title="无冲突模式"></a>无冲突模式</h3><p><code>$.fn.datepicker.noConflict</code> 提供一种避免与其他jQuery datepicker插件冲突的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> datepicker = $.fn.datepicker.noConflict(); <span class="hljs-comment">// return $.fn.datepicker to previously assigned value</span><br>$.fn.bootstrapDP = datepicker;                 <span class="hljs-comment">// give $().bootstrapDP the bootstrap-datepicker functionality</span><br></code></pre></div></td></tr></table></figure><h2 id="HTML标记"><a href="#HTML标记" class="headerlink" title="HTML标记"></a>HTML标记</h2><p>有四种类型的显示方式：</p><ul><li><p>输入框</p><p>最简单的方式，当点击输入框或者焦点切换到输入框内时，显示选择器</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;02-16-2012&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="" srcset="/img/loading.gif" lazyload></p></li><li><p>组件</p><p>添加<code>date</code>类到一个输入框组<code>input-group</code>上，这可以让拥有<code>input-group-addon</code>类的元素打开日期选择器。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group date&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12-02-2012&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-th&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>范围选择</p><p>将<code>input-daterange</code>添加到输入框组与多个子输入框一起使用将为每个输入框实例化一个选择器，以允许选择范围。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group input-daterange&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2012-04-05&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-addon&quot;</span>&gt;</span>to<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2012-04-19&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p><strong>注意：</strong><code>input-daterange</code>自身并不会实现<code>datepicker</code>的方法，方法应该直接被输入框调用，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.input-daterange input&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-built_in">this</span>).datepicker(<span class="hljs-string">&#x27;clearDates&#x27;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><ul><li><p>内联或嵌入式  </p><p>在简单的<code>div</code>上实例化<code>datepicker</code>将提供一个始终可见的嵌入式选择器。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-date</span>=<span class="hljs-string">&quot;12/03/2012&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>一个实例：将选择器的值的保存到隐藏的字段中。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;datepicker&quot;</span> <span class="hljs-attr">data-date</span>=<span class="hljs-string">&quot;12/03/2012&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my_hidden_input&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#datepicker&#x27;</span>).datepicker();<br>$(<span class="hljs-string">&#x27;#datepicker&#x27;</span>).on(<span class="hljs-string">&#x27;changeDate&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&#x27;#my_hidden_input&#x27;</span>).val(<br>    $(<span class="hljs-string">&#x27;#datepicker&#x27;</span>).datepicker(<span class="hljs-string">&#x27;getFormattedDate&#x27;</span>)<br>  );<br>&#125;);<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h2><p>所有带有<code>Date</code>的选项都可以处理为一个Date对象。或相对于今天的时间增量，例如“ -1d”，“ + 6m + 1y”等，其中有效单位为“ d”（天），“ w”（周），“ m”（月）和“ y” “ （年）。今天使用“ 0”。相对时间增量也有别名：“昨天”等于“ -1d”，“今天”等于“ + 0d”，“明天”等于“ + 1d”。</p><p>大多数选项可以通过数据属性提供。通过以下方式可以将选项转换为数据属性：将选项中的每个大写字母替换为其小写字母，并在每个单词前加上破折号，然后在结果前添加<code>data-date-</code>。例如，<code>startDate</code>转换为<code>data-date-start-date</code>，<code>format</code>转换为<code>data-date-format</code>而<code>daysOfWeekDisabled</code>将是<code>data-date-days-of-week-disabled</code>。</p><p>可以在官方提供的在线<a href="https://uxsolutions.github.io/bootstrap-datepicker/#sandbox">DEMO</a>中测试下面的选项。另外官方demo中的<code>Start date</code>和<code>End date</code>选项存在bug，如果直接输入会在控制台报错，并且日期选择器将失效，如果想测试可以把选项内容在别的地方写好，然后复制进去测试。</p><p>下面介绍一些常用的选项：</p><h4 id="autoclose"><a href="#autoclose" class="headerlink" title="autoclose"></a>autoclose</h4><h4 id="assumeNearbyYear"><a href="#assumeNearbyYear" class="headerlink" title="assumeNearbyYear"></a>assumeNearbyYear</h4><h4 id="beforeShowDay"><a href="#beforeShowDay" class="headerlink" title="beforeShowDay"></a>beforeShowDay</h4><h4 id="calendarWeeks"><a href="#calendarWeeks" class="headerlink" title="calendarWeeks"></a>calendarWeeks</h4><h4 id="container"><a href="#container" class="headerlink" title="container"></a>container</h4><h4 id="datesDisabled"><a href="#datesDisabled" class="headerlink" title="datesDisabled"></a>datesDisabled</h4><h4 id="daysOfWeekDisabled"><a href="#daysOfWeekDisabled" class="headerlink" title="daysOfWeekDisabled"></a>daysOfWeekDisabled</h4><h4 id="daysOfWeekHighlighted"><a href="#daysOfWeekHighlighted" class="headerlink" title="daysOfWeekHighlighted"></a>daysOfWeekHighlighted</h4><h4 id="defaultViewDate"><a href="#defaultViewDate" class="headerlink" title="defaultViewDate"></a>defaultViewDate</h4><h4 id="enableOnReadonly"><a href="#enableOnReadonly" class="headerlink" title="enableOnReadonly"></a>enableOnReadonly</h4><h4 id="endDate"><a href="#endDate" class="headerlink" title="endDate"></a>endDate</h4><h4 id="forceParse"><a href="#forceParse" class="headerlink" title="forceParse"></a>forceParse</h4><h4 id="format"><a href="#format" class="headerlink" title="format"></a>format</h4><h4 id="immediateUpdates"><a href="#immediateUpdates" class="headerlink" title="immediateUpdates"></a>immediateUpdates</h4><h4 id="keepEmptyValues"><a href="#keepEmptyValues" class="headerlink" title="keepEmptyValues"></a>keepEmptyValues</h4><h4 id="language"><a href="#language" class="headerlink" title="language"></a>language</h4><h4 id="maxViewMode"><a href="#maxViewMode" class="headerlink" title="maxViewMode"></a>maxViewMode</h4><h4 id="minViewMode"><a href="#minViewMode" class="headerlink" title="minViewMode"></a>minViewMode</h4><h4 id="multidate"><a href="#multidate" class="headerlink" title="multidate"></a>multidate</h4><h4 id="multidateSeparator"><a href="#multidateSeparator" class="headerlink" title="multidateSeparator"></a>multidateSeparator</h4><h4 id="orientation"><a href="#orientation" class="headerlink" title="orientation"></a>orientation</h4><h4 id="startDate"><a href="#startDate" class="headerlink" title="startDate"></a>startDate</h4><h4 id="startView"><a href="#startView" class="headerlink" title="startView"></a>startView</h4><h4 id="showWeekDays"><a href="#showWeekDays" class="headerlink" title="showWeekDays"></a>showWeekDays</h4><h4 id="todayBtn"><a href="#todayBtn" class="headerlink" title="todayBtn"></a>todayBtn</h4><h4 id="todayHighlight"><a href="#todayHighlight" class="headerlink" title="todayHighlight"></a>todayHighlight</h4><h4 id="autoclose-1"><a href="#autoclose-1" class="headerlink" title="autoclose"></a>autoclose</h4><h4 id="weekStart"><a href="#weekStart" class="headerlink" title="weekStart"></a>weekStart</h4><h4 id="zIndexOffset"><a href="#zIndexOffset" class="headerlink" title="zIndexOffset"></a>zIndexOffset</h4><p>更多选项及其默认值的概述，请参见<a href="https://bootstrap-datepicker.readthedocs.io/en/stable/options.html#quick-reference">快速参考</a>。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h4><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><h4 id="setDate"><a href="#setDate" class="headerlink" title="setDate"></a>setDate</h4><h4 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h4><h4 id="clearDates"><a href="#clearDates" class="headerlink" title="clearDates"></a>clearDates</h4><h4 id="setDatesDisabled"><a href="#setDatesDisabled" class="headerlink" title="setDatesDisabled"></a>setDatesDisabled</h4><h4 id="setDaysOfWeekHighlighted"><a href="#setDaysOfWeekHighlighted" class="headerlink" title="setDaysOfWeekHighlighted"></a>setDaysOfWeekHighlighted</h4><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h4 id="show-1"><a href="#show-1" class="headerlink" title="show"></a>show</h4><h4 id="hide"><a href="#hide" class="headerlink" title="hide"></a>hide</h4><h4 id="clearDate"><a href="#clearDate" class="headerlink" title="clearDate"></a>clearDate</h4><h4 id="changeDate"><a href="#changeDate" class="headerlink" title="changeDate"></a>changeDate</h4><h4 id="changeMonth"><a href="#changeMonth" class="headerlink" title="changeMonth"></a>changeMonth</h4><h4 id="changeYear"><a href="#changeYear" class="headerlink" title="changeYear"></a>changeYear</h4><h4 id="changeDecade"><a href="#changeDecade" class="headerlink" title="changeDecade"></a>changeDecade</h4><h4 id="changeCentury"><a href="#changeCentury" class="headerlink" title="changeCentury"></a>changeCentury</h4><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="键盘支持"><a href="#键盘支持" class="headerlink" title="键盘支持"></a>键盘支持</h3><p>日期选择器支持使用键盘选择。在使用键盘选择时，被选择的日期会突出显示（与鼠标悬停一样）。</p><ul><li><p>上，下，左，右方向键</p><p>就其本身而言，左/右将使焦点向后/向前移动一天，向上/向下将使焦点向后/向前移动一周。</p><p>配合使用<kbd>Shift</kbd>键，向上<kbd>↑</kbd>/向左<kbd>←</kbd>将焦点向前移动一个月，向下<kbd>↓</kbd>/向右<kbd>→</kbd>将焦点向后移动一个月。</p><p>配合使用<kbd>Ctrl</kbd>键，向上<kbd>↑</kbd>/向左<kbd>←</kbd>将焦点向前移动一年，向下<kbd>↓</kbd>/向右<kbd>→</kbd>将焦点向后移动一年。</p><p><kbd>Shift + Ctrl</kbd>的行为与<kbd>Ctrl</kbd>相同，也就是说，它不会同时更改月份和年份，而只会更改年份。</p></li><li><p>Enter键</p><p>当选择器可见时，按<kbd>Enter</kbd>将选择焦点日期（如果有的话）。当选择器不可见时，<kbd>Enter</kbd>键将具有正常效果，如提交当前表单等。<br>当取消选择日期时，触发<code>clearDate</code>事件，否则触发<code>changeDate</code>事件。如果<code>autoclose</code>启用，日期选择器将在选择或取消选择后隐藏。</p></li><li><p>ESC键</p><p><kbd>ESC</kbd>可用于清除焦点日期，以及隐藏并重新显示日期选择器；如果用户要手动编辑值，则必须隐藏选择器。</p></li></ul><h3 id="I18N"><a href="#I18N" class="headerlink" title="I18N"></a>I18N</h3><p>日期选择器支持<code>i18n</code>，提供不同语言的月份和周工作日名称，以及设置weekStart选项。默认语言为英语（”en”），在<code>js/locales/</code>目录中还提供其他可用语言的翻译，只需在插件中添加所需的语言即可。要添加更多语言，只需在调用<code>.datepicker()</code>之前添加一个键到<code>$.fn.datepicker.dates</code>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$.fn.datepicker.dates[<span class="hljs-string">&#x27;en&#x27;</span>] = &#123;<br>    days: [<span class="hljs-string">&quot;Sunday&quot;</span>, <span class="hljs-string">&quot;Monday&quot;</span>, <span class="hljs-string">&quot;Tuesday&quot;</span>, <span class="hljs-string">&quot;Wednesday&quot;</span>, <span class="hljs-string">&quot;Thursday&quot;</span>, <span class="hljs-string">&quot;Friday&quot;</span>, <span class="hljs-string">&quot;Saturday&quot;</span>],<br>    daysShort: [<span class="hljs-string">&quot;Sun&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>, <span class="hljs-string">&quot;Tue&quot;</span>, <span class="hljs-string">&quot;Wed&quot;</span>, <span class="hljs-string">&quot;Thu&quot;</span>, <span class="hljs-string">&quot;Fri&quot;</span>, <span class="hljs-string">&quot;Sat&quot;</span>],<br>    daysMin: [<span class="hljs-string">&quot;Su&quot;</span>, <span class="hljs-string">&quot;Mo&quot;</span>, <span class="hljs-string">&quot;Tu&quot;</span>, <span class="hljs-string">&quot;We&quot;</span>, <span class="hljs-string">&quot;Th&quot;</span>, <span class="hljs-string">&quot;Fr&quot;</span>, <span class="hljs-string">&quot;Sa&quot;</span>],<br>    months: [<span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-string">&quot;February&quot;</span>, <span class="hljs-string">&quot;March&quot;</span>, <span class="hljs-string">&quot;April&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;June&quot;</span>, <span class="hljs-string">&quot;July&quot;</span>, <span class="hljs-string">&quot;August&quot;</span>, <span class="hljs-string">&quot;September&quot;</span>, <span class="hljs-string">&quot;October&quot;</span>, <span class="hljs-string">&quot;November&quot;</span>, <span class="hljs-string">&quot;December&quot;</span>],<br>    monthsShort: [<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;Jul&quot;</span>, <span class="hljs-string">&quot;Aug&quot;</span>, <span class="hljs-string">&quot;Sep&quot;</span>, <span class="hljs-string">&quot;Oct&quot;</span>, <span class="hljs-string">&quot;Nov&quot;</span>, <span class="hljs-string">&quot;Dec&quot;</span>],<br>    today: <span class="hljs-string">&quot;Today&quot;</span>,<br>    clear: <span class="hljs-string">&quot;Clear&quot;</span>,<br>    format: <span class="hljs-string">&quot;mm/dd/yyyy&quot;</span>,<br>    titleFormat: <span class="hljs-string">&quot;MM yyyy&quot;</span>, <span class="hljs-comment">/* Leverages same syntax as &#x27;format&#x27; */</span><br>    weekStart: <span class="hljs-number">0</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p><code>[&#39;en&#39;]</code>就是添加新语言的键，在后面大括号中添加月和周的对应语言翻译。使用时将键添加到选项中：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;.datepicker&#x27;</span>).datepicker(&#123;<br>    language: <span class="hljs-string">&#x27;XX&#x27;</span> <span class="hljs-comment">//XX就是键名</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p>从右到左的语言添加<code>rtl: true</code>也可以使日历正确显示。</p><p>如果您的浏览器（或您用户的浏览器）的字符显示错误，则可能是浏览器正在加载具有非Unicode编码的javascript文件。只需添加<code>charset=&quot;UTF-8&quot;</code>到您的script标签即可正常显示：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bootstrap-datepicker.XX.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bootcss.com/">bootstrap中文网</a></p><p><a href="https://bootstrap-datepicker.readthedocs.io/en/stable/index.html">bootstrap-datepicker文档</a></p><p><a href="https://github.com/uxsolutions/bootstrap-datepicker/releases">下载地址</a></p><p><a href="https://www.cmd5.com/">md5在线解密破解,md5解密加密</a></p>]]></content>
    
    
    <categories>
      
      <category>Bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap-Table的基本使用教程</title>
    <link href="/2020/05/bootstrap-table/"/>
    <url>/2020/05/bootstrap-table/</url>
    
    <content type="html"><![CDATA[<h2 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h2><p>引入CSS文件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap-table.min.css&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>引入js文件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap-table.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap-table-zh-CN.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="初始化表格"><a href="#初始化表格" class="headerlink" title="初始化表格"></a>初始化表格</h2><p>表格的初始化有两种方式:</p><p>一种是通过数据属性初始化：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;table<br>  data-toggle=&quot;table&quot;<br>  data-url=&quot;data.json&quot;<br>  data-pagination=&quot;true&quot;&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-sortable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>Item ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>Item Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">data-field</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span>Item Price<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>另一种是通过JavaScript初始化：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>$(&#x27;#table&#x27;).bootstrapTable(&#123;<br>  url: &#x27;data.json&#x27;,<br>  pagination: true,<br>  columns: [&#123;<br>    field: &#x27;id&#x27;,<br>    title: &#x27;Item ID&#x27;<br>  &#125;, &#123;<br>    field: &#x27;name&#x27;,<br>    title: &#x27;Item Name&#x27;<br>  &#125;, &#123;<br>    field: &#x27;price&#x27;,<br>    title: &#x27;Item Price&#x27;<br>  &#125;]<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>如果只是做简单的数据展示的话，比较适合用数据属性初始化表格；如果表格结构功能复杂更推荐使用JS，处理表格比较容易。下面我就用JS初始化一个带有各种常用选项的表格。</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped table-hover&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table-request&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 初始化表格</span><br>$(<span class="hljs-string">&#x27;#table-request&#x27;</span>).bootstrapTable(&#123;<br>    url: <span class="hljs-string">&#x27;../test0.json&#x27;</span>,             <span class="hljs-comment">//请求后台的URL（*）/article/list</span><br>    method: <span class="hljs-string">&#x27;get&#x27;</span>,                      <span class="hljs-comment">//请求方式（*）</span><br>    toolbar: <span class="hljs-string">&#x27;#toolbar&#x27;</span>,                <span class="hljs-comment">//工具按钮用哪个容器</span><br>    striped: <span class="hljs-literal">true</span>,                      <span class="hljs-comment">//是否显示行间隔色</span><br>    locale: <span class="hljs-string">&#x27;zh-CN&#x27;</span>,<br>    resizable: <span class="hljs-literal">true</span>,                    <span class="hljs-comment">//设置height后拖动调整列宽失效</span><br>    cache: <span class="hljs-literal">false</span>,                       <span class="hljs-comment">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span><br>    pagination: <span class="hljs-literal">true</span>,                   <span class="hljs-comment">//是否显示分页（*）</span><br>    sortable: <span class="hljs-literal">false</span>,                     <span class="hljs-comment">//是否启用排序</span><br>    queryParams: <span class="hljs-string">&#x27;queryParams&#x27;</span>,         <span class="hljs-comment">//传递参数（*）</span><br>    queryParamsType: <span class="hljs-string">&#x27;&#x27;</span>,                <span class="hljs-comment">//查询参数类型</span><br>    sidePagination: <span class="hljs-string">&quot;client&quot;</span>,           <span class="hljs-comment">//分页方式：client客户端分页，server服务端分页（*）</span><br>    pageNumber:<span class="hljs-number">1</span>,                       <span class="hljs-comment">//初始化加载第一页，默认第一页</span><br>    pageSize: <span class="hljs-number">10</span>,                       <span class="hljs-comment">//每页的记录行数（*）</span><br>    pageList: [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>],        <span class="hljs-comment">//可供选择的每页的行数（*）</span><br>    totalField: <span class="hljs-string">&#x27;total&#x27;</span>,<br>    dataField: <span class="hljs-string">&#x27;rows&#x27;</span>,<br>    smartDisplay:<span class="hljs-literal">false</span>,<br>    search: <span class="hljs-literal">false</span>,                      <span class="hljs-comment">//是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大</span><br>    strictSearch: <span class="hljs-literal">true</span>,<br>    showColumns: <span class="hljs-literal">false</span>,                 <span class="hljs-comment">//是否显示所有的列</span><br>    showRefresh: <span class="hljs-literal">false</span>,                 <span class="hljs-comment">//是否显示刷新按钮</span><br>    minimumCountColumns: <span class="hljs-number">2</span>,             <span class="hljs-comment">//最少允许的列数</span><br>    clickToSelect: <span class="hljs-literal">false</span>,                <span class="hljs-comment">//是否启用点击选中行</span><br>    <span class="hljs-comment">// height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度</span><br>    uniqueId: <span class="hljs-string">&quot;ID&quot;</span>,                     <span class="hljs-comment">//每一行的唯一标识，一般为主键列</span><br>    showToggle:<span class="hljs-literal">false</span>,                   <span class="hljs-comment">//是否显示详细视图和列表视图的切换按钮</span><br>    cardView: <span class="hljs-literal">false</span>,                    <span class="hljs-comment">//是否显示详细视图</span><br>    detailView: <span class="hljs-literal">false</span>,                   <span class="hljs-comment">//是否显示父子表</span><br>    columns: [<br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//     field:&#x27;id&#x27;,</span><br>        <span class="hljs-comment">//     title:&#x27;文章id&#x27;,</span><br>        <span class="hljs-comment">//     // visible: false,</span><br>        <span class="hljs-comment">// &#125;,&#123;</span><br>        <span class="hljs-comment">//     field:&#x27;id&#x27;,</span><br>        <span class="hljs-comment">//     // field:&#x27;title&#x27;,</span><br>        <span class="hljs-comment">//     title:&#x27;文章标题&#x27;,</span><br>        <span class="hljs-comment">// &#125;,&#123;</span><br>        <span class="hljs-comment">//     field:&#x27;name&#x27;,</span><br>        <span class="hljs-comment">//     // field:&#x27;roundup&#x27;,</span><br>        <span class="hljs-comment">//     title:&#x27;摘要&#x27;,</span><br>        <span class="hljs-comment">// &#125;,&#123;</span><br>        <span class="hljs-comment">//     field:&#x27;price&#x27;,</span><br>        <span class="hljs-comment">//     // field:&#x27;ntype&#x27;,</span><br>        <span class="hljs-comment">//     title:&#x27;所属分类&#x27;,</span><br>        <span class="hljs-comment">//     // formatter: function (value, row, index) &#123;</span><br>        <span class="hljs-comment">//     //     if (row[&#x27;ntype&#x27;] === 1) &#123;</span><br>        <span class="hljs-comment">//     //         return &#x27;集团新闻&#x27;;</span><br>        <span class="hljs-comment">//     //     &#125;</span><br>        <span class="hljs-comment">//     //     if (row[&#x27;ntype&#x27;] === 2) &#123;</span><br>        <span class="hljs-comment">//     //         return &#x27;媒体报道&#x27;;</span><br>        <span class="hljs-comment">//     //     &#125;</span><br>        <span class="hljs-comment">//     //     if (row[&#x27;ntype&#x27;] === 3) &#123;</span><br>        <span class="hljs-comment">//     //         return &#x27;社会活动&#x27;;</span><br>        <span class="hljs-comment">//     //     &#125;</span><br>        <span class="hljs-comment">//     //         return value;</span><br>        <span class="hljs-comment">//     // &#125;,</span><br>        <span class="hljs-comment">// &#125;,&#123;</span><br>        <span class="hljs-comment">//     field:&#x27;opt&#x27;,</span><br>        <span class="hljs-comment">//     // field:&#x27;uptime&#x27;,</span><br>        <span class="hljs-comment">//     title:&#x27;修改时间&#x27;,</span><br>        <span class="hljs-comment">// &#125;,&#123;</span><br>        <span class="hljs-comment">//     field:&#x27;action&#x27;,</span><br>        <span class="hljs-comment">//     title:&#x27;操作&#x27;,</span><br>        <span class="hljs-comment">//     events:&#x27;operateEvents&#x27;,</span><br>        <span class="hljs-comment">//     formatter:&#x27;operateFormatter&#x27;,       //自定义表格内容，字符串内是方法名称</span><br>        <span class="hljs-comment">// &#125;</span><br>        &#123;<br>            field:<span class="hljs-string">&#x27;id&#x27;</span>,<br>            title:<span class="hljs-string">&#x27;文章id&#x27;</span>,<br>            visible: <span class="hljs-literal">false</span>,<br>        &#125;,&#123;<br>            field:<span class="hljs-string">&#x27;title&#x27;</span>,<br>            title:<span class="hljs-string">&#x27;文章标题&#x27;</span>,<br>            width: <span class="hljs-number">300</span>,<br>        &#125;,&#123;<br>            field:<span class="hljs-string">&#x27;roundup&#x27;</span>,<br>            title:<span class="hljs-string">&#x27;摘要&#x27;</span>,<br>            width: <span class="hljs-number">300</span>,<br>        &#125;,&#123;<br>            field:<span class="hljs-string">&#x27;ntype&#x27;</span>,<br>            title:<span class="hljs-string">&#x27;所属分类&#x27;</span>,<br>            formatter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (row[<span class="hljs-string">&#x27;ntype&#x27;</span>] == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;集团新闻&#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (row[<span class="hljs-string">&#x27;ntype&#x27;</span>] == <span class="hljs-number">2</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;媒体报道&#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (row[<span class="hljs-string">&#x27;ntype&#x27;</span>] == <span class="hljs-number">3</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;社会活动&#x27;</span>;<br>                &#125;<br>                    <span class="hljs-keyword">return</span> value;<br>            &#125;,<br>        &#125;,&#123;<br>            field:<span class="hljs-string">&#x27;uptime&#x27;</span>,<br>            title:<span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>        &#125;,&#123;<br>            field:<span class="hljs-string">&#x27;action&#x27;</span>,<br>            title:<span class="hljs-string">&#x27;操作&#x27;</span>,<br>            events:<span class="hljs-string">&#x27;operateEvents&#x27;</span>,<br>            formatter:<span class="hljs-string">&#x27;operateFormatter&#x27;</span>      <br>        &#125;<br>    ]<br>        <span class="hljs-comment">//列设置</span><br>&#125;); <br></code></pre></div></td></tr></table></figure><h2 id="请求参数设置"><a href="#请求参数设置" class="headerlink" title="请求参数设置"></a>请求参数设置</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//请求参数设置</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryParams</span>(<span class="hljs-params">params</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        npage: params.pageNumber,      <span class="hljs-comment">//页码</span><br>        pagesize: params.pageSize,        <span class="hljs-comment">//一页多少条记录</span><br>        ntype: $(<span class="hljs-string">&#x27;#article-class&#x27;</span>).val(),  <span class="hljs-comment">//文章类型</span><br>        btime : $(<span class="hljs-string">&#x27;#start-time&#x27;</span>).val(), <span class="hljs-comment">//起始时间 </span><br>        etime : $(<span class="hljs-string">&#x27;#end-time&#x27;</span>).val(), <span class="hljs-comment">//结束时间 </span><br>            <span class="hljs-comment">// name: $(...).val()   //其他自定义参数，从页面获取</span><br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="单元格自定义设置：行内操作按钮"><a href="#单元格自定义设置：行内操作按钮" class="headerlink" title="单元格自定义设置：行内操作按钮"></a>单元格自定义设置：行内操作按钮</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operateFormatter</span>(<span class="hljs-params">value, row, index</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> [<br>        <span class="hljs-string">&#x27;&lt;div class=&quot;btn-group&quot; role=&quot;group&quot; aria-label=&quot;...&quot;&gt;&#x27;</span>,<br>        <span class="hljs-string">&#x27;&lt;button type=&quot;button&quot; class=&quot;btn btn-default edit&quot;&gt;编辑&lt;/button&gt;&#x27;</span>,<br>        <span class="hljs-string">&#x27;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger remove&quot;&gt;删除&lt;/button&gt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>,<br>    ].join(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="" srcset="/img/loading.gif" lazyload></p><h2 id="处理行内按钮的点击事件"><a href="#处理行内按钮的点击事件" class="headerlink" title="处理行内按钮的点击事件"></a>处理行内按钮的点击事件</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.operateEvents = &#123;<br>    <span class="hljs-string">&#x27;click .edit&#x27;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, value, row, index</span>) </span>&#123;<br>            alert(<span class="hljs-string">&quot;edit&quot;</span>);<br>            <span class="hljs-comment">// 点编辑打开模态框并获取内容</span><br>            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;text-id&quot;</span>).value = row.id;<br>            $(<span class="hljs-string">&#x27;#myModal2&#x27;</span>).modal(&#123;&#125;);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;text-id&quot;</span>).value);<br>            <span class="hljs-keyword">var</span> id = row.id;<br>            <span class="hljs-keyword">var</span> sj = &#123;<span class="hljs-attr">id</span>:id&#125;;<br>            <span class="hljs-keyword">var</span> sj = <span class="hljs-built_in">JSON</span>.stringify(sj);<br>        <span class="hljs-comment">//     $.ajax(&#123;</span><br>        <span class="hljs-comment">//         type:&quot;post&quot;,</span><br>        <span class="hljs-comment">//         url:&quot;/article/detail&quot;,</span><br>        <span class="hljs-comment">//         data:sj,</span><br>        <span class="hljs-comment">//         async:false,</span><br>        <span class="hljs-comment">//         success: function(res)&#123;</span><br>        <span class="hljs-comment">//             if (res.result == &quot;OK&quot;) &#123;</span><br>                    <span class="hljs-comment">// console.log(res.data);</span><br>                        <span class="hljs-comment">// var obj = res.data;</span><br>                        <span class="hljs-comment">// if ($.isEmptyObject(obj)) &#123;</span><br>                        <span class="hljs-comment">//     alert(&quot;获取文章数据失败&quot;);</span><br>                        <span class="hljs-comment">// &#125;else&#123;</span><br>                        <span class="hljs-comment">//     document.getElementById(&quot;text-title2&quot;).value = obj.title;</span><br>                        <span class="hljs-comment">//     document.getElementById(&quot;text-summary2&quot;).value = obj.roundup;</span><br>                        <span class="hljs-comment">//     document.getElementById(&quot;text-class2&quot;).value = obj.ntype;</span><br>                        <span class="hljs-comment">//     document.getElementById(&quot;upload_img2&quot;).src = obj.thumb;</span><br>                        <span class="hljs-comment">//     $(&#x27;#summernote2&#x27;).summernote(&#x27;code&#x27;,obj.content);</span><br>                        <span class="hljs-comment">//     $(&#x27;#myModal2&#x27;).modal(&#123;&#125;);</span><br>                        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">//             &#125;else&#123;</span><br>                        <span class="hljs-comment">// if (res.errorcode == 1) &#123;</span><br>                        <span class="hljs-comment">//     alert(&quot;未登录，请先登录&quot;);</span><br>                        <span class="hljs-comment">//     location.href = &quot;login.html&quot;;</span><br>                        <span class="hljs-comment">// &#125;&#125;</span><br>        <span class="hljs-comment">//         &#125;,</span><br>                <span class="hljs-comment">// error: function(err)&#123;alert(&quot;获取文章内容网络错误&quot;);&#125;               </span><br>        <span class="hljs-comment">//     &#125;);</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;click .remove&#x27;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, value, row, index</span>) </span>&#123;<br>            alert(<span class="hljs-string">&quot;remove&quot;</span>);<br>            <span class="hljs-comment">// 删除文章</span><br>            <span class="hljs-keyword">var</span> id = row.id;<br>            <span class="hljs-keyword">var</span> sj = &#123;<span class="hljs-attr">id</span>:id&#125;;<br>            <span class="hljs-keyword">var</span> sj = <span class="hljs-built_in">JSON</span>.stringify(sj);<br>            <span class="hljs-keyword">var</span> conf = confirm(<span class="hljs-string">&quot;确定要删除&quot;</span>+row.name+<span class="hljs-string">&quot;吗&quot;</span>);<br>            <span class="hljs-keyword">if</span> (conf == <span class="hljs-literal">true</span>) &#123;<br>                alert(<span class="hljs-string">&quot;删除&quot;</span>);<br><span class="hljs-comment">//     $.ajax(&#123;</span><br><span class="hljs-comment">//         type:&quot;post&quot;,</span><br><span class="hljs-comment">//         url:&quot;/article/del&quot;,</span><br><span class="hljs-comment">//         data:sj,</span><br><span class="hljs-comment">//         async:false,</span><br><span class="hljs-comment">//         success: function(res)&#123;</span><br><span class="hljs-comment">//             if (res.result == &quot;OK&quot;) &#123;</span><br><span class="hljs-comment">// //alert(&quot;删除成功&quot;);</span><br><span class="hljs-comment">//                 location.reload();</span><br><span class="hljs-comment">//             &#125;else&#123;&#125;</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//     &#125;);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                alert(<span class="hljs-string">&quot;不删&quot;</span>);<br>            &#125;<br>    &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p><img src="" srcset="/img/loading.gif" lazyload></p><h2 id="表格可调整列宽（插件）"><a href="#表格可调整列宽（插件）" class="headerlink" title="表格可调整列宽（插件）"></a>表格可调整列宽（插件）</h2><p>首先需要引入CSS和js文件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/jquery.resizableColumns.css&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.resizableColumns.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap-table-resizable.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>然后设置数据属性<code>data-resizable</code>为<code>true</code>或者在JS初始化的表格中添加选项<code>resizable:true</code></p><p>插件存在的已知问题：当设置了表格高度时，此插件无法正常工作。也就是说，在设置表格高度以启用固定表格列头之后，表格的调整列宽功能将出现问题（其实就是二选一）。<br><img src="" srcset="/img/loading.gif" lazyload></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//请求参数设置</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryParams</span>(<span class="hljs-params">params</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        npage: params.pageNumber,      <span class="hljs-comment">//页码</span><br>        pagesize: params.pageSize,        <span class="hljs-comment">//一页多少条记录</span><br>        ntype: $(<span class="hljs-string">&#x27;#article-class&#x27;</span>).val(),  <span class="hljs-comment">//文章类型</span><br>        btime : $(<span class="hljs-string">&#x27;#start-time&#x27;</span>).val(), <span class="hljs-comment">//起始时间 </span><br>        etime : $(<span class="hljs-string">&#x27;#end-time&#x27;</span>).val(), <span class="hljs-comment">//结束时间 </span><br>            <span class="hljs-comment">// name: $(...).val()   //其他自定义参数，从页面获取</span><br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="" srcset="/img/loading.gif" lazyload></p><p>更多功能可以到官网查看，或者查看下面的参考链接。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://bootstrap-table.com/">Bootstrap Table</a></p><p><a href="https://www.bootstrap-table.com.cn/">Bootstrap Table中文网</a></p><p><a href="https://www.cnblogs.com/landeanfen/p/4976838.html">JS组件系列——表格组件神器：bootstrap table</a></p><p><a href="https://www.jianshu.com/p/b9d0f0935263">表格神器bootstraptable</a></p><p><a href="https://blog.csdn.net/S_clifftop/article/details/77937356">Bootstrap Table API 中文版（完整翻译文档）</a></p><p><a href="https://blog.csdn.net/havebeenstand/article/details/96439201">BootstrapTable中文文档</a></p><p><a href="https://www.cnblogs.com/wdcwy/p/6590855.html">bootstrap table使用总结</a></p>]]></content>
    
    
    <categories>
      
      <category>Bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap多个模态框（modals）重叠嵌套问题</title>
    <link href="/2020/05/bootstrap-modals-problem/"/>
    <url>/2020/05/bootstrap-modals-problem/</url>
    
    <content type="html"><![CDATA[<h2 id="如何实现多个模态框嵌套"><a href="#如何实现多个模态框嵌套" class="headerlink" title="如何实现多个模态框嵌套"></a>如何实现多个模态框嵌套</h2><p>最近做项目的时候用到了Bootstrap的模态框插件，官方文档里面 特别清楚提示了一条：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p>但是我就想模态框上叠模态框怎么办呢，机智如我的想到可以给上面的模态框加一个更大的<code>z-index</code>值，这样不就可以显示在上面了 吗，我这里因为只有两个模态框嵌套，所以直接修改最上面那个模态框的<code>z-index</code>的值就好，那如果需要更多的模态框嵌套该怎么办呢，一个一个去修改太麻烦了，然后我就在网上找到这样一个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 通过该方法来为每次弹出的模态框设置最新的zIndex值，从而使最新的modal显示在最前面</span><br>    $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">&#x27;show.bs.modal&#x27;</span>, <span class="hljs-string">&#x27;.modal&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>         <span class="hljs-keyword">var</span> zIndex = <span class="hljs-number">1040</span> + (<span class="hljs-number">10</span> * $(<span class="hljs-string">&#x27;.modal:visible&#x27;</span>).length);<br>         $(<span class="hljs-built_in">this</span>).css(<span class="hljs-string">&#x27;z-index&#x27;</span>, zIndex);<br>            <span class="hljs-comment">// setTimeout(function() &#123;</span><br>            <span class="hljs-comment">//     $(&#x27;.modal-backdrop&#x27;).not(&#x27;.modal-stack&#x27;).css(&#x27;z-index&#x27;, zIndex - 1).addClass(&#x27;modal-stack&#x27;);</span><br>            <span class="hljs-comment">// &#125;, 0);</span><br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><strong>PS：这个方法还没试过，不敢保证好用</strong>，只是找到贴出来，以防以后用得上。</p><h2 id="关闭子模态框父模态框也关闭？"><a href="#关闭子模态框父模态框也关闭？" class="headerlink" title="关闭子模态框父模态框也关闭？"></a>关闭子模态框父模态框也关闭？</h2><p>前面解决好了多个模态框重叠嵌套的问题，本以为可以美滋滋的 继续往下做项目了，结果又发现了另外一个更严重的问题，当我把最上面打开的子模态框关掉以后，为什么下面的父模态框也没了？？看起来官网说得对：</p><blockquote><p>千万不要在一个模态框上重叠另一个模态框</p></blockquote><p>可我还是想套一起用咋办呢，我就又去了万能的**，然后找到了解决方法，这次需要修改一下Bootstrap的源码了，先找到这一行：</p><p><code>this.$element.on(&#39;click.dismiss.bs.modal&#39;, &#39;[data-dismiss=&quot;modal&quot;]&#39;, $.proxy(this.hide, this))</code></p><p>然后把他改成：</p><p><code>this.$element.on(&#39;click.dismiss.bs.modal&#39;, &#39;[data-dismiss=&quot;modal&quot;]:first&#39;, $.proxy(this.hide, this))</code></p><p>这样就不会出现关闭上面的模态框下面也跟着关掉的问题了。</p><h2 id="滚动条怎么不见了？"><a href="#滚动条怎么不见了？" class="headerlink" title="滚动条怎么不见了？"></a>滚动条怎么不见了？</h2><p>在上面两个问题都搞定了以后，我以为不会再有bug了，然而，，事实上。。</p><p>某天我在模态框上瞎点的时候，突然发现我把上面的模态框关掉以后，下面父模态框的滚动条不见了，，当时我就傻了，这父模态框最底下还有按钮呢，滚动条没了怎么点按钮啊，于是我就打开控制台研究了一下这个模态框的结构，然后发现，在这个模态框打开的时候，Bootstrap会给body加一个叫<code>modal-open</code>的class，然后打开的模态框上面有这样一个CSS：</p><p><code>.modal-open .modal &#123;overflow-x:hidden;overflow-y:auto&#125;</code></p><p>当你把任意一个模态框关掉的时候，body上的class就没了，上面这个CSS 也就不生效了，所以就出现了滚动条神秘消失的问题，知道了是这个原因就好办了，只要给这个模态框上加一条<code>style=&quot;overflow: auto&quot;</code>不就好了吗，就像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;overflow: auto;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog modal-lg&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>加上之后一试滚动条果然还在。我改完了之后想知道有没有其他的方法就去搜了一下，结果搜到了和我一样的方法，，emmmm那就这样吧。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/0f05e628f87b">bootstrap中多个modal弹出的问题解决方案</a></p><p><a href="https://blog.csdn.net/iteye_20240/article/details/82654114">关于bootstrap的modal弹出层嵌套子Modal所引发的血案</a></p><p><a href="https://www.jb51.net/article/119206.htm">bootstrap多层模态框滚动条消失的问题</a></p>]]></content>
    
    
    <categories>
      
      <category>Bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于jQuery的简单列表滚动</title>
    <link href="/2020/05/list-rolling/"/>
    <url>/2020/05/list-rolling/</url>
    
    <content type="html"><![CDATA[<p>通过点击按钮列表可以上下滚动，依赖于jQuery。在线demo：<a href="">列表滚动</a></p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p><strong>完整代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$</span>) </span>&#123;<br>    $.fn.extend(&#123;<br>    Scroll: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">opt, callback</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (!opt) <span class="hljs-keyword">var</span> opt = &#123;&#125;;<br>            <span class="hljs-keyword">var</span> _btnUp = $(<span class="hljs-string">&quot;#&quot;</span> + opt.up); <span class="hljs-comment">//向上滚动按钮   </span><br>            <span class="hljs-keyword">var</span> _btnDown = $(<span class="hljs-string">&quot;#&quot;</span> + opt.down); <span class="hljs-comment">//向下滚动按钮   </span><br>            <span class="hljs-keyword">var</span> height = opt.height ? <span class="hljs-built_in">parseInt</span>(opt.height, <span class="hljs-number">10</span>) : <span class="hljs-number">100</span>; <span class="hljs-comment">//每次滚动的行数，默认为一屏，即父容器高度</span><br>            <span class="hljs-keyword">var</span> speed = opt.speed ? <span class="hljs-built_in">parseInt</span>(opt.speed, <span class="hljs-number">10</span>) : <span class="hljs-number">600</span>; <span class="hljs-comment">//卷动速度，数值越大，速度越慢（毫秒）</span><br>                    <br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).is(<span class="hljs-string">&quot;:animated&quot;</span>)) &#123;<br>                    $(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).animate(&#123;<span class="hljs-attr">scrollTop</span>:$(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).scrollTop()-height&#125;,speed)<br>                &#125;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).is(<span class="hljs-string">&quot;:animated&quot;</span>)) &#123;<br>                    $(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).animate(&#123;<span class="hljs-attr">scrollTop</span>:$(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).scrollTop()+height&#125;,speed)<br>                &#125;<br>            &#125;<br><br>            _btnUp.bind(<span class="hljs-string">&quot;click&quot;</span>, down);<br>            _btnDown.bind(<span class="hljs-string">&quot;click&quot;</span>, up);<br>    &#125;<br>    &#125;);<br>&#125;)(jQuery);<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).Scroll(&#123; <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">speed</span>: <span class="hljs-number">800</span>,<span class="hljs-attr">up</span>: <span class="hljs-string">&quot;btn2&quot;</span>, <span class="hljs-attr">down</span>: <span class="hljs-string">&quot;btn1&quot;</span> &#125;);<br>&#125;);<br><br></code></pre></div></td></tr></table></figure><p><strong>使用方法：</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scrollDiv&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>CSS：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-id">#scrollDiv</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">240</span>,<span class="hljs-number">240</span>,<span class="hljs-number">240</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>&#125;<br><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">240</span>,<span class="hljs-number">240</span>,<span class="hljs-number">240</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果想要列表默认滚动到某一位置可以在页面加上下面这句话：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">    $(<span class="hljs-string">&quot;#scrollDiv&quot;</span>).scrollTop(<span class="hljs-number">615</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页选择图片并预览显示</title>
    <link href="/2020/04/select-and-show-img/"/>
    <url>/2020/04/select-and-show-img/</url>
    
    <content type="html"><![CDATA[<h2 id="选择图片并显示"><a href="#选择图片并显示" class="headerlink" title="选择图片并显示"></a>选择图片并显示</h2><h2 id="图片旋转和压缩"><a href="#图片旋转和压缩" class="headerlink" title="图片旋转和压缩"></a>图片旋转和压缩</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/27627436">移动端图片上传旋转、压缩的解决方案</a></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取URL地址最后的id值</title>
    <link href="/2020/04/get-url-id/"/>
    <url>/2020/04/get-url-id/</url>
    
    <content type="html"><![CDATA[<p>有时候项目常常要获取id，有的id就在url的最后面，那么问题来了，怎么才能拿到这个id值呢，经过一番思考之后就有了下面这个方法。</p><h2 id="获取方法和思路"><a href="#获取方法和思路" class="headerlink" title="获取方法和思路"></a>获取方法和思路</h2><p><strong>代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetUrlParam</span>(<span class="hljs-params">paraName</span>) </span>&#123;<br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">document</span>.location.toString();<br><span class="hljs-keyword">var</span> arrObj = url.split(<span class="hljs-string">&quot;?&quot;</span>);<br>　　　　<span class="hljs-keyword">if</span> (arrObj.length &gt; <span class="hljs-number">1</span>) &#123;<br>　　　　　　<span class="hljs-keyword">var</span> arrPara = arrObj[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>　　　　　　<span class="hljs-keyword">var</span> arr;<br>　　　　　　<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arrPara.length; i++) &#123;<br>　　　　　　　　arr = arrPara[i].split(<span class="hljs-string">&quot;=&quot;</span>);<br>　　　　　　　　<span class="hljs-keyword">if</span> (arr != <span class="hljs-literal">null</span> &amp;&amp; arr[<span class="hljs-number">0</span>] == paraName) &#123;<br>　　　　　　　　　　<span class="hljs-keyword">return</span> arr[<span class="hljs-number">1</span>];<br>　　　　　　　　&#125;<br>　　　　　　&#125;<br>　　　　　　<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>　　　　&#125;<br>　　　　<span class="hljs-keyword">else</span> &#123;<br>　　　　　　<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>　　　　&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>思路：</strong></p><p>这个方法通过传入一个参数（通常是”id”）来获取这个参数等号后面的值。步骤是</p><ol><li>先拿到当前页面的 URL并且转成字符串的形式，</li><li>然后用”?”对这个URL字符串进行分割，将分割得到的字符串数组存入一个变量，</li><li>接着再对这个数组中的多个参数进行分割（如果有多个参数的话，没有就返回原值），</li><li>最后就是循环这个经过处理后的数组，找到符合传入参数的那一项数组元素，并将参数后面的值返回。</li></ol><p>使用方法是</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> id = GetUrlParam(<span class="hljs-string">&quot;id&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个方法的适用性并不是很大，通常适合<strong><a href="http://localhost:5500/item.html?id=01">http://localhost:5500/item.html?id=01</a></strong>或者是<strong><a href="http://localhost:5500/item.html?list=3&amp;id=01">http://localhost:5500/item.html?list=3&amp;id=01</a></strong>这样的链接，如果内容再复杂一点或格式差距较大的话就需要另外想办法实现。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】利用Three.js制作一个3D动画飞行场景</title>
    <link href="/2020/03/three-js-3D-TheAviator/"/>
    <url>/2020/03/three-js-3D-TheAviator/</url>
    
    <content type="html"><![CDATA[<p>一篇关于探讨使用 Three.js 创建 3D 动画场景的基础教程。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p><a href="http://tympanus.net/Tutorials/TheAviator/">DEMO</a>     <a href="http://tympanus.net/Tutorials/TheAviator/TheAviator.zip">源码下载</a></p><p>今日，我们将使用 Three.js 创建一个简单的 3D 飞机飞行的动画场景。Three.js 是一个 3D 类库，它能让 WebGL 变得更加简单。由于 GSL 语法的复杂性，对于许多开发人员来说 WebGL 是一个未知的领域。但是有了 Three.js，在浏览器中 3D 的实现变得简单。</p><blockquote><p>(译者注：WebGL 是一项利用 JavaScriptAPI 渲染交互式 3D 电脑图形和 2D 图形的技术，可兼容任何的网页浏览器，无需加装插件。通过 WebGL 的技术，只需要编写网页代码即可实现 3D 图像的展示。GLSL-OpenGL Shading Language 也称作 GLslang ，是一个以 C 语言为基础的高阶着色语言。它是由 OpenGL ARB 所建立，提供开发者对绘图管线更多的直接控制，而无需使用汇编语言或硬件规格语言。详细麻烦谷歌或百度一下～)</p></blockquote><p>在本教程中，我们将创建一个简单的 3D 场景, 在两个主要的部分会有一些交互。在<a href="http://tympanus.net/Tutorials/TheAviator/part1.html">第一部分</a>，我们会讲解 Three.js 的基础和如何创建一个简单的场景。<a href="http://tympanus.net/Tutorials/TheAviator/part2.html">第二部分</a>会详细讲述如何优化模型，如何为场景中的不同元素增添气氛以及更流畅的运动效果。</p><p>由于完整的<a href="http://tympanus.net/Tutorials/TheAviator/">游戏</a>超出了本教程的范围，但是你可以下载或 check out 源码。它包含了许多额外有趣的部分如：碰撞，抓硬币和增加得分。</p><p>在本教程中，我们将重点学习 Three.js 中的一些基础概念。这些基础概念将带你走进 WebGL 这新领域！</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>事不宜迟，我们马上开始~</p><h2 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h2><p>本教程主要采用 Three.js 类库，Three.js 让 WebGL 变得易于使用。从<a href="http://threejs.org/">官网</a>或 <a href="https://github.com/mrdoob/three.js/">GitHub repo</a> check out 获取关于 Three.js 更多的信息。</p><p>第一样要做的事情就是在 HTML <header> 标签中引入 Three.js：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>然后在 HTML 中需要添加一个元素作为容器。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;world&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>你可以像下面那样写一些简单的样式，让它填满整个 viewport：<br> #world {<br> position: absolute;<br> width: 100%;<br> height: 100%;<br> overflow: hidden;<br> background: linear-gradient(#e4e0ba, #f7d9aa);<br> }<br> 正如你所见的一样，背景有些渐变的效果，就像天空。</p><p>以上是标签和样式！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><hr><p>如果你已经掌握了一些 JavaScript 的基础知识，使用 Three.js 会变得相当简单。来~我们看看实现不同部分的代码。</p><h3 id="The-Color-Palette"><a href="#The-Color-Palette" class="headerlink" title="The Color Palette"></a>The Color Palette</h3><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>在开始场景编码之前，我觉得定义一个调色板是很有用的。因为在整个项目中会经常使用到。在这个项目中，我们会选择以下这些颜色：</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> Colors = &#123;<br>   red:<span class="hljs-number">0xf25346</span>,    <br>   white:<span class="hljs-number">0xd8d0d1</span>,  <br>   brown:<span class="hljs-number">0x59332e</span>,  <br>   pink:<span class="hljs-number">0xF5986E</span>,   <br>   brownDark:<span class="hljs-number">0x23190f</span>,  <br>   blue:<span class="hljs-number">0x68c3c0</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><p>虽然 JavaScript 代码十分冗长，但是它的结构很简单。我们需要创建所有主要的函数并放入初始函数中：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, init, <span class="hljs-literal">false</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-comment">// 创建场景，相机和渲染器</span><br>   createScene(); <br>   <span class="hljs-comment">// 添加光源</span><br>   createLights(); <br>   <span class="hljs-comment">// 添加对象 </span><br>   createPlane();   <br>   createSea(); <br>   createSky(); <br>   <span class="hljs-comment">// 调用循环函数，在每帧更新对象的位置和渲染场景</span><br>   loop();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="创建场景"><a href="#创建场景" class="headerlink" title="创建场景"></a>创建场景</h3><p>创建一个 Three.js 的项目，我们至少需要以下这些：</p><ol><li><strong>场景：</strong>把这看作一个舞台，将需要呈现的对象都添加进去。</li><li><strong>相机：</strong>在这情况下，我们将使用透视相机，但它也可能是正投影相机。</li><li><strong>渲染器：</strong>使用 WebGL 渲染器显示所有的场景。</li><li><strong>渲染一个或多个对象：</strong> 在我们的例子中，我们会创建飞机，大海，天空（一些云）。</li><li><strong>光源：</strong>有不同类型可用的光源。在我们的项目中，我们主要用到营造氛围的半球光和制造阴影的方向光。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>在 createScene 函数中创建场景，相机以及渲染器。</p><blockquote><p>译者注：</p></blockquote><ul><li><p>Three.js 场景只有一种，THREE.Scene 场景是所有物体的容器。</p></li><li><p>相机决定了场景中哪个角度的景色会显示出来。</p></li><li><p>渲染器决定了渲染的结果应该显示在页面的什么元素上，并以怎样的方式绘制。<br> 有了这三样东西，才能使用相机将对象渲染到页面中。</p><p>var scene, camera, fieldOfView, aspectRatio, nearPlane,<br> farPlane, HEIGHT, WIDTH, renderer, container;<br> function createScene() {<br> // 获得屏幕的宽和高，<br> // 用它们设置相机的纵横比<br> // 还有渲染器的大小<br> HEIGHT = window.innerHeight;<br> WIDTH = window.innerWidth;</p><figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart"><span class="hljs-comment">// 创建场景</span><br>scene = <span class="hljs-keyword">new</span> THREE.Scene();       <br>  <br><span class="hljs-comment">// 在场景中添加雾的效果；样式上使用和背景一样的颜色</span><br>scene.fog = <span class="hljs-keyword">new</span> THREE.Fog(<span class="hljs-number">0xf7d9aa</span>, <span class="hljs-number">100</span>, <span class="hljs-number">950</span>);<br>  <br><span class="hljs-comment">// 创建相机</span><br>aspectRatio = WIDTH / HEIGHT;   <br>fieldOfView = <span class="hljs-number">60</span>;   <br>nearPlane = <span class="hljs-number">1</span>;  <br>farPlane = <span class="hljs-number">10000</span>;<br><span class="hljs-comment"><span class="markdown">/<span class="hljs-strong">**</span></span></span><br><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet"> *</span> PerspectiveCamera 透视相机</span></span><br><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet"> *</span> @param fieldOfView 视角</span></span><br><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet"> *</span> @param aspectRatio 纵横比</span></span><br><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet"> *</span> @param nearPlane 近平面</span></span><br><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet"> *</span> @param farPlane 远平面</span></span><br><span class="hljs-comment"><span class="markdown"> <span class="hljs-emphasis">*/</span></span></span><br>camera = <span class="hljs-keyword">new</span> THREE.PerspectiveCamera(       <br>  fieldOfView,<br>  aspectRatio,<br>  nearPlane,<br>  farPlane<br>  );<br>  <br><span class="hljs-comment">// 设置相机的位置</span><br>camera.position.x = <span class="hljs-number">0</span>;  <br>camera.position.z = <span class="hljs-number">200</span>;    <br>camera.position.y = <span class="hljs-number">100</span>; <br>  <br><span class="hljs-comment">// 创建渲染器</span><br>renderer = <span class="hljs-keyword">new</span> THREE.WebGLRenderer(&#123; <br><span class="hljs-comment">// 在 css 中设置背景色透明显示渐变色</span><br>  alpha: <span class="hljs-keyword">true</span>, <br><span class="hljs-comment">// 开启抗锯齿，但这样会降低性能。</span><br><span class="hljs-comment">// 不过，由于我们的项目基于低多边形的，那还好 :) </span><br>  antialias: <span class="hljs-keyword">true</span> <br>&#125;);<br>  <br><span class="hljs-comment">// 定义渲染器的尺寸；在这里它会填满整个屏幕</span><br>renderer.setSize(WIDTH, HEIGHT); <br>  <br><span class="hljs-comment">// 打开渲染器的阴影地图</span><br>renderer.shadowMap.enabled = <span class="hljs-keyword">true</span>; <br>  <br><span class="hljs-comment">// 在 HTML 创建的容器中添加渲染器的 DOM 元素</span><br>container = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;world&#x27;</span>);   <br>container.appendChild(renderer.domElement);<br>  <br><span class="hljs-comment">// 监听屏幕，缩放屏幕更新相机和渲染器的尺寸</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, handleWindowResize, <span class="hljs-keyword">false</span>);<br></code></pre></div></td></tr></table></figure><p>}</p></li></ul><p>由于屏幕的尺寸改变，我们需要更新渲染器的尺寸和相机的纵横比。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleWindowResize</span>(<span class="hljs-params"></span>) </span>&#123; <br>   <span class="hljs-comment">// 更新渲染器的高度和宽度以及相机的纵横比</span><br>   HEIGHT = <span class="hljs-built_in">window</span>.innerHeight; <br>   WIDTH = <span class="hljs-built_in">window</span>.innerWidth;           <br>   renderer.setSize(WIDTH, HEIGHT); <br>   camera.aspect = WIDTH / HEIGHT;        <br>   camera.updateProjectionMatrix();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="光源"><a href="#光源" class="headerlink" title="光源"></a>光源</h3><p>当创建一个场景时，光源是最棘手的一部分。光源可以奠定整个场景的基调，所以要适当地选取。在这部分我们要尽量制造足以让对象可见的光源。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> hemisphereLight, shadowLight;<br><span class="hljs-function">function <span class="hljs-title">createLights</span>(<span class="hljs-params"></span>)</span> &#123;<br>   <span class="hljs-comment">// 半球光就是渐变的光；</span><br>   <span class="hljs-comment">// 第一个参数是天空的颜色，第二个参数是地上的颜色，第三个参数是光源的强度</span><br>   hemisphereLight = <span class="hljs-keyword">new</span> THREE.HemisphereLight(<span class="hljs-number">0xaaaaaa</span>,<span class="hljs-number">0x000000</span>, <span class="hljs-number">.9</span>);<br><br>   <span class="hljs-comment">// 方向光是从一个特定的方向的照射</span><br>   <span class="hljs-comment">// 类似太阳，即所有光源是平行的</span><br>   <span class="hljs-comment">// 第一个参数是关系颜色，第二个参数是光源强度</span><br>   shadowLight = <span class="hljs-keyword">new</span> THREE.DirectionalLight(<span class="hljs-number">0xffffff</span>, <span class="hljs-number">.9</span>);<br><br>   <span class="hljs-comment">// 设置光源的方向。  </span><br>   <span class="hljs-comment">// 位置不同，方向光作用于物体的面也不同，看到的颜色也不同</span><br>   shadowLight.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">150</span>, <span class="hljs-number">350</span>, <span class="hljs-number">350</span>);<br><br>   <span class="hljs-comment">// 开启光源投影 </span><br>   shadowLight.castShadow = <span class="hljs-literal">true</span>;<br><br>   <span class="hljs-comment">// 定义可见域的投射阴影</span><br>   shadowLight.shadow.camera.left = <span class="hljs-number">-400</span>;<br>   shadowLight.shadow.camera.right = <span class="hljs-number">400</span>;<br>   shadowLight.shadow.camera.top = <span class="hljs-number">400</span>;<br>   shadowLight.shadow.camera.bottom = <span class="hljs-number">-400</span>;<br>   shadowLight.shadow.camera.near = <span class="hljs-number">1</span>;<br>   shadowLight.shadow.camera.far = <span class="hljs-number">1000</span>;<br><br>   <span class="hljs-comment">// 定义阴影的分辨率；虽然分辨率越高越好，但是需要付出更加昂贵的代价维持高性能的表现。</span><br>   shadowLight.shadow.mapSize.width = <span class="hljs-number">2048</span>;<br>   shadowLight.shadow.mapSize.height = <span class="hljs-number">2048</span>;<br><br>   <span class="hljs-comment">// 为了使这些光源呈现效果，只需要将它们添加到场景中</span><br>   scene.<span class="hljs-keyword">add</span>(hemisphereLight);  <br>   scene.<span class="hljs-keyword">add</span>(shadowLight);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>正如你所见，创建光源用到许多参数。不要再犹豫，大胆尝试用不同的颜色，强度的光源。你发现不同的光源在场景中能够营造有趣的氛围和环境。而且你会找到感觉：如何按照你的需求优化它们。</p><h2 id="用-Three-js-创建对象"><a href="#用-Three-js-创建对象" class="headerlink" title="用 Three.js 创建对象"></a>用 Three.js 创建对象</h2><hr><blockquote><p>如果你熟悉使用 3D 建模软件，你可以先在软件中建立物体且能简单地将它们导入到你的 Three.js 项目中。在本教程中不涉及具体的解决方案。为了更好地了解它们具体是如何工作的。我们使用 Three.js 中现成的几何体创建对象。</p></blockquote><p>Three.js 中已经有大量的现成几何体如：立方体，球体，圆环面，圆柱体以及飞机原型。</p><p>对于我们的项目，所有的对象只需要通过这些几何体组合而成。这非常适合低多边形的风格，而且我们可以不必在 3D 建模软件中创建对象。</p><h3 id="用一个圆柱体代表大海"><a href="#用一个圆柱体代表大海" class="headerlink" title="用一个圆柱体代表大海"></a>用一个圆柱体代表大海</h3><p>我们开始创建大海模型，因为它是我们实现中最简单的对象。为了简单起见，我们将大海看作一个简单的圆柱体放置在屏幕的底部。之后我们再深入研究如何改善大海的外观。<br> 接着，让我们使大海看起来更具吸引力，海浪更加逼真。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">//首先定义一个大海对象</span><br>Sea = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-comment">// 创建一个圆柱几何体</span><br>   <span class="hljs-comment">// 参数为：顶面半径，底面半径，高度，半径分段，高度分段</span><br>   <span class="hljs-keyword">var</span> geom = <span class="hljs-keyword">new</span> THREE.CylinderGeometry(<span class="hljs-number">600</span>,<span class="hljs-number">600</span>,<span class="hljs-number">800</span>,<span class="hljs-number">40</span>,<span class="hljs-number">10</span>);<br><br>   <span class="hljs-comment">// 在 x 轴旋转几何体</span><br>   geom.applyMatrix(<span class="hljs-keyword">new</span> THREE.Matrix4().makeRotationX(-<span class="hljs-built_in">Math</span>.PI/<span class="hljs-number">2</span>));<br><br>   <span class="hljs-comment">// 创建材质</span><br>   <span class="hljs-keyword">var</span> mat = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color:Colors.blue,<br>       transparent:<span class="hljs-literal">true</span>,<br>       opacity:<span class="hljs-number">.6</span>,<br>       shading:THREE.FlatShading,<br>   &#125;);<br><br>   <span class="hljs-comment">// 为了在 Three.js 创建一个物体，我们必须创建网格用来组合几何体和一些材质 </span><br>   <span class="hljs-built_in">this</span>.mesh = <span class="hljs-keyword">new</span> THREE.Mesh(geom, mat);<br><br>   <span class="hljs-comment">// 允许大海对象接收阴影</span><br>   <span class="hljs-built_in">this</span>.mesh.receiveShadow = <span class="hljs-literal">true</span>; <br>&#125;<br><br><span class="hljs-comment">//实例化大海对象，并添加至场景</span><br><span class="hljs-keyword">var</span> sea;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createSea</span>(<span class="hljs-params"></span>)</span>&#123;<br>   sea = <span class="hljs-keyword">new</span> Sea();<br><br>   <span class="hljs-comment">// 在场景底部，稍微推挤一下</span><br>   sea.mesh.position.y = -<span class="hljs-number">600</span>;<br><br>   <span class="hljs-comment">// 添加大海的网格至场景</span><br>   scene.add(sea.mesh);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>总结一下创建对象，需要什么东西。<br> 我们需要：</p><ol><li>创建几何体</li><li>创建材质</li><li>将它们传入网格</li><li>将网格添加至场景</li></ol><p>通过这些步骤，我们可以创建许多不同种类的几何体。现在，如果我们把它们组合起来，就可以创建更多复杂的形状。</p><p>在以下步骤中，我们将精确地学习如何创建复杂的形状。</p><h3 id="把简单的正方体组合建造复杂的形状"><a href="#把简单的正方体组合建造复杂的形状" class="headerlink" title="把简单的正方体组合建造复杂的形状"></a>把简单的正方体组合建造复杂的形状</h3><p>云的制作会有一点点复杂，因为他们是由若干个正方体组合而成的一个随机形状。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">Cloud = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-comment">// 创建一个空的容器放置不同形状的云</span><br>   <span class="hljs-built_in">this</span>.mesh = <span class="hljs-keyword">new</span> THREE.Object3D();<br><br>   <span class="hljs-comment">// 创建一个正方体</span><br>   <span class="hljs-comment">// 这个形状会被复制创建云</span><br>   <span class="hljs-keyword">var</span> geom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br><br>   <span class="hljs-comment">// 创建材质；一个简单的白色材质就可以达到效果</span><br>   <span class="hljs-keyword">var</span> mat = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color:Colors.white,  <br>   &#125;);<br><br>   <span class="hljs-comment">// 随机多次复制几何体</span><br>   <span class="hljs-keyword">var</span> nBlocs = <span class="hljs-number">3</span>+<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">3</span>);<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;nBlocs; i++ )&#123;<br>    <br>       <span class="hljs-comment">// 通过复制几何体创建网格</span><br>       <span class="hljs-keyword">var</span> m = <span class="hljs-keyword">new</span> THREE.Mesh(geom, mat); <br>    <br>       <span class="hljs-comment">// 随机设置每个正方体的位置和旋转角度</span><br>       m.position.x = i*<span class="hljs-number">15</span>;<br>       m.position.y = <span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">10</span>;<br>       m.position.z = <span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">10</span>;<br>       m.rotation.z = <span class="hljs-built_in">Math</span>.random()*<span class="hljs-built_in">Math</span>.PI*<span class="hljs-number">2</span>;<br>       m.rotation.y = <span class="hljs-built_in">Math</span>.random()*<span class="hljs-built_in">Math</span>.PI*<span class="hljs-number">2</span>;<br>    <br>       <span class="hljs-comment">// 随机设置正方体的大小</span><br>       <span class="hljs-keyword">var</span> s = <span class="hljs-number">.1</span> + <span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">.9</span>;<br>       m.scale.set(s,s,s);<br>    <br>       <span class="hljs-comment">// 允许每个正方体生成投影和接收阴影</span><br>       m.castShadow = <span class="hljs-literal">true</span>;<br>       m.receiveShadow = <span class="hljs-literal">true</span>;<br>    <br>       <span class="hljs-comment">// 将正方体添加至开始时我们创建的容器中</span><br>       <span class="hljs-built_in">this</span>.mesh.add(m);<br>   &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在，我们已经创建一朵云，我们通过复制它来创建天空，而且将其放置在 z 轴任意位置。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 定义一个天空对象</span><br>Sky = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-comment">// 创建一个空的容器</span><br>   <span class="hljs-built_in">this</span>.mesh = <span class="hljs-keyword">new</span> THREE.Object3D();<br><br>   <span class="hljs-comment">// 选取若干朵云散布在天空中</span><br>   <span class="hljs-built_in">this</span>.nClouds = <span class="hljs-number">20</span>;<br><br>   <span class="hljs-comment">// 把云均匀地散布</span><br>   <span class="hljs-comment">// 我们需要根据统一的角度放置它们</span><br>   <span class="hljs-keyword">var</span> stepAngle = <span class="hljs-built_in">Math</span>.PI*<span class="hljs-number">2</span> / <span class="hljs-built_in">this</span>.nClouds;<br><br>   <span class="hljs-comment">// 创建云对象</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">this</span>.nClouds; i++)&#123;<br>       <span class="hljs-keyword">var</span> c = <span class="hljs-keyword">new</span> Cloud();<br> <br>       <span class="hljs-comment">// 设置每朵云的旋转角度和位置</span><br>       <span class="hljs-comment">// 因此我们使用了一点三角函数</span><br>       <span class="hljs-keyword">var</span> a = stepAngle*i; <span class="hljs-comment">//这是云的最终角度</span><br>       <span class="hljs-keyword">var</span> h = <span class="hljs-number">750</span> + <span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">200</span>; <span class="hljs-comment">// 这是轴的中心和云本身之间的距离</span><br><br>       <span class="hljs-comment">// 三角函数！！！希望你还记得数学学过的东西 :)</span><br>       <span class="hljs-comment">// 假如你不记得: </span><br>       <span class="hljs-comment">// 我们简单地把极坐标转换成笛卡坐标</span><br>       c.mesh.position.y = <span class="hljs-built_in">Math</span>.sin(a)*h;<br>       c.mesh.position.x = <span class="hljs-built_in">Math</span>.cos(a)*h;<br><br>       <span class="hljs-comment">// 根据云的位置旋转它</span><br>       c.mesh.rotation.z = a + <span class="hljs-built_in">Math</span>.PI/<span class="hljs-number">2</span>;<br><br>       <span class="hljs-comment">// 为了有更好的效果，我们把云放置在场景中的随机深度位置</span><br>       c.mesh.position.z = -<span class="hljs-number">400</span>-<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">400</span>;<br>    <br>       <span class="hljs-comment">// 而且我们为每朵云设置一个随机大小</span><br>       <span class="hljs-keyword">var</span> s = <span class="hljs-number">1</span>+<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">2</span>;<br>       c.mesh.scale.set(s,s,s);<br><br>       <span class="hljs-comment">// 不要忘记将每朵云的网格添加到场景中</span><br>       <span class="hljs-built_in">this</span>.mesh.add(c.mesh); <br>   &#125;  <br>&#125;<br><br><span class="hljs-comment">// 现在我们实例化天空对象，而且将它放置在屏幕中间稍微偏下的位置。</span><br><br><span class="hljs-keyword">var</span> sky;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createSky</span>(<span class="hljs-params"></span>)</span>&#123;<br>   sky = <span class="hljs-keyword">new</span> Sky();<br>   sky.mesh.position.y = -<span class="hljs-number">600</span>;<br>   scene.add(sky.mesh);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="更加复杂的形状：创建飞机模型"><a href="#更加复杂的形状：创建飞机模型" class="headerlink" title="更加复杂的形状：创建飞机模型"></a>更加复杂的形状：创建飞机模型</h3><p>坏消息是：创建飞机模型的代码有点复杂有点长。但是好消息是：为了创建它我们已经学习了所有应该知道的。这里所有都是关于组合和封装形状的代码。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> AirPlane = function() &#123;<br><br>   <span class="hljs-keyword">this</span>.mesh = <span class="hljs-keyword">new</span> THREE.Object3D();<br><br>   <span class="hljs-comment">// 创建机舱</span><br>   <span class="hljs-keyword">var</span> geomCockpit = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">60</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">var</span> matCockpit = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color: Colors.red,<br>       shading: THREE.FlatShading<br>   &#125;);<br>   <span class="hljs-keyword">var</span> cockpit = <span class="hljs-keyword">new</span> THREE.Mesh(geomCockpit, matCockpit);<br>   cockpit.castShadow = <span class="hljs-literal">true</span>;<br>   cockpit.receiveShadow = <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(cockpit);<br><br>   <span class="hljs-comment">// 创建引擎</span><br>   <span class="hljs-keyword">var</span> geomEngine = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">var</span> matEngine = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>         color: Colors.white,<br>         shading: THREE.FlatShading<br>   &#125;);<br>   <span class="hljs-keyword">var</span> engine = <span class="hljs-keyword">new</span> THREE.Mesh(geomEngine, matEngine);<br>   engine.position.x = <span class="hljs-number">40</span>;<br>   engine.castShadow = <span class="hljs-literal">true</span>;<br>   engine.receiveShadow = <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(engine);<br><br>   <span class="hljs-comment">// 创建机尾</span><br>   <span class="hljs-keyword">var</span> geomTailPlane = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">var</span> matTailPlane = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color: Colors.red,<br>       shading: THREE.FlatShading<br>   &#125;);<br>   <span class="hljs-keyword">var</span> tailPlane = <span class="hljs-keyword">new</span> THREE.Mesh(geomTailPlane, matTailPlane);<br>   tailPlane.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">-35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">0</span>);<br>   tailPlane.castShadow = <span class="hljs-literal">true</span>;<br>   tailPlane.receiveShadow = <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(tailPlane);<br><br>    <span class="hljs-comment">// 创建机翼</span><br>   <span class="hljs-keyword">var</span> geomSideWing = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">40</span>, <span class="hljs-number">8</span>, <span class="hljs-number">150</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">var</span> matSideWing = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color: Colors.red,<br>       shading: THREE.FlatShading<br>   &#125;);<br>   <span class="hljs-keyword">var</span> sideWing = <span class="hljs-keyword">new</span> THREE.Mesh(geomSideWing, matSideWing);<br>   sideWing.castShadow = <span class="hljs-literal">true</span>;<br>   sideWing.receiveShadow = <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(sideWing);<br><br>   <span class="hljs-comment">// 创建螺旋桨</span><br>   <span class="hljs-keyword">var</span> geomPropeller = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">var</span> matPropeller = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color: Colors.brown,<br>       shading: THREE.FlatShading<br>   &#125;);<br>   <span class="hljs-keyword">this</span>.propeller = <span class="hljs-keyword">new</span> THREE.Mesh(geomPropeller, matPropeller);<br>   <span class="hljs-keyword">this</span>.propeller.castShadow = <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">this</span>.propeller.receiveShadow = <span class="hljs-literal">true</span>;<br><br>   <span class="hljs-comment">// 创建螺旋桨的桨叶</span><br>   <span class="hljs-keyword">var</span> geomBlade = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">var</span> matBlade = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color: Colors.brownDark,<br>       shading: THREE.FlatShading<br>   &#125;);<br><br>   <span class="hljs-keyword">var</span> blade = <span class="hljs-keyword">new</span> THREE.Mesh(geomBlade, matBlade);<br>   blade.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>   blade.castShadow = <span class="hljs-literal">true</span>;<br>   blade.receiveShadow = <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">this</span>.propeller.<span class="hljs-keyword">add</span>(blade);<br>   <span class="hljs-keyword">this</span>.propeller.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">this</span>.propeller);<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>这飞机看起来很简单吧？<br> 不要担心它现在的样子，接着我们将看到如何改进形状，让飞机更加好看!</p></blockquote><p>现在，我们可以实例化这飞机并添加到场景中：</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> airplane;<br><br><span class="hljs-function">function <span class="hljs-title">createPlane</span>(<span class="hljs-params"></span>)</span>&#123; <br>   airplane = <span class="hljs-keyword">new</span> AirPlane();<br>   airplane.mesh.scale.<span class="hljs-keyword">set</span>(<span class="hljs-number">.25</span>,<span class="hljs-number">.25</span>,<span class="hljs-number">.25</span>);<br>   airplane.mesh.position.y = <span class="hljs-number">100</span>;<br>   scene.<span class="hljs-keyword">add</span>(airplane.mesh);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><hr><p>我们已经创建了几个对象并把它们添加到我们的场景中了，但是为啥运行游戏的时候什么都看不到呢？那是因为我们需要渲染场景，添加一下这句简单的代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">renderer<span class="hljs-selector-class">.render</span>(scene, camera);<br></code></pre></div></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><hr><p>通过使螺旋桨旋转并转动大海和云让我们的场景更具生命力。<br> 因此我们需要一个无限循环函数</p><blockquote><p>译者注：渲染有两种类型：实时渲染和离线渲染</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-comment">// 使螺旋桨旋转并转动大海和云</span><br>   airplane.propeller.rotation.x += <span class="hljs-number">0.3</span>;<br>   sea.mesh.rotation.z += <span class="hljs-number">.005</span>;<br>   sky.mesh.rotation.z += <span class="hljs-number">.01</span>;<br><br>   <span class="hljs-comment">// 渲染场景</span><br>   renderer.render(scene, camera);<br><br>   <span class="hljs-comment">// 重新调用 render() 函数</span><br>   requestAnimationFrame(loop);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>正如你看到的一样，我们将渲染器的 render() 函数移动到 loop() 函数中。因为每次修改物体的位置或颜色之类的属性就需要重新调用一次 render() 函数。</p><h2 id="随着鼠标的移动，添加交互"><a href="#随着鼠标的移动，添加交互" class="headerlink" title="随着鼠标的移动，添加交互"></a>随着鼠标的移动，添加交互</h2><hr><p>在这刻，我们已经看见飞机在场景在中间，接下来我们还需要实现什么呢？就是监听鼠标的移动实现交互。</p><p>当文档加载完成，我们就需要为文档添加监听器，检测鼠标是否有移动。因此，我们需要对初始化函数作出以下的修改。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params">event</span>)</span>&#123;<br>   createScene();<br>   createLights();<br>   createPlane();<br>   createSea();<br>   createSky();<br><br>   <span class="hljs-comment">//添加监听器</span><br>   <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, handleMouseMove, <span class="hljs-literal">false</span>);<br><br>   loop();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>另外，我们创建一个 mousemove 事件的事件处理函数。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> mousePos=&#123;x:<span class="hljs-number">0</span>, y:<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-comment">// mousemove 事件处理函数</span><br><br><span class="hljs-function">function <span class="hljs-title">handleMouseMove</span>(<span class="hljs-params"><span class="hljs-keyword">event</span></span>)</span> &#123;<br><br>   <span class="hljs-comment">// 这里我把接收到的鼠标位置的值转换成归一化值，在-1与1之间变化 </span><br>   <span class="hljs-comment">// 这是x轴的公式:</span><br><br>   <span class="hljs-keyword">var</span> tx = <span class="hljs-number">-1</span> + (<span class="hljs-keyword">event</span>.clientX / WIDTH)*<span class="hljs-number">2</span>;<br><br>   <span class="hljs-comment">// 对于 y 轴，我们需要一个逆公式</span><br>   <span class="hljs-comment">// 因为 2D 的 y 轴与 3D 的 y 轴方向相反</span><br><br>   <span class="hljs-keyword">var</span> ty = <span class="hljs-number">1</span> - (<span class="hljs-keyword">event</span>.clientY / HEIGHT)*<span class="hljs-number">2</span>;<br>   mousePos = &#123;x:tx, y:ty&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在获得鼠标的 x , y 坐标值，我们可以适当地移动飞机。</p><p>我们需要修改循环函数并添加一个新功能去更新飞机的位置。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params"></span>)</span>&#123;<br>   sea.mesh.rotation.z += <span class="hljs-number">.005</span>;<br>   sky.mesh.rotation.z += <span class="hljs-number">.01</span>;<br><br>   <span class="hljs-comment">// 更新每帧的飞机</span><br>   updatePlane();<br><br>   renderer.render(scene, camera);<br>   requestAnimationFrame(loop);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updatePlane</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-comment">// 让我们在x轴上-100至100之间和y轴25至175之间移动飞机</span><br>   <span class="hljs-comment">// 根据鼠标的位置在-1与1之间的范围，我们使用的 normalize 函数实现（如下）</span><br><br>   <span class="hljs-keyword">var</span> targetX = normalize(mousePos.x, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>   <span class="hljs-keyword">var</span> targetY = normalize(mousePos.y, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">175</span>);<br><br>   <span class="hljs-comment">// 更新飞机的位置</span><br>   airplane.mesh.position.y = targetY;<br>   airplane.mesh.position.x = targetX;<br>   airplane.propeller.rotation.x += <span class="hljs-number">0.3</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">normalize</span>(<span class="hljs-params">v,vmin,vmax,tmin, tmax</span>)</span>&#123;<br><br>   <span class="hljs-keyword">var</span> nv = <span class="hljs-built_in">Math</span>.max(<span class="hljs-built_in">Math</span>.min(v,vmax), vmin);<br>   <span class="hljs-keyword">var</span> dv = vmax-vmin;<br>   <span class="hljs-keyword">var</span> pc = (nv-vmin)/dv;<br>   <span class="hljs-keyword">var</span> dt = tmax-tmin;<br>   <span class="hljs-keyword">var</span> tv = tmin + (pc*dt);<br>   <span class="hljs-keyword">return</span> tv;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>恭喜你！到这里，已经实现了飞机随着鼠标的移动而移动。到目前为止，看看我们已经实现了什么功能：<a href="http://tympanus.net/Tutorials/TheAviator/part1.html">第一部分的 Demo</a></p><h2 id="几乎完成！"><a href="#几乎完成！" class="headerlink" title="几乎完成！"></a>几乎完成！</h2><p>正如你所看见的，使用 Three.js 对创建 WebGL 内容有非常大的帮助。建立一个场景和渲染一些自定义对象不需要懂太多 WebGL 的知识。到目前为止，我们已经学会一些基础概念和你已经可以开始通过调整一些参数类似光源的强度，雾的颜色和物体的大小掌握了一些基本的诀窍。或许现在你已经很熟悉创建一些新的对象了。</p><p><em>如果你想学习更加深入的技术，请继续阅读。因为你将会学习到如何改进 3D 场景，使飞机飞行得更加平稳，并模仿低多边形海浪对大海的影响。</em></p><h2 id="一架更酷的飞机"><a href="#一架更酷的飞机" class="headerlink" title="一架更酷的飞机"></a>一架更酷的飞机</h2><p>好了~我们之前创建了非常基础的飞机。我们现在知道如何创建对象并组合它们，但是我们仍然需要学习如何修改几何体令其更加符合我们的需求。</p><p>例如正方体，可以移动它的顶点。在我们的案例中，我们需要使它更加像驾驶舱。</p><p>让我们看一下驾驶舱这部分的代码，还有看下我们是如何让他的背部变得更窄的：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">// 驾驶舱</span><br><br><span class="hljs-keyword">var</span> geomCockpit = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">80</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> matCockpit = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;color:Colors.red, shading:THREE.FlatShading&#125;);<br><br><span class="hljs-comment">// 我们可以通过访问形状中顶点数组中一组特定的顶点</span><br><span class="hljs-comment">// 然后移动它的 x, y, z 属性:</span><br>geomCockpit.vertices[<span class="hljs-number">4</span>].y-=<span class="hljs-number">10</span>;<br>geomCockpit.vertices[<span class="hljs-number">4</span>].z+=<span class="hljs-number">20</span>;<br>geomCockpit.vertices[<span class="hljs-number">5</span>].y-=<span class="hljs-number">10</span>;<br>geomCockpit.vertices[<span class="hljs-number">5</span>].z-=<span class="hljs-number">20</span>;<br>geomCockpit.vertices[<span class="hljs-number">6</span>].y+=<span class="hljs-number">30</span>;<br>geomCockpit.vertices[<span class="hljs-number">6</span>].z+=<span class="hljs-number">20</span>;<br>geomCockpit.vertices[<span class="hljs-number">7</span>].y+=<span class="hljs-number">30</span>;<br>geomCockpit.vertices[<span class="hljs-number">7</span>].z-=<span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">var</span> cockpit = <span class="hljs-keyword">new</span> THREE.Mesh(geomCockpit, matCockpit);<br>cockpit.castShadow = <span class="hljs-literal">true</span>;<br>cockpit.receiveShadow = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(cockpit);<br></code></pre></div></td></tr></table></figure><p>这就是如何操纵一个形状以适应我们的需求的一个例子。</p><p><em>如果你看到飞机的完整代码，你会看到几个对象：更像窗口的对象和更美观的螺旋桨。没有什么复杂的东西，试着调整相关的值找找感觉，制造属于你自己的飞机。</em></p><h2 id="但是，是谁在开飞机呢？"><a href="#但是，是谁在开飞机呢？" class="headerlink" title="但是，是谁在开飞机呢？"></a>但是，是谁在开飞机呢？</h2><hr><p>为我们的飞机添加一个飞行员，就好像添加几个盒子一样容易。</p><p>但是我们只需要一个酷酷的飞行员，头发要很飘逸的！感觉它好像很难实现的样子，但是由于我们开始的时候是在低多边形的场景下开始的，所以这就变得简单多了！尝试通过几个盒子模拟创建飘逸的头发，同时会给予一种独特的感觉。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>让我们看看源码：</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> Pilot = function()&#123;<br>   <span class="hljs-keyword">this</span>.mesh = <span class="hljs-keyword">new</span> THREE.Object3D();<br>   <span class="hljs-keyword">this</span>.mesh.name = <span class="hljs-string">&quot;pilot&quot;</span>;<br><br>   <span class="hljs-comment">// angleHairs是用于后面头发的动画的属性 </span><br>   <span class="hljs-keyword">this</span>.angleHairs=<span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">// 飞行员的身体</span><br>   <span class="hljs-keyword">var</span> bodyGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>);<br>   <span class="hljs-keyword">var</span> bodyMat = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;color:Colors.brown, shading:THREE.FlatShading&#125;);<br>   <span class="hljs-keyword">var</span> body = <span class="hljs-keyword">new</span> THREE.Mesh(bodyGeom, bodyMat);<br>   body.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">2</span>,<span class="hljs-number">-12</span>,<span class="hljs-number">0</span>);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(body);<br><br>   <span class="hljs-comment">// 飞行员的脸部</span><br>   <span class="hljs-keyword">var</span> faceGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<br>   <span class="hljs-keyword">var</span> faceMat = <span class="hljs-keyword">new</span> THREE.MeshLambertMaterial(&#123;color:Colors.pink&#125;);<br>   <span class="hljs-keyword">var</span> face = <span class="hljs-keyword">new</span> THREE.Mesh(faceGeom, faceMat);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(face);<br><br>   <span class="hljs-comment">// 飞行员的头发</span><br>   <span class="hljs-keyword">var</span> hairGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>);<br>   <span class="hljs-keyword">var</span> hairMat = <span class="hljs-keyword">new</span> THREE.MeshLambertMaterial(&#123;color:Colors.brown&#125;);<br>   <span class="hljs-keyword">var</span> hair = <span class="hljs-keyword">new</span> THREE.Mesh(hairGeom, hairMat);<br>   <span class="hljs-comment">// 调整头发的形状至底部的边界，这将使它更容易扩展。</span><br>   hair.geometry.applyMatrix(<span class="hljs-keyword">new</span> THREE.Matrix4().makeTranslation(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>));<br><br>   <span class="hljs-comment">// 创建一个头发的容器</span><br>   <span class="hljs-keyword">var</span> hairs = <span class="hljs-keyword">new</span> THREE.Object3D();<br><br>   <span class="hljs-comment">// 创建一个头发顶部的容器（这会有动画效果）</span><br>   <span class="hljs-keyword">this</span>.hairsTop = <span class="hljs-keyword">new</span> THREE.Object3D();<br><br>   <span class="hljs-comment">// 创建头顶的头发并放置他们在一个3*4的网格中</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">12</span>; i++)&#123;<br>       <span class="hljs-keyword">var</span> h = hair.clone();<br>       <span class="hljs-keyword">var</span> col = i%<span class="hljs-number">3</span>;<br>       <span class="hljs-keyword">var</span> row = Math.floor(i/<span class="hljs-number">3</span>);<br>       <span class="hljs-keyword">var</span> startPosZ = <span class="hljs-number">-4</span>;<br>       <span class="hljs-keyword">var</span> startPosX = <span class="hljs-number">-4</span>;<br>       h.position.<span class="hljs-keyword">set</span>(startPosX + row*<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, startPosZ + col*<span class="hljs-number">4</span>);<br>       <span class="hljs-keyword">this</span>.hairsTop.<span class="hljs-keyword">add</span>(h);<br>   &#125;<br>   hairs.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">this</span>.hairsTop);<br><br>   <span class="hljs-comment">// 创建脸庞的头发</span><br>   <span class="hljs-keyword">var</span> hairSideGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>);<br>   hairSideGeom.applyMatrix(<span class="hljs-keyword">new</span> THREE.Matrix4().makeTranslation(<span class="hljs-number">-6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>   <span class="hljs-keyword">var</span> hairSideR = <span class="hljs-keyword">new</span> THREE.Mesh(hairSideGeom, hairMat);<br>   <span class="hljs-keyword">var</span> hairSideL = hairSideR.clone();<br>   hairSideR.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">8</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">6</span>);<br>   hairSideL.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">8</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-6</span>);<br>   hairs.<span class="hljs-keyword">add</span>(hairSideR);<br>   hairs.<span class="hljs-keyword">add</span>(hairSideL);<br><br>   <span class="hljs-comment">// 创建后脑勺的头发</span><br>   <span class="hljs-keyword">var</span> hairBackGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>);<br>   <span class="hljs-keyword">var</span> hairBack = <span class="hljs-keyword">new</span> THREE.Mesh(hairBackGeom, hairMat);<br>   hairBack.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">-1</span>,<span class="hljs-number">-4</span>,<span class="hljs-number">0</span>)<br>   hairs.<span class="hljs-keyword">add</span>(hairBack);<br>   hairs.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">-5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>);<br><br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(hairs);<br><br>   <span class="hljs-keyword">var</span> glassGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>);<br>   <span class="hljs-keyword">var</span> glassMat = <span class="hljs-keyword">new</span> THREE.MeshLambertMaterial(&#123;color:Colors.brown&#125;);<br>   <span class="hljs-keyword">var</span> glassR = <span class="hljs-keyword">new</span> THREE.Mesh(glassGeom,glassMat);<br>   glassR.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>   <span class="hljs-keyword">var</span> glassL = glassR.clone();<br>   glassL.position.z = -glassR.position.z;<br><br>   <span class="hljs-keyword">var</span> glassAGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>);<br>   <span class="hljs-keyword">var</span> glassA = <span class="hljs-keyword">new</span> THREE.Mesh(glassAGeom, glassMat);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(glassR);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(glassL);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(glassA);<br><br>   <span class="hljs-keyword">var</span> earGeom = <span class="hljs-keyword">new</span> THREE.BoxGeometry(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">var</span> earL = <span class="hljs-keyword">new</span> THREE.Mesh(earGeom,faceMat);<br>   earL.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-6</span>);<br>   <span class="hljs-keyword">var</span> earR = earL.clone();<br>   earR.position.<span class="hljs-keyword">set</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(earL);<br>   <span class="hljs-keyword">this</span>.mesh.<span class="hljs-keyword">add</span>(earR);<br> &#125;<br><br><span class="hljs-comment">// 移动头发</span><br>Pilot.prototype.updateHairs = function()&#123;<br><br>   <span class="hljs-comment">// 获得头发</span><br>   <span class="hljs-keyword">var</span> hairs = <span class="hljs-keyword">this</span>.hairsTop.children;<br><br>   <span class="hljs-comment">// 根据 angleHairs 的角度更新头发</span><br>   <span class="hljs-keyword">var</span> l = hairs.length;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;l; i++)&#123;<br>       <span class="hljs-keyword">var</span> h = hairs[i];<br>       <span class="hljs-comment">// 每根头发将周期性的基础上原始大小的75%至100%之间作调整。</span><br>       h.scale.y = <span class="hljs-number">.75</span> + Math.cos(<span class="hljs-keyword">this</span>.angleHairs+i/<span class="hljs-number">3</span>)*<span class="hljs-number">.25</span>;<br>   &#125;<br>   <span class="hljs-comment">// 在下一帧增加角度</span><br>   <span class="hljs-keyword">this</span>.angleHairs += <span class="hljs-number">0.16</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>现在让头发动起来，只需要在循环函数里添加以下这句代码。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">airplane<span class="hljs-selector-class">.pilot</span><span class="hljs-selector-class">.updateHairs</span>();<br></code></pre></div></td></tr></table></figure><h2 id="制作海浪"><a href="#制作海浪" class="headerlink" title="制作海浪"></a>制作海浪</h2><hr><p>或许你已经注意到这大海不像真的大海那样，但更像被压路机压平的表面。</p><p>它需要一些海浪。这需要结合我们之前用到的两项技术来完成：</p><ul><li><p>操纵几何体的顶点就像我们处理飞机的驾驶舱那样</p></li><li><p>每个顶点执行循环移动就像我们移动飞行员的头发一样</p><p>为了制造海浪，我们将围绕圆柱体的初始位置对每个顶点旋转。通过给它们一个随机旋转速度和一个随机距离（旋转半径）。很抱歉，这里还是需要用到一些三角函数！</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p></li></ul><p>让我们对大海作出一些修改：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">Sea = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-keyword">var</span> geom = <span class="hljs-keyword">new</span> THREE.CylinderGeometry(<span class="hljs-number">600</span>,<span class="hljs-number">600</span>,<span class="hljs-number">800</span>,<span class="hljs-number">40</span>,<span class="hljs-number">10</span>);<br>   geom.applyMatrix(<span class="hljs-keyword">new</span> THREE.Matrix4().makeRotationX(-<span class="hljs-built_in">Math</span>.PI/<span class="hljs-number">2</span>));<br><br>   <span class="hljs-comment">// 重点：通过合并顶点，我们确保海浪的连续性</span><br>   geom.mergeVertices();<br><br>   <span class="hljs-comment">// 获得顶点</span><br>   <span class="hljs-keyword">var</span> l = geom.vertices.length;<br><br>   <span class="hljs-comment">// 创建一个新的数组存储与每个顶点关联的值：</span><br>   <span class="hljs-built_in">this</span>.waves = [];<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;l; i++)&#123;<br>       <span class="hljs-comment">// 获取每个顶点</span><br>       <span class="hljs-keyword">var</span> v = geom.vertices[i];<br><br>       <span class="hljs-comment">// 存储一些关联的数值</span><br>       <span class="hljs-built_in">this</span>.waves.push(&#123;<span class="hljs-attr">y</span>:v.y,<br>                        x:v.x,<br>                        z:v.z,<br>                        <span class="hljs-comment">// 随机角度</span><br>                        ang:<span class="hljs-built_in">Math</span>.random()*<span class="hljs-built_in">Math</span>.PI*<span class="hljs-number">2</span>,<br>                        <span class="hljs-comment">// 随机距离</span><br>                        amp:<span class="hljs-number">5</span> + <span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">15</span>,<br>                        <span class="hljs-comment">// 在0.016至0.048度/帧之间的随机速度</span><br>                        speed:<span class="hljs-number">0.016</span> + <span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">0.032</span><br>       &#125;);<br>   &#125;;<br>   <span class="hljs-keyword">var</span> mat = <span class="hljs-keyword">new</span> THREE.MeshPhongMaterial(&#123;<br>       color:Colors.blue,<br>       transparent:<span class="hljs-literal">true</span>,<br>       opacity:<span class="hljs-number">.8</span>,<br>       shading:THREE.FlatShading,<br>   &#125;);<br><br>   <span class="hljs-built_in">this</span>.mesh = <span class="hljs-keyword">new</span> THREE.Mesh(geom, mat);<br>   <span class="hljs-built_in">this</span>.mesh.receiveShadow = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 现在我们创建一个在每帧可以调用的函数，用于更新顶点的位置来模拟海浪。</span><br><br>Sea.prototype.moveWaves = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-comment">// 获取顶点</span><br>   <span class="hljs-keyword">var</span> verts = <span class="hljs-built_in">this</span>.mesh.geometry.vertices;<br>   <span class="hljs-keyword">var</span> l = verts.length;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;l; i++)&#123;<br>       <span class="hljs-keyword">var</span> v = verts[i];<br><br>       <span class="hljs-comment">// 获取关联的值</span><br>       <span class="hljs-keyword">var</span> vprops = <span class="hljs-built_in">this</span>.waves[i];<br><br>       <span class="hljs-comment">// 更新顶点的位置</span><br>       v.x = vprops.x + <span class="hljs-built_in">Math</span>.cos(vprops.ang)*vprops.amp;<br>       v.y = vprops.y + <span class="hljs-built_in">Math</span>.sin(vprops.ang)*vprops.amp;<br><br>       <span class="hljs-comment">// 下一帧自增一个角度</span><br>       vprops.ang += vprops.speed;<br>   &#125;<br><br>   <span class="hljs-comment">// 告诉渲染器代表大海的几何体发生改变</span><br>   <span class="hljs-comment">// 事实上，为了维持最好的性能</span><br>   <span class="hljs-comment">// Three.js 会缓存几何体和忽略一些修改</span><br>   <span class="hljs-comment">// 除非加上这句</span><br>   <span class="hljs-built_in">this</span>.mesh.geometry.verticesNeedUpdate=<span class="hljs-literal">true</span>;<br><br>   sea.mesh.rotation.z += <span class="hljs-number">.005</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>就好像我们对飞行员的头发做的那样，我们在循环函数中添加以下这句代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">sea<span class="hljs-selector-class">.moveWaves</span>();<br></code></pre></div></td></tr></table></figure><p>现在好好欣赏海浪吧！</p><h2 id="改善场景中的光源"><a href="#改善场景中的光源" class="headerlink" title="改善场景中的光源"></a>改善场景中的光源</h2><hr><p>在教程中的第一部分，我们已经创建了一些光源。但是想为场景添加更好的气氛，并使阴影更加柔和。为了实现它，我们打算使用环境光源。</p><p>在 createLight 函数中，我们添加以下几行代码：</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">// 环境光源修改场景中的全局颜色和使阴影更加柔和</span><br>ambientLight = <span class="hljs-keyword">new</span> THREE.AmbientLight(<span class="hljs-number">0xdc8874</span>, <span class="hljs-number">.5</span>);scene.<span class="hljs-keyword">add</span>(ambientLight);<br></code></pre></div></td></tr></table></figure><p>别再犹豫了！调节环境光源的颜色和强度，它会为你的场景增添独特的润色。</p><h2 id="一次平稳的飞行"><a href="#一次平稳的飞行" class="headerlink" title="一次平稳的飞行"></a>一次平稳的飞行</h2><hr><p>我们的小小飞机已经随着我们的鼠标移动。但它总感觉不像真正的飞行。当飞机改变它的飞行高度，如何改变它的位置和方向时更加流畅就完美了。在教程的最后一点，我们将实现它。</p><p>一个简单的方法就是让它移动到目标位置，通过添加一点点距离让它在每一帧与目标位置分离。</p><p>基本上，相关的代码会这样（这是一个通用的公式，不要马上添加到你的代码中）：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">currentPosition +&#x3D; (finalPosition - currentPosition)*fraction;<br></code></pre></div></td></tr></table></figure><p>更现实点来说，飞机旋转也可以根据运动的方向。如果飞机很快的向上移动，它应该很快地沿着逆时针方向旋转；如果飞机慢慢向下移动，它应该慢慢地沿着顺时针方向旋转；为了准确地实现它，我们应该把旋转比例值简单地分配给在目标和飞机位置之间的剩余距离。</p><p>在我们的代码里，updatePlane 函数需要像以下这样：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updatePlane</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-keyword">var</span> targetY = normalize(mousePos.y,-<span class="hljs-number">.75</span>,<span class="hljs-number">.75</span>,<span class="hljs-number">25</span>, <span class="hljs-number">175</span>);<br>   <span class="hljs-keyword">var</span> targetX = normalize(mousePos.x,-<span class="hljs-number">.75</span>,<span class="hljs-number">.75</span>,-<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>   <span class="hljs-comment">// 在每帧通过添加剩余距离的一小部分的值移动飞机</span><br>   airplane.mesh.position.y += (targetY-airplane.mesh.position.y)*<span class="hljs-number">0.1</span>;<br><br>   <span class="hljs-comment">// 剩余的距离按比例转动飞机</span><br>   airplane.mesh.rotation.z = (targetY-airplane.mesh.position.y)*<span class="hljs-number">0.0128</span>;<br>   airplane.mesh.rotation.x = (airplane.mesh.position.y-targetY)*<span class="hljs-number">0.0064</span>;<br><br>   airplane.propeller.rotation.x += <span class="hljs-number">0.3</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在飞机的移动看起来更加自然和真实。通过修改一下小数值，你可以使用飞机随着鼠标的移动响应速度更加快或更加慢。</p><p>看下我们场景中的最后一个阶段：<a href="http://tympanus.net/Tutorials/TheAviator/part2.html">第二部分 Demo</a></p><p>很好！！！</p><h2 id="接着要干嘛呢？"><a href="#接着要干嘛呢？" class="headerlink" title="接着要干嘛呢？"></a>接着要干嘛呢？</h2><hr><p>如果你看到这，你已经学会 Three.js 中的通用的一些技术了，能够让你创建您的第一个场景。现在你知道如何通过原始几何体创建物体，如何激活它们，以及如何设置一个场景中的光源，你已经知道如何改进你的对象的外观和运动，还有如何调整环境氛围。</p><p>下一步已经超出本文范围了，由于它涉及到更多复杂的技术，它是实现一个<a href="http://tympanus.net/Tutorials/TheAviator/">游戏</a>，大概思路是碰撞，收集点数，液位控制。下载源码，看看实现的思路；你会看到到目前为止你学到过的概念和一些高阶的知识点，你可以研究一下和玩一下。请注意这游戏已经优化了以便桌面使用。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>但愿，这篇教程帮助你熟悉Three.js和激发你实现属于你自己的项目。让我看到你的创造力；我希望看到你做出什么来~</p><p><a href="http://tympanus.net/Tutorials/TheAviator/">DEMO</a>   <a href="http://tympanus.net/Tutorials/TheAviator/TheAviator.zip">源码下载</a></p><p><strong>本文转自</strong> <a href="https://www.jianshu.com/p/92771817c73f">译文：一个采用 Three.js 的 3D 动画场景制作：飞行者</a>，作者：LeeChingYin</p><p><strong>英文原文链接：</strong><a href="https://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/">The Making of “The Aviator”: Animating a Basic 3D Scene with Three.js</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JS</tag>
      
      <tag>Three.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】恶俗古风自动生成器</title>
    <link href="/2020/03/gufeng/"/>
    <url>/2020/03/gufeng/</url>
    
    <content type="html"><![CDATA[<p>转自 <a href="https://www.jianshu.com/p/f893291674ca">传送门</a></p><p>原 po：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">关键词：朱砂 天下 杀伐 人家 韶华 风华 繁华 血染 墨染 白衣 素衣 嫁衣 倾城 孤城 空城 旧城<br> 旧人 伊人 心疼 春风 古琴 无情 迷离 奈何 断弦 焚尽 散乱 陌路 乱世 笑靥 浅笑 明眸 轻叹 烟火 <br>一生 三生 浮生 桃花 梨花 落花 烟花 离殇 情殇 爱殇 剑殇 灼伤 仓皇 匆忙 陌上 清商 焚香 墨香 <br>微凉 断肠 痴狂 凄凉 黄梁 未央 成双 无恙 虚妄 凝霜 洛阳 长安 江南 忘川 千年 纸伞 烟雨 回眸 <br>公子 红尘 红颜 红衣 红豆 红线 青丝 青史 青冢 白发 白首 白骨 黄土 黄泉 碧落 紫陌情深缘浅 情深不寿 <br>莫失莫忘 阴阳相隔 如花美眷 似水流年 眉目如画 曲终人散 繁华落尽 不诉离殇 一世长安<br>基本句式：<br><span class="hljs-number">1</span><span class="hljs-selector-class">.xx</span>，xx，xx了xx。 <br><span class="hljs-number">2</span><span class="hljs-selector-class">.xxxx</span>，xxxx，不过是一场xxxx。<br><span class="hljs-number">3</span>.你说xxxx，我说xxxx，最后不过xxxx。<br><span class="hljs-number">4</span><span class="hljs-selector-class">.xx</span>，xx，许我一场xxxx。<br><span class="hljs-number">5</span>一x一x一xx，半x半x半xx。<br><span class="hljs-number">6</span>.你说xxxx xxxx，后来xxxx xxxx。<br><span class="hljs-number">7</span><span class="hljs-selector-class">.xxxx</span>，xxxx，终不敌xxxx。<br>注意事项：<br><span class="hljs-number">1</span>.使用一个句式时一定要多重复几次，形成看起来异常高端的排比句。<br><span class="hljs-number">2</span>.［殇］这个字恶俗到爆，一定要多用。<br><span class="hljs-number">3</span>.不要随意用连词，就让这些动词名词形容词堆在一起，发生奇妙的反应。<br><span class="hljs-number">4</span>.填句子千万不能有逻辑性！填句子千万不能有逻辑性！填句子千万不能有逻辑性！重要的事情说三遍。<br>例句：<br><span class="hljs-number">1</span>.江南烟雨，陌上白衣，不过是一场情深缘浅。伊人回眸，繁华落尽，不过是一场烟火迷离。浮生微凉，白骨成双，不过是一场三世离殇。<br><span class="hljs-number">2</span>.旧城，未央，许我一场墨染清商。乱世，无情，许我一场白衣仓皇。忘川，千年，许我一场奈何成双。<br>end<br>【简直丧心病狂精神污染，po主去吐一吐。】<br></code></pre></div></td></tr></table></figure><p>考虑到，不要逻辑，那么最适合随机函数了。<br> 于是我们得到了一位 Ruby 古风诗人（共 22 行），他每秒都能生产一句古风句子</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-variable">@two_chars_words</span> = %w<span class="hljs-string">&quot;朱砂 天下 杀伐 人家 韶华 风华 繁华 血染 墨染 白衣 素衣 嫁衣 倾城 孤城 空城 旧城 旧人 伊人 心疼 春风 古琴 无情 迷离 奈何 断弦 焚尽 散乱 陌路 乱世 笑靥 浅笑 明眸 轻叹 烟火 一生 三生 浮生 桃花 梨花 落花 烟花 离殇 情殇 爱殇 剑殇 灼伤 仓皇 匆忙 陌上 清商 焚香 墨香 微凉 断肠 痴狂 凄凉 黄梁 未央 成双 无恙 虚妄 凝霜 洛阳 长安 江南 忘川 千年 纸伞 烟雨 回眸 公子 红尘 红颜 红衣 红豆 红线 青丝 青史 青冢 白发 白首 白骨 黄土 黄泉 碧落 紫陌&quot;</span><br><span class="hljs-variable">@four_chars_words</span> = %w<span class="hljs-string">&quot;情深缘浅 情深不寿 莫失莫忘 阴阳相隔 如花美眷 似水流年 眉目如画 曲终人散 繁华落尽 不诉离殇 一世长安&quot;</span><br><span class="hljs-variable">@sentence_model</span> = %w<span class="hljs-string">&quot;xx，xx，xx了xx。 xxxx，xxxx，不过是一场xxxx。 你说xxxx，我说xxxx，最后不过xxxx。 xx，xx，许我一场xxxx。 一x一x一xx，半x半x半xx。 你说xxxxxxxx，后来xxxxxxxx。 xxxx，xxxx，终不敌xxxx。&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sentence</span></span><br>  model = <span class="hljs-variable">@sentence_model</span>.sample(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>].clone<br>  <span class="hljs-keyword">while</span> model.<span class="hljs-keyword">include</span>?<span class="hljs-string">&#x27;xxxx&#x27;</span><br>    model.sub!(<span class="hljs-regexp">/xxxx/</span>, <span class="hljs-variable">@four_chars_words</span>.sample(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>])<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">while</span> model.<span class="hljs-keyword">include</span>?<span class="hljs-string">&#x27;xx&#x27;</span><br>    model.sub!(<span class="hljs-regexp">/xx/</span>, <span class="hljs-variable">@two_chars_words</span>.sample(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>])<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">while</span> model.<span class="hljs-keyword">include</span>?<span class="hljs-string">&#x27;x&#x27;</span><br>    model.sub!(<span class="hljs-regexp">/x/</span>, <span class="hljs-variable">@two_chars_words</span>.sample(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>][rand(<span class="hljs-number">0</span>..<span class="hljs-number">1</span>)])<br>  <span class="hljs-keyword">end</span><br>  puts model<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br>  get_sentence<br>  sleep <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><p>我们来欣赏一些例句：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">你说一世长安情深不寿，后来莫失莫忘莫失莫忘。<br>你说繁华落尽似水流年，后来阴阳相隔曲终人散。<br>心疼，繁华，许我一场一世长安。<br>空城，无恙，墨染了忘川。<br>白首，乱世，许我一场繁华落尽。<br>你说阴阳相隔，我说一世长安，最后不过一世长安。<br>如花美眷，情深缘浅，终不敌一世长安。<br>千年，红颜，旧城了灼伤。<br>你说如花美眷，我说情深缘浅，最后不过情深不寿。<br>莫失莫忘，曲终人散，不过是一场繁华落尽。<br>情深不寿，如花美眷，终不敌一世长安。<br>奈何，灼伤，离殇了一生。<br>奈何，空城，红豆了陌上。<br>轻叹，纸伞，梨花了梨花。<br>繁华落尽，曲终人散，不过是一场莫失莫忘。<br>你说一世长安眉目如画，后来如花美眷阴阳相隔。<br>你说情深缘浅，我说不诉离殇，最后不过如花美眷。<br>不诉离殇，不诉离殇，终不敌繁华落尽。<br>繁华落尽，一世长安，终不敌情深缘浅。<br>繁华落尽，莫失莫忘，不过是一场一世长安。<br>轻叹，明眸，明眸了白发。<br>似水流年，曲终人散，终不敌曲终人散。<br>你说阴阳相隔不诉离殇，后来眉目如画繁华落尽。<br>朱砂，嫁衣，许我一场繁华落尽。<br>你说不诉离殇，我说莫失莫忘，最后不过如花美眷。<br>一伤一首一明眸，半伞半繁半陌上。<br>你说繁华落尽眉目如画，后来情深缘浅眉目如画。<br>眉目如画，曲终人散，不过是一场如花美眷。<br>一灼一人一焚香，半迷半衣半散乱。<br>阴阳相隔，莫失莫忘，终不敌莫失莫忘。<br>白衣，红豆，青史了天下。<br>伊人，奈何，奈何了公子。<br>你说情深不寿，我说莫失莫忘，最后不过似水流年。<br>你说不诉离殇莫失莫忘，后来如花美眷情深不寿。<br>白发，浅笑，许我一场不诉离殇。<br>似水流年，莫失莫忘，终不敌似水流年。<br>情深不寿，一世长安，终不敌情深不寿。<br>一世长安，繁华落尽，终不敌莫失莫忘。<br>如花美眷，情深缘浅，不过是一场情深不寿。<br>你说繁华落尽如花美眷，后来如花美眷情深不寿。<br>黄泉，陌上，许我一场似水流年。<br>眉目如画，眉目如画，不过是一场曲终人散。<br>曲终人散，繁华落尽，终不敌曲终人散。<br>你说曲终人散，我说眉目如画，最后不过繁华落尽。<br></code></pre></div></td></tr></table></figure><p>其实句式是次要的，词才是关键。刚导入了一些句式，发现意外地合拍，比如「情殇的素衣，比人家不知道砂到灼伤去了。」「说现在已经黄土了，就把我心疼一番。」「陌里不觉城已年，未央岂是为无情。」「青为什么这么忘川，城和微凉红过多少次了啊」</p><p><em><strong>PS：原链接好像也是转载的，但是找不到原po了，等有时间自己整一个JS版的玩玩。</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>奇奇怪怪</category>
      
    </categories>
    
    
    <tags>
      
      <tag>奇奇怪怪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行内div之间有缝隙的解决办法</title>
    <link href="/2020/02/div-blank/"/>
    <url>/2020/02/div-blank/</url>
    
    <content type="html"><![CDATA[<p>如果把div的样式设置为<code>display:inline-block</code>并且标签换行的话，同一行内排列的div之间就会出现一道缝隙，不管你设置<code>margin:0;padding:0;border:0;</code>缝隙都不会消失。</p><p>就像这样：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload></p><p><strong>解决办法1</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;&#125;<br></code></pre></div></td></tr></table></figure><p>就是给div加上一条CSS<code>font-size: 0;</code></p><p>但是此时会出现新问题，就是div内的字体会消失，这个的解决办法就是在这个div内添加子元素，然后为子元素加font-size属性。</p><p><strong>解决办法2</strong></p><p>在每个div后面加上注释</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: blue;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            1--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: darkorange;&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            2--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: violet;&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            3--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: seagreen;&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            4--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: blue;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript OOP proto与prototype原型图</title>
    <link href="/2020/02/js-OOP/"/>
    <url>/2020/02/js-OOP/</url>
    
    <content type="html"><![CDATA[<p>1.prototype(函数的原型):函数才有prototype.prototype是一个对象，指向了当前构造函数的引用地址。</p><p>2._proto_(对象的原型对象)：所有对象都有_proto_属性。当用构造函数实例化一个对象时，会将新对象的_proto_属性指上构造函数的prototype.<br> zhangsan._proto_==Person.prototype<br> 所有对象，最终都会指向Object()的prototype</p><p><strong>【原型链】</strong><br> 1.通过构造函数 new出的对象，新对象的_proto_指向构造函数的prototype<br> 2.所有函数的_proto_指上Function的prototype<br> 3.非构造函数 new出的对象（{} new Object() 对象的prototype）的_proto_指向Object的prototype<br> 4.Object的_proto_指向null</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中this详解</title>
    <link href="/2020/02/js-this/"/>
    <url>/2020/02/js-this/</url>
    
    <content type="html"><![CDATA[<h2 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h2><p>1、谁最终调用函数，this指向谁，<strong>this指向永远只可能是对象</strong>，不可能是函数<br>this指向谁不取决于this写在哪，而且取决于函数在哪调用<br>this指向的对象，我们称之为函数的上下文context，也叫函数的调用者</p><p>2、<strong>this指向的规律</strong>（与<strong>函数调用的方式</strong>息息相关）<br>this指向的情况，取决于函数调用的方式有哪些：<br>①通过函数名（）直接调用:this指向window</p><p>②通过对象.函数名（）调用:this指向这个对象</p><p>③函数作为数组的一个元素，通过数组下标调用的：this指向这个数组</p><p>④函数作为window内置函数的回调函数调用：this指向window<br><strong>例如setInterval、setTimeout等</strong></p><p>⑤函数作为构造函数，用new关键字调用时，this指向新new出的对象</p><p><strong>不同情况举例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//通过函数名()直接调用,this指向window</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    func();<br>    <br><span class="hljs-comment">//通过对象.函数名（）调用:this指向这个对象</span><br>    <span class="hljs-comment">//狭义对象</span><br>    <span class="hljs-keyword">var</span> obj = &#123;<br>        name:<span class="hljs-string">&quot;obj&quot;</span>,<br>        func1 : func,<br>    &#125;; <span class="hljs-comment">//this 指向obj</span><br>    obj.func1();<br>    <span class="hljs-comment">//广义对象</span><br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>    &#125;  <span class="hljs-comment">//this指向div</span><br>        <br><span class="hljs-comment">//函数作为数组的一个元素，通过数组下标调用的：this指向这个数组</span><br>    <span class="hljs-keyword">var</span> arr = [func,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>    arr[<span class="hljs-number">0</span>](); <span class="hljs-comment">//this指向arr</span><br>        <br><span class="hljs-comment">//函数作为window内置函数的回调函数调用：this指向window</span><br>    <span class="hljs-built_in">setTimeout</span>(func,<span class="hljs-number">1000</span>);  <span class="hljs-comment">//this指向window</span><br>        <br><span class="hljs-comment">//函数作为构造函数，用new关键字调用时，this指向新new出的对象</span><br>    <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> func();  <span class="hljs-comment">//this指向新new出的obj</span><br>        <br>            <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS面向对象基础</title>
    <link href="/2020/02/js-object/"/>
    <url>/2020/02/js-object/</url>
    
    <content type="html"><![CDATA[<h2 id="OOP-面向对象编程-基础"><a href="#OOP-面向对象编程-基础" class="headerlink" title="OOP(面向对象编程)基础"></a>OOP(面向对象编程)基础</h2><p><strong>语言的分类：</strong><br>1、面向机器：汇编语言<br>2、面向过程：C语言<br>3、面向对象：java、C++、PHP等<br>面向过程与面向对象<strong>区别：</strong><br><strong>面向过程：</strong>专注于如何去解决一个问题的过程，编程特点是用一个个函数去实现过程操作，没有类与对象的概念<br><strong>面向对象：</strong>专注于由哪一个对象实体去解决这个问题，编程特点是出现了类，由类生成对象<br>面向对象的三大特征：<strong>继承、封装、多态</strong></p><h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><p><strong>类：</strong><br>一群有相同特征（属性）和行为（方法）的集合 ；</p><p><strong>对象</strong> ：<br>从类中，拿出的具有确定属性值和方法(行为)的个体</p><p><strong>类和对象的关系：</strong><br>类是对象的抽象化，对象是类的具体化；类是抽象的，对象是具体的<br>通俗来说： 类是一个抽象概念，表示具有相同属性和行为的集合，但是类仅仅表明这类群体具有相同的属性，但是没有具体的属性值,而对象是对类的属性进行具体赋值后，而得到的一个具体的个体</p><p><strong>使用类来创建对象</strong></p><p>1、创建一个类（构造函数），类名必须每个单词的首字母大写</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 类名(<span class="hljs-params">属性<span class="hljs-number">1</span></span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.属性 = 属性<span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.方法 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br>  <span class="hljs-comment">//this 指向即将调用当前构造函数的对象</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、同过类实例化出一个新的对象：（实例化对象时会执行构造函数）<br><code>var obj = new 类名(属性1value);</code><br>原构造函数中this指向新创建的obj对象<br>obj.方法(); 调用方法<br>obj.属性(); 调用属性</p><p><strong>两个重要的属性：</strong><br>1、constructor：<br>返回当前对象的构造函数，（只有对象才有，返回的是构造函数-类）<br><code>zhangsan.constructor == Person true</code><br>对象的constructor，位于__proto__原型对象上<br>2、instanceof<br>用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。<br><code>object(要检测的对象).constructor(某个构造函数)</code></p><h2 id="广义对象和狭义对象"><a href="#广义对象和狭义对象" class="headerlink" title="广义对象和狭义对象"></a>广义对象和狭义对象</h2><p>狭义对象：只有属性、方法，除此之外没有任何东西<br><code>var obj = &#123;&#125;; var obj = new Object();</code><br>广义对象：除了用字面量声明的基本数据类型之外，换句话说，能够添加属性与方法的变量，就是对象;<br><code>var s = &quot;1&quot;;</code> 不是对象，  <code>var s = new String(&quot;1&quot;);</code> 是对象</p><p><strong>【成员属性与成员方法】</strong><br>在构造函数中，通过”this.属性”声明，或者实例化出对象后，通过”对象.属性”追加的，都属于成员属性或成员方法，成员属性/方法,是属于实例化出的这个对象，通过”对象.属性”调用<br><strong>【静态属性与静态方法】</strong><br>通过”类名.属性名”，”类名.方法名”声明的变量，称为静态属性、静态方法，也叫类属性、类方法<br>成员属性是属于实例化出的对象的，会出现在新对象的属性上，类属性是属于构造函数自己的，不会出现在新对象属性上</p><h2 id="JS中的对象"><a href="#JS中的对象" class="headerlink" title="JS中的对象"></a>JS中的对象</h2><p>JS提供的内置对象有 array、boolean、number、string、date、math、regexp 。通常我们认为JavaScript的对象是键值对的容器。</p><p>虽然JavaScript 是面向对象的语言，但 JavaScript 不使用类。在 JavaScript 中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）。<br>JavaScript 基于 prototype，而不是基于类的。</p><p>JS创建新对象有两种不同的方法：</p><ul><li>定义并创建对象的实例</li><li>使用函数来定义对象，然后创建新的对象实例</li></ul><h3 id="直接创建对象实例"><a href="#直接创建对象实例" class="headerlink" title="直接创建对象实例"></a>直接创建对象实例</h3><p>有两种方式直接创建对象，一种是使用字符通过键值对的方式创建：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>    name:<span class="hljs-string">&quot;鲲虚菜&quot;</span>,<br>    age:<span class="hljs-number">20</span>,<br>    sex:<span class="hljs-string">&quot;男&quot;</span>,<br>    hobby:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;喜欢唱跳rap，打篮球&quot;</span>;<br>      &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>另一种是先创建对象，然后再添加属性和属性值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">person=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name=<span class="hljs-string">&quot;鲲虚菜&quot;</span>;<br>person.age=<span class="hljs-number">20</span>;<br>person.sex=<span class="hljs-string">&quot;男&quot;</span>;<br>person.hobby=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;喜欢唱跳rap，打篮球&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="通过函数构造对象"><a href="#通过函数构造对象" class="headerlink" title="通过函数构造对象"></a>通过函数构造对象</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">person</span>(<span class="hljs-params">name,age,sex,hobby</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name;<br>    <span class="hljs-built_in">this</span>.age=age;<br>    <span class="hljs-built_in">this</span>.sex=sex;<br>    <span class="hljs-built_in">this</span>.hobby=hobby;<br>    <br>    <span class="hljs-built_in">this</span>.changeHobby=changeHobby;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeHobby</span>(<span class="hljs-params">hobby</span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.hobby=hobby;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> xkc=<span class="hljs-keyword">new</span> person(<span class="hljs-string">&quot;鲲虚菜&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>xkc.changeHobby(<span class="hljs-string">&quot;喜欢唱跳rap，打篮球&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="对象属性和方法的访问"><a href="#对象属性和方法的访问" class="headerlink" title="对象属性和方法的访问"></a>对象属性和方法的访问</h3><p>对象属性访问方式有两种，一种是对象名.属性名，还有一种是对象名[属性名]，例：<code>person.name;</code>，<code>person[&quot;name&quot;];</code></p><h3 id="JS对象的循环遍历"><a href="#JS对象的循环遍历" class="headerlink" title="JS对象的循环遍历"></a>JS对象的循环遍历</h3><p>可以使用 for…in 语句循环遍历对象的属性。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击下面的按钮，循环遍历对象 &quot;person&quot; 的属性。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;showPerson()&quot;</span>&gt;</span>点击这里<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showPerson</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> x;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> txt=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> person = &#123;</span><br><span class="javascript">    name:<span class="hljs-string">&quot;鲲虚菜&quot;</span>,</span><br>    age:20,<br><span class="javascript">    sex:<span class="hljs-string">&quot;男&quot;</span>,</span><br>  &#125;;<br>  for (x in person)&#123;<br>     txt=txt + person[x];<br>  &#125;<br><span class="javascript">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML=txt;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JS对象属性的删除"><a href="#JS对象属性的删除" class="headerlink" title="JS对象属性的删除"></a>JS对象属性的删除</h3><p>对象无需手动删除，JS提供了一种主动释放对象内存的方法(即对象无用后，自动删除)<br>删除对象的属性：<code>delete 对象名.属性名</code></p><h2 id="对象是引用数据类型"><a href="#对象是引用数据类型" class="headerlink" title="对象是引用数据类型"></a>对象是引用数据类型</h2><p>也就是说，当new出一个对象时，这个obj变量存储的实际上是对象的地址，在对象赋值时，赋的也是地址。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-keyword">var</span> zhangsan = <span class="hljs-keyword">new</span> Person(); <span class="hljs-comment">//zhangsan对象实际存的是地址</span><br><span class="hljs-keyword">var</span> lisi = zhangsan; <span class="hljs-comment">//赋值时，实际是将zhangsan存的地址给了lisi</span><br>lisi.name = <span class="hljs-string">&quot;李四&quot;</span>; <span class="hljs-comment">//李四通过地址修改了对象</span><br><span class="hljs-built_in">console</span>.log(zhangsan.name); <span class="hljs-comment">//张三再通过地址打开对象，实际已经改变了</span><br></code></pre></div></td></tr></table></figure><p>引用数据类型，赋值时传递的是引用（地址）；基本数据类型，赋值时传递的是数据（值）</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript事件</title>
    <link href="/2020/02/js-event/"/>
    <url>/2020/02/js-event/</url>
    
    <content type="html"><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>JavaScript事件其实是发生在HTML元素上的事件，可以是浏览器行为，也可以是用户行为。</p><p>以下是 HTML 事件的实例：</p><ul><li>HTML 页面完成加载</li><li>HTML input 的内容被更改时</li><li>HTML 按钮被点击</li></ul><p>在事件触发时，可以用JavaScript 执行一些代码。<br>HTML 元素中可以添加事件属性，事件通常与函数结合使用，函数不会在事件发生前被执行 (如用户点击按钮)。<br>HTML的事件有鼠标事件、键盘事件、表单事件、动画事件、拖动事件等等很多种，更多事件可以去<a href="https://www.runoob.com/jsref/dom-obj-event.html">这里</a>查看。</p><p>下面说一下关于<strong>键盘事件</strong>的几个问题：</p><p>1、执行顺序：keydown-keypress-keyup<br>2、长按时，会循环执行keydown-keypress<br>3、有keydown事件，不一定有keyup事件（事件触发过程中，鼠标移走点击别的地方，可能没有keyup事件）<br>4、keypress事件只能捕获字母、数字、符号键（空格和回车也是），不能捕获功能键，<br>keydown和keyup基本可以捕获所有功能键（特殊除外）<br>keypress 区分大小写，keydown和keyup不区分；<br>keydown和keyup区分主键盘和小键盘，keypress不区分<br>keypress 只能捕获单键，keydown和keyup可以捕获组合键</p><p><strong>确定键盘触发按键的方法：</strong><br>在触发函数中，传入参数e，代表按键事件；<br>通过e.keyCode确认按键ASCII码值，进而确定按键；<br>兼容浏览器系统的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> evn = e||event; <span class="hljs-comment">//取到键盘事件</span><br><span class="hljs-keyword">var</span> code = evn.keyCode||evn.which||evn.charCode; <span class="hljs-comment">//取到按键编码</span><br></code></pre></div></td></tr></table></figure><h2 id="DOM模型与事件"><a href="#DOM模型与事件" class="headerlink" title="DOM模型与事件"></a>DOM模型与事件</h2><h3 id="DOM模型："><a href="#DOM模型：" class="headerlink" title="DOM模型："></a>DOM模型：</h3><p>在HTML中，每个元素都是一个节点，文档的所有节点组成了DOM 树，DOM又分为几个级别，分别是：</p><p>DOM1：DOM1 级由两个模块组成：DOM核心（DOM Core）和DOM HTML。</p><p>DOM2：<br>在DOM1的基础上扩充了:<br>1、鼠标和用户界面事件、范围、遍历等细分模块<br>2、通过对象接口增加了对CSS（Cascading Style Sheets，层叠样式表）的支持<br>3、DOM核心模块也经过扩展开始支持XML 命名空间</p><p>DOM3：<br>1、以统一方式加载和保存文档的方法——在DOM 加载和保存（DOM Load and Save）模块中定义<br> 2、验证文档的方法——在DOM 验证（DOM Validation）模块中定义<br> 3、开始支持XML 1.0 规范</p><p>DOM0：首先确定的是在DOM标准中并没有DOM 0级的。我们所说的DOM0事件模型其实就是指的是还没有DOM规范的时候给起 的一个名字，DOM0通过on来绑定事件；而DOM2通过addEventListener来绑定事件，DOM2有捕获、目标、冒泡三个事件阶段。</p><p>下面具体说一下DOM0事件模型和DOM2事件模型：</p><h3 id="DOM0事件模型"><a href="#DOM0事件模型" class="headerlink" title="DOM0事件模型"></a>DOM0事件模型</h3><p>DOM0模型分为两种：</p><p>一种是<strong>内联模型：</strong>直接将函数名作为html标签的某个事件属性的属性值<br>eg：<code>&lt;button onclick=&quot;func()&quot;&gt;&lt;/button&gt;</code><br><strong>缺点：</strong>违反了W3C关于html与JS分离的基本原则<br>另一种是<strong>脚本模型：</strong>在JS脚本中通过事件属性进行绑定<br>eg：<code>window.onload = function()&#123;&#125;</code><br>局限性：同一节点只能绑定一个同类型事件</p><h3 id="DOM2事件模型"><a href="#DOM2事件模型" class="headerlink" title="DOM2事件模型"></a>DOM2事件模型</h3><p><strong>1、添加事件绑定：</strong><br>IE10之前：<code>btn.attachEvent(&quot;onclick&quot;,函数);</code><br>其他浏览器：<code>btn.addEventListener(&quot;click&quot;,函数,true/false)</code><br>　　其中，第一个参数为事件<br>　　第三个参数：false为默认，表示事件冒泡；true表示事件捕获<br>兼容写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(btn.attachEvent)&#123;<br>　　btn.attachEvent();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>　　btn.addEventListener();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>优点：同一节点可以添加多个同类型事件的监听器</strong><br><strong>2、取消事件绑定：</strong><br>注：如果要取消事件绑定，那么在绑定事件时，<br>回调函数必须使用有名函数，而不能使用匿名函数，<br>因为在取消事件绑定时，需要传入函数名：<br><code>.removeEventListener(&quot;click&quot;,函数名)</code><br><code>.datachEvent(&quot;onclick&quot;,函数名)</code></p><p>由此可以看出，DOM0和DOM2一个很大区别是DOM0模型的元素绑定多个click最后只执行最后一个click，前面的会被后面的覆盖掉；而DOM2模型的元素绑定可以多个click，不会被覆盖，都会被执行。</p><h2 id="JS中的事件流"><a href="#JS中的事件流" class="headerlink" title="JS中的事件流"></a>JS中的事件流</h2><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>这里有六个套在一起的div，下面解释冒泡和捕获时会用到：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 600px;width: 600px;background-color: aqua;&quot;</span>&gt;</span>第一层<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 500px;width: 500px;background-color: blueviolet;&quot;</span>&gt;</span>第二层<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 400px;width: 400px;background-color: chartreuse;&quot;</span>&gt;</span>第三层<br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 300px;width: 300px;background-color: darkorange;&quot;</span>&gt;</span>第四层<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 200px;width: 200px;background-color: firebrick;&quot;</span>&gt;</span>第五层<br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100px;width: 100px;background-color: gray;&quot;</span>&gt;</span>第六层<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>1、<strong>事件冒泡：</strong><br>当某DOM元素触发某事件时，会从当前DOM元素开始，逐个触发其祖先元素的同类型事件，直到DOM根节点<br>DOM0模型均为事件冒泡，IE中使用<code>.attachEvent()</code>添加的事件均为冒泡；<br>其他浏览器使用<code>.addEventListener()</code>添加的事件当第三个参数为false时，为冒泡</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">var</span> div1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div1&#x27;</span>),<br>  div2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div2&#x27;</span>),<br>  div3 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div3&#x27;</span>),<br>  div4 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div4&#x27;</span>),<br>  div5 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div5&#x27;</span>),<br>  div6 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div6&#x27;</span>);<br>  div1.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第一层&quot;</span>)<br>  &#125;, <span class="hljs-literal">false</span>);<br>  div2.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第二层&quot;</span>)<br>  &#125;, <span class="hljs-literal">false</span>);<br>  div3.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第三层&quot;</span>)<br>  &#125;, <span class="hljs-literal">false</span>);<br>  div4.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第四层&quot;</span>)<br>  &#125;, <span class="hljs-literal">false</span>);<br>  div5.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第五层&quot;</span>)<br>  &#125;, <span class="hljs-literal">false</span>);<br>  div6.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第六层&quot;</span>)<br>  &#125;, <span class="hljs-literal">false</span>);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>点击中间最小的第六层div时，控制台打印出的结果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>2、<strong>事件捕获：</strong><br>当某DOM元素触发某事件时，会从DOM根节点开始，逐个触发器祖先元素的同类型事件，直到触发到当前元素为止<br>只有使用<code>.addEventListener()</code>添加事件并设置第三个参数为true时才为捕获</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">var</span> div1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div1&#x27;</span>),<br>  div2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div2&#x27;</span>),<br>  div3 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div3&#x27;</span>),<br>  div4 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div4&#x27;</span>),<br>  div5 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div5&#x27;</span>),<br>  div6 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;div6&#x27;</span>);<br>  div1.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第一层&quot;</span>)<br>  &#125;, <span class="hljs-literal">true</span>);<br>  div2.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第二层&quot;</span>)<br>  &#125;, <span class="hljs-literal">true</span>);<br>  div3.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第三层&quot;</span>)<br>  &#125;, <span class="hljs-literal">true</span>);<br>  div4.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第四层&quot;</span>)<br>  &#125;, <span class="hljs-literal">true</span>);<br>  div5.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第五层&quot;</span>)<br>  &#125;, <span class="hljs-literal">true</span>);<br>  div6.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;第六层&quot;</span>)<br>  &#125;, <span class="hljs-literal">true</span>);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>点击中间最小的第六层div时，控制台打印出的结果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>3、<strong>阻断事件冒泡\捕获：</strong><br>阻断捕获只会触发根节点；<br>IE浏览器中将<code>e.cancleBubble</code>属性设为<code>true</code>，<br>其他浏览器调用<code>e.stopPropagation();</code>方法<br>兼容写法:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myParagraphEventHandler</span>(<span class="hljs-params">e</span>) </span>&#123;<br>　　e = e || <span class="hljs-built_in">window</span>.event;<br>　　<span class="hljs-keyword">if</span> (e.stopPropagation) &#123;<br>　　e.stopPropagation(); <span class="hljs-comment">//IE以外 </span><br>　　&#125; <span class="hljs-keyword">else</span> &#123;<br>　　e.cancelBubble = <span class="hljs-literal">true</span>; <span class="hljs-comment">//IE </span><br>　　&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>4、取消事件的默认行为：</strong><br>IE浏览器中：将<code>e.returnValue</code>属性设为<code>false</code>；<br>其他浏览器：调用<code>e.preventDefault();</code>方法<br>兼容写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eventHandler</span>(<span class="hljs-params">e</span>) </span>&#123;<br>　　e = e || <span class="hljs-built_in">window</span>.event;<br>　　<span class="hljs-comment">// 防止默认行为 </span><br>　　<span class="hljs-keyword">if</span> (e.preventDefault) &#123;<br>　　e.preventDefault(); <span class="hljs-comment">//IE以外 </span><br>　　&#125; <span class="hljs-keyword">else</span> &#123;<br>　　e.returnValue = <span class="hljs-literal">false</span>; <span class="hljs-comment">//IE </span><br>　　&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考链接：</p><p><a href="https://www.jianshu.com/p/eee5e4a54048">DOM分级详解</a></p><p><a href="https://www.cnblogs.com/greedymonkey/p/6704249.html">JS中的事件</a></p><p><a href="https://www.cnblogs.com/soyxiaobi/p/9498357.html">彻底弄懂JS事件委托的概念和作用</a></p><p><a href="https://www.jb51.net/article/99094.htm">DOM 事件的深入浅出（一）</a></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页移动开发的一些知识</title>
    <link href="/2020/02/mobile-develop/"/>
    <url>/2020/02/mobile-develop/</url>
    
    <content type="html"><![CDATA[<h2 id="关于像素的部分基础知识"><a href="#关于像素的部分基础知识" class="headerlink" title="关于像素的部分基础知识"></a>关于像素的部分基础知识</h2><p>移动网页开发中提到的像素主要有三种：CSS像素、物理像素、设备无关像素</p><ul><li>设备物理像素：设备上一个像素点</li><li>设备无关像素：可以与物理像素通过dpr转换。当dpr为1时，设备无关像素=设备物理像素。</li><li>CSS像素：CSS中使用的抽象概念。当页面没有缩放时，CSS像素=设备无关像素。</li></ul><p>其中，dpr（设备像素比） = 物理像素/设备无关像素（逻辑像素宽度*倍率 = 物理像素宽度）</p><h2 id="Viewport"><a href="#Viewport" class="headerlink" title="Viewport"></a>Viewport</h2><h3 id="什么是-Viewport"><a href="#什么是-Viewport" class="headerlink" title="什么是 Viewport?"></a>什么是 Viewport?</h3><p>viewport 是用户网页的可视区域。viewport 翻译为中文可以叫做”视区、视口”。</p><p>手机浏览器是把页面放在一个虚拟的”窗口”（viewport）中，通常这个虚拟的”窗口”（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。</p><h3 id="设置Viewport"><a href="#设置Viewport" class="headerlink" title="设置Viewport"></a>设置Viewport</h3><ul><li>width：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width （为设备的宽度，单位为缩放为 100% 时的 CSS 的像素）。</li><li>height：和 width 相对应，指定高度。</li><li>initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。initial-scale=1.0：默认缩放比为1（目的：让CSS像素=设备无关像素）</li><li>maximum-scale：允许用户缩放到的最大比例。</li><li>minimum-scale：允许用户缩放到的最小比例。</li><li>user-scalable：用户是否可以手动缩放。（貌似在iOS10中的sarifi浏览器失效）</li></ul><p>一个常用的针对移动网页优化过的页面的 viewport meta 标签大致如下：</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1,user-scalable=no&quot;/&gt;</code></p><img src="https://images2015.cnblogs.com/blog/1118132/201703/1118132-20170321091710799-377512174.png" srcset="/img/loading.gif" lazyload class="viewport" width="650" height="350" title="viewport 的属性具体介绍" alt="viewport 的属性具体介绍"><center>viewport 的属性具体介绍</center><p>附上一个比较的详细viewport讲解：<a href="https://www.runoob.com/w3cnote/viewport-deep-understanding.html">viewport 深入理解</a></p><h2 id="其他移动端开发可能会用到标签设置"><a href="#其他移动端开发可能会用到标签设置" class="headerlink" title="其他移动端开发可能会用到标签设置"></a>其他移动端开发可能会用到标签设置</h2><p><strong>禁止设备将疑似手机号/邮箱,进行识别。取消点击拨打电话等事件</strong></p><p><code>&lt;meta name=&quot;format-detection&quot;content=&quot;telephone=no,email=no&quot;/&gt;</code></p><p><strong>iOS 添加到主屏幕时，WebAPP的标题</strong></p><p><code>&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;我的第一个WebAPP&quot;&gt;</code></p><p><strong>iOS 添加到主屏幕时，WebAPP的icon图标</strong></p><p><code>&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;图片链接地址&quot; /&gt;</code></p><p><strong>iOS 添加到主屏幕时，启用WebAPP全屏模式，删除顶端地址栏和底部工具栏</strong></p><p><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</code></p><p><strong>iOS 添加到主屏幕时，WebAPP顶部状态的样式</strong><br>可选值：<br>black：黑色；default：默认值，白色；black-translucent(半透明)：网页内容充满整个屏幕，顶部状态栏会遮挡网页头部。</p><p><code>&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot;&gt;</code></p><p><strong>设置浏览器使用最新的IE和chrome去编译</strong> </p><p>不是手机端专用，PC网页一般也需要设置</p><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</code></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用GitHub+JsDelivr+PicGo实现免费图床</title>
    <link href="/2020/01/github-jsdelivr-picgo/"/>
    <url>/2020/01/github-jsdelivr-picgo/</url>
    
    <content type="html"><![CDATA[<p>前言<br>微博开始防盗链；各路小众图床晚上基本慢，还有挂掉的风险；大厂图床呢，又是要备案，要实名什么的，还有各种限制，可能还贵。</p><p>但是，由于一些众所周知的原因，GitHub 在大陆的访问速度一直不是很理想，如果你也像我一样将博客，图床等放在 GitHub 托管的话，很可能会有同学投诉访问速度，特别是初次打开的时候，速度着实堪忧。那有没有什么低成本的方案，来加速我们的网站打开速度呢？当然是有的。</p><p>CDN 简介<br>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。<br>—— Wikipedia<br>简而言之就是让服务器距离大陆较远的 GitHub ，将托管在那里的静态资源缓存到一个近一点的服务器，从而加快访问。</p><p>看了这样的解释你应该能够理解，CDN 虽然能缓解互联压力，可也是要耗费一定的资源的，从而市面上的 CDN 大多是收费的。Cloudflare 虽然有免费 CDN ，可是国内节点致开放给专业版用户使用，价格偏高，而海外的节点又类似负优化，可能还会降低速度。</p><p>jsDelivr<br>jsDelivr是一款公共免费 CDN ，调用多家 CDN 保证全球服务质量、拥有多层缓存和灾后保障 SLA 100 。也是为数不多的有 ICP 备案，提供许多中国节点的海外 CDN 服务商。</p><p>有搜索引擎，支持一键复制文件 URL 和标签，支持分发 NPM、GitHub、WordPress SVN 的文件</p>]]></content>
    
    
    <categories>
      
      <category>GitHub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 常见循环、分支、嵌套练习</title>
    <link href="/2020/01/js-practice/"/>
    <url>/2020/01/js-practice/</url>
    
    <content type="html"><![CDATA[<h2 id="数字判断："><a href="#数字判断：" class="headerlink" title="数字判断："></a>数字判断：</h2><h3 id="给出一个不低于两位的数字，判断是否是正整数，如果是将此数字反向输出"><a href="#给出一个不低于两位的数字，判断是否是正整数，如果是将此数字反向输出" class="headerlink" title="给出一个不低于两位的数字，判断是否是正整数，如果是将此数字反向输出"></a>给出一个不低于两位的数字，判断是否是正整数，如果是将此数字反向输出</h3><p><strong>思路：</strong><br>判断是否为一个数字：Number(num)结果不为NaN，说明为数字<br>判断一个数字为正数：Number(num)&gt;0为正数<br>判断一个数字为整数：parseInt(num)==parseFloat(num)，不是小数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>  num=prompt(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//        Number(num)&gt;0  肯定为正数</span><br><span class="hljs-comment">//        parseInt(num)==parseFloat(num)  肯定不是小数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>(num)&gt;<span class="hljs-number">0</span>&amp;&amp;<span class="hljs-built_in">parseInt</span>(num)==<span class="hljs-built_in">parseFloat</span>(num)) &#123;<br>     <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">while</span> (num&gt;<span class="hljs-number">0</span>)&#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">parseInt</span>(num%<span class="hljs-number">10</span>);<br>  <span class="hljs-built_in">document</span>.write(a);<br>  num=<span class="hljs-built_in">parseInt</span>(num/<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="日期判断："><a href="#日期判断：" class="headerlink" title="日期判断："></a>日期判断：</h2><h3 id="判断是否是闰年"><a href="#判断是否是闰年" class="headerlink" title="判断是否是闰年"></a>判断是否是闰年</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> year=prompt(<span class="hljs-string">&quot;输入年份&quot;</span>);<br><span class="hljs-built_in">document</span>.write(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>?<span class="hljs-string">&quot;是闰年&quot;</span>:<span class="hljs-string">&quot;不是闰年&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="输入年月日，判断这一天是这一年的第几天"><a href="#输入年月日，判断这一天是这一年的第几天" class="headerlink" title="输入年月日，判断这一天是这一年的第几天"></a>输入年月日，判断这一天是这一年的第几天</h3><p>下面两种方法都假设当年是平年，即2月28天。</p><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> year = <span class="hljs-built_in">parseInt</span>(prompt(<span class="hljs-string">&quot;请输入年份&quot;</span>));<br><span class="hljs-keyword">var</span> month = <span class="hljs-built_in">parseInt</span>(prompt(<span class="hljs-string">&quot;请输入月份&quot;</span>));<br><span class="hljs-keyword">var</span> day = <span class="hljs-built_in">parseInt</span>(prompt(<span class="hljs-string">&quot;请输入日期&quot;</span>));<br>  <span class="hljs-comment">/*假设都是平年，2月28天*/</span><br><span class="hljs-keyword">var</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;month;i++)&#123;<br>  <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>||i==<span class="hljs-number">3</span>||i==<span class="hljs-number">5</span>||i==<span class="hljs-number">7</span>||i==<span class="hljs-number">8</span>||i==<span class="hljs-number">10</span>||i==<span class="hljs-number">12</span>)&#123;<br>    sum+=<span class="hljs-number">31</span>;<br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">4</span>||i==<span class="hljs-number">6</span>||i==<span class="hljs-number">9</span>||i==<span class="hljs-number">11</span>)&#123;<br>    sum+=<span class="hljs-number">30</span>;<br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">2</span>)&#123;<br>    sum+=<span class="hljs-number">28</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">if</span>((year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>)&amp;&amp;month&gt;<span class="hljs-number">2</span>)&#123;<br>  sum+=(day+<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  sum+=day;<br>&#125;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;您输入的&quot;</span>+year+<span class="hljs-string">&quot;-&quot;</span>+month+<span class="hljs-string">&quot;-&quot;</span>+day+<span class="hljs-string">&quot;为该年的第&quot;</span>+sum+<span class="hljs-string">&quot;天&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>方法二：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> year = <span class="hljs-built_in">parseInt</span>(prompt(<span class="hljs-string">&quot;请输入年份&quot;</span>));<br><span class="hljs-keyword">var</span> month = <span class="hljs-built_in">parseInt</span>(prompt(<span class="hljs-string">&quot;请输入月份&quot;</span>));<br><span class="hljs-keyword">var</span> day = <span class="hljs-built_in">parseInt</span>(prompt(<span class="hljs-string">&quot;请输入日期&quot;</span>));<br>    <span class="hljs-comment">/*假设都是平年，2月28天*/</span><br><span class="hljs-keyword">var</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span> (month-<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:          <span class="hljs-comment">//每个case后没有break，可以实现天数的累加</span><br>      sum+=<span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>      sum+=<span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>      sum+=<span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>      sum+=<span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>      sum+=<span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      sum+=<span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      sum+=<span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      sum+=<span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      sum+=<span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      sum+=<span class="hljs-number">28</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      sum+=<span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>      sum+=<span class="hljs-number">0</span>;<br>&#125;         <br><span class="hljs-keyword">if</span>((year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>)&amp;&amp;month&gt;<span class="hljs-number">2</span>)&#123;<br>    sum+=(day+<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    sum+=day;<br>&#125;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;您输入的&quot;</span>+year+<span class="hljs-string">&quot;-&quot;</span>+month+<span class="hljs-string">&quot;-&quot;</span>+day+<span class="hljs-string">&quot;为该年的第&quot;</span>+sum+<span class="hljs-string">&quot;天&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="图形输出："><a href="#图形输出：" class="headerlink" title="图形输出："></a>图形输出：</h2><h3 id="利用嵌套循环输出以下图形："><a href="#利用嵌套循环输出以下图形：" class="headerlink" title="利用嵌套循环输出以下图形："></a>利用嵌套循环输出以下图形：</h3><table><thead><tr><th align="center">长方形</th><th align="center">直角三角形</th><th align="center">平行四边形</th><th align="center">菱形</th></tr></thead><tbody><tr><td align="center">****<br />****<br />****<br />****<br />****<br /></td><td align="center">*<br/>**<br/>***<br/>****<br/>*****</td><td align="center">*****<br/>&nbsp;*****<br/>&nbsp;&nbsp;*****<br/>&nbsp;&nbsp;&nbsp;*****<br/>&nbsp;&nbsp;&nbsp;&nbsp;*****</td><td align="center">&nbsp;&nbsp;&nbsp;&nbsp;*<br/>&nbsp;&nbsp;&nbsp;***<br/>&nbsp;&nbsp;*****<br/>*******<br/>&nbsp;&nbsp;*****<br/>&nbsp;&nbsp;&nbsp;***<br/>&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr></tbody></table><p><strong>思路：</strong><br>1、确定图形一共几行，即为外层的循环次数<br>2、确定每行有几种元素，代表有几个内层循环<br>3、确定每种元素的个数，即为每个内层循环的次数</p><p><strong>通常，找出每种元素个数，与行号的关系式，即为当前内层循环的最大值（从1开始循环）</strong></p><p><strong>长方形：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;长方形&quot;</span>+<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++) &#123;<br>  <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">4</span>;j++) &#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;*&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>直角三角形：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;三角形&quot;</span>+<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++) &#123;<br>  <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=i;j++) &#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;*&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>平行四边形：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;平行四边形&quot;</span>+<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++) &#123;<br>  <span class="hljs-keyword">for</span> (n=<span class="hljs-number">1</span>;n&lt;=i;n++) &#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">5</span>;j++) &#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;*&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>菱形：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;菱形&quot;</span>+<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++) &#123;<br>  <span class="hljs-comment">//输出空格</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">4</span>-i;k++)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;span style=&#x27;display: inline-block;width: 7px;&#x27;&gt;&lt;/span&gt;&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">//输出*</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>*i-<span class="hljs-number">1</span>;j++)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;*&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++) &#123;<br>  <span class="hljs-comment">//输出空格</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k=<span class="hljs-number">1</span>;k&lt;=i;k++)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;span style=&#x27;display: inline-block;width: 7px;&#x27;&gt;&lt;/span&gt;&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">//输出*</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">7</span>-<span class="hljs-number">2</span>*i;j++)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;*&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="打印数字等边三角形："><a href="#打印数字等边三角形：" class="headerlink" title="打印数字等边三角形："></a>打印数字等边三角形：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;121<br>&nbsp;&nbsp;&nbsp;&nbsp;12321<br>&nbsp;&nbsp;&nbsp;1234321<br>&nbsp;&nbsp;123454321<br>12345654321</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4</span>;i++)&#123;<br>  <span class="hljs-comment">// 空格</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">4</span>-i;k++)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;span style=&#x27;display: inline-block;width: 8px;&#x27;&gt;&lt;/span&gt;&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">// 递增</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>    <span class="hljs-built_in">document</span>.write(n);<br>    n++;<br>  &#125;<br>  n-=<span class="hljs-number">2</span>;<br>  <span class="hljs-comment">// 递减</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> m=<span class="hljs-number">1</span>;m&lt;=i-<span class="hljs-number">1</span>;m++)&#123;<br>    <span class="hljs-built_in">document</span>.write(n);<br>    n--;<br>  &#125;<br>  <span class="hljs-comment">// 换行</span><br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br> &#125;<br></code></pre></div></td></tr></table></figure><h3 id="九九乘法表："><a href="#九九乘法表：" class="headerlink" title="九九乘法表："></a>九九乘法表：</h3><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;table width=&#x27;700&#x27;&gt;&quot;</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>)<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+i+<span class="hljs-string">&quot;*&quot;</span>+j+<span class="hljs-string">&quot;=&quot;</span>+i*j+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>)<br>&#125;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;/table&gt;&quot;</span>)<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&quot;</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub-hosts</title>
    <link href="/2020/01/github-hosts/"/>
    <url>/2020/01/github-hosts/</url>
    
    <content type="html"><![CDATA[<h3 id="修改hosts访问GH"><a href="#修改hosts访问GH" class="headerlink" title="修改hosts访问GH"></a>修改hosts访问GH</h3><p>GitHub有时候不知道为什么会抽风打不开，为了能愉快地上去瞎逛，我特意在此记下通过修改hosts来打开网站：</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog"><br># GitHub Start<br><span class="hljs-number">13.250.177.223</span> github.com<br><span class="hljs-number">192.30.253.112</span> github.com<br><span class="hljs-number">192.30.253.119</span> gist.github.com<br><span class="hljs-number">151.101.100.133</span> assets-cdn.github.com<br><span class="hljs-number">151.101.100.133</span> raw.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> gist.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> cloud.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> camo.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars0.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars1.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars2.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars3.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars4.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars5.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars6.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars7.githubusercontent.com<br><span class="hljs-number">151.101.100.133</span> avatars8.githubusercontent.com<br><br># GitHub End<br></code></pre></div></td></tr></table></figure><p><strong>PS：</strong>有时候上面的hosts也不好用，要自己现去查一下网站的IP，然后把原来的注释掉添加上新查的。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong>gist.github.com 被墙无法访问解决办法</strong><br>windows下 打开C:\Windows\System32\drivers\etc\hosts文件<br>编辑器打开，在最后行添加192.30.253.118 gist.github.com</p><h3 id="另一个不记得出处的方法"><a href="#另一个不记得出处的方法" class="headerlink" title="另一个不记得出处的方法"></a>另一个不记得出处的方法</h3><h4 id="2-1-复制下面的内容"><a href="#2-1-复制下面的内容" class="headerlink" title="2.1 复制下面的内容"></a>2.1 复制下面的内容</h4><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog"># GitHub520 Host Start<br><span class="hljs-number">185.199.108.154</span>               github.githubassets.com<br><span class="hljs-number">199.232.68.133</span>                camo.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                github.map.fastly.net<br><span class="hljs-number">199.232.69.194</span>                github.global.ssl.fastly.net<br><span class="hljs-number">140.82.112.3</span>                  github.com<br><span class="hljs-number">140.82.114.5</span>                  api.github.com<br><span class="hljs-number">199.232.68.133</span>                raw.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                user-images.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                favicons.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                avatars5.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                avatars4.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                avatars3.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                avatars2.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                avatars1.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>                avatars0.githubusercontent.com<br># Star me GitHub url: https://github.com/521xueweihan/GitHub520<br># GitHub520 Host End<br></code></pre></div></td></tr></table></figure><p>上面内容会自动定时更新，保证最新有效。数据更新时间：2020-08-14T08:37:38+08:00（内容无变动不会更新）</p><h4 id="2-1-手动方式"><a href="#2-1-手动方式" class="headerlink" title="2.1 手动方式"></a>2.1 手动方式</h4><h5 id="2-1-1-修改-hosts-文件"><a href="#2-1-1-修改-hosts-文件" class="headerlink" title="2.1.1 修改 hosts 文件"></a>2.1.1 修改 hosts 文件</h5><p>hosts 文件在每个系统的位置不一，详情如下：</p><ul><li>Windows 系统：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux 系统：<code>/etc/hosts</code></li><li>Mac（苹果电脑）系统：<code>/etc/hosts</code></li><li>Android（安卓）系统：<code>/system/etc/hosts</code></li><li>iPhone（iOS）系统：<code>/etc/hosts</code></li></ul><p>修改方法，把第一步的内容复制到文本末尾：</p><ol><li>Windows 使用记事本。</li><li>Linux、Mac 使用 Root 权限：<code>sudo vi /etc/hosts</code>。</li><li>iPhone、iPad 须越狱、Android 必须要 root。</li></ol><h5 id="2-1-2-激活生效"><a href="#2-1-2-激活生效" class="headerlink" title="2.1.2 激活生效"></a>2.1.2 激活生效</h5><p>大部分情况下是直接生效，如未生效可尝试下面的办法，刷新 DNS：</p><ol><li>Windows：在 CMD 窗口输入：<code>ipconfig /flushdns</code></li><li>Linux 命令：<code>sudo rcnscd restart</code></li><li>Mac 命令：<code>sudo killall -HUP mDNSResponder</code></li></ol><p>Tips： 上述方法无效可以尝试重启机器。</p><h4 id="2-2-自动方式"><a href="#2-2-自动方式" class="headerlink" title="2.2 自动方式"></a>2.2 自动方式</h4><p>Tip：推荐 <a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a> 工具管理 hosts</p><p>以 SwitchHosts 为例，看一下怎么使用的，配置参考下面：</p><ul><li>Title: 随意</li><li>Type: <code>Remote</code></li><li>URL: <code>https://gitee.com/xueweihan/codes/6g793pm2k1hacwfbyesl464/raw?blob_name=GitHub520.yml</code></li><li>Auto Refresh: 最好选 <code>1 hour</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS预处理语言less和Sass基础教程</title>
    <link href="/2020/01/less-sass/"/>
    <url>/2020/01/less-sass/</url>
    
    <content type="html"><![CDATA[<p>因为CSS是一门描述性语言，代码中基本没有逻辑性，所以会存在大量重复代码，不便于维护和扩展。因此CSS预处理器就诞生了：less和Sass都是CSS的预处理语言，先用预编译语言进行样式设计，然后再进行编译，生成CSS文件来使用，这些语言的出现让CSS编写起来更加方便快捷，更易于维护。</p><h2 id="less的基础教程"><a href="#less的基础教程" class="headerlink" title="less的基础教程"></a>less的基础教程</h2><p>Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。<br>Less 可以运行在 Node 或浏览器端。</p><h3 id="less变量"><a href="#less变量" class="headerlink" title="less变量"></a>less变量</h3><p>声明变量：使用@变量名: 变量值<br>使用变量：@变量名<br>举例：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less">$length: 100px;<br>$color: red;<br></code></pre></div></td></tr></table></figure><p><strong>less中变量的类型：</strong></p><ul><li>数字类：10px；10</li><li>字符串：<br>​        有引号字符串：”red”<br>​        无引号字符串：哈哈</li><li>颜色类：<br>  颜色名称，如red；<br>  RGB格式，rgb(0,0,0)；<br>  十六进制，如#ffffff</li><li>值列表类型：用逗号或空格分隔</li></ul><p><strong>变量使用原则</strong>：多次频繁出现的值设为变量，还有需要修改的值也可设为变量</p><p> <strong>混合（Mixins）：</strong></p><ul><li>无参混合<br>声明：.name{} ；选择器中调用：.name</li><li>带参混合<br>无默认值声明：.name(@param){} 调用：.name(paramValue);<br>有默认值声明： .name(@param:value){} 调用：.name(paramValue);paramValue可省略</li></ul><p>如果声明时没有默认值，则调用时必须赋值，否则报错<br>无参混合会在css中编译出同名的class选择器，有参的不会</p><p><strong>示例</strong>：</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-class">.class</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-variable">@mixin</span> hong&#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br>#div1&#123;<br>    width: $length;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-variable">@extend</span>.class;<br>    border-#&#123;$left&#125;:10px solid blue ;<br>    <span class="hljs-variable">@include</span> hong;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="less匹配模式"><a href="#less匹配模式" class="headerlink" title="less匹配模式"></a>less匹配模式</h3><p>使用混合进行匹配，类似if结构：<br><strong>声明：</strong>.name(条件一，参数){} .name(条件二，参数){} .name(条件三，参数){}<br><strong>调用：</strong>.name(条件值，参数值)<br><strong>匹配规则</strong>：根据调用时提供的条件值，寻找与之匹配的Mixins执行，其中@_表示永远需要执行的部分</p><h3 id="less的运算与嵌套"><a href="#less的运算与嵌套" class="headerlink" title="less的运算与嵌套"></a>less的运算与嵌套</h3><p><strong>LESS中的运算</strong>：<br>使用运算符+、-、/、* 计算，可以带单位也可不带<br> 进行颜色（十六进制形式）运算时，红绿蓝分开计算，即每组两位之间可以进位，组间不可进位<br><strong>LESS中的嵌套</strong>：<br>保留html中的代码结构，嵌套默认是后代选择器，如果需要子代选择器，则在子代前面加&gt;<br>&amp;表示上一层，&amp;:hover表示上一层的hover事件，&amp;主要用来进行伪类事件的设置</p><p><strong>代码嵌套示例</strong>：</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">section</span>&#123;<br>    <span class="hljs-selector-tag">p</span>&#123;<br>        <span class="hljs-attribute">color</span>: red;<br>        <span class="hljs-attribute">background-color</span>: cyan;<br>    &#125;<br>    <span class="hljs-selector-tag">ul</span>&#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">list-style</span>: none;<br>        <span class="hljs-selector-tag">li</span>&#123;<br>            <span class="hljs-attribute">float</span>: left;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>            <span class="hljs-attribute">border</span>: &#123;<br>                <span class="hljs-attribute">color</span>: green;<br>                style:solid;<br>                <span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;<br>            &#125;;<br>            <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>                <span class="hljs-attribute">background-color</span>: yellow;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="less注释方式"><a href="#less注释方式" class="headerlink" title="less注释方式"></a>less注释方式</h3><p>less的注释方式有两种：<br>一种是使用双斜杠（//）来注释，使用这种方式注释的内容不会被编译<br>另一种是使用/**/，但可以被编译</p><h2 id="Sass的基础教程"><a href="#Sass的基础教程" class="headerlink" title="Sass的基础教程"></a>Sass的基础教程</h2><blockquote><p>世界上最成熟、最稳定、最强大的专业级CSS扩展语言</p></blockquote><p>sass是最早的css预处理语言，有比less更为强大的功能。但因其一开始的缩进式语法并不能被开发者们接受，所以使用率不高，不过由于其强大的功能和Ruby on Rails 的大力推动，逐渐被更多开发者使用。</p><p>sass是采用的Ruby语言编写的一款css预处理语言，它诞生于2007年，是最早成熟css预处理语言。最初它是为了配合haml而设计的，因此有着和haml一样的缩进式风格。</p><p>sass从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的css代码，这一代的sass也被称为scss。</p><p><strong>特色功能 (Features)</strong></p><ul><li>完全兼容 CSS3</li><li>在 CSS 基础上增加变量、嵌套 (nesting)、混合 (mixins) 等功能</li><li>通过<em>函数</em>进行颜色值与属性值的运算</li><li>提供*控制指令 (control directives)*等高级功能</li><li>自定义输出格式</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>使用$变量名:变量值 来声明变量，即变量以$开头<br>如果变量需要在字符串中嵌套，则需要使用#{}包括，如</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-variable">$left</span><span class="hljs-selector-pseudo">:left</span>;<br><span class="hljs-selector-class">.div1</span> &#123;<br>    <span class="hljs-attribute">border</span>-#&#123;<span class="hljs-variable">$left</span>&#125;-radius: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">margin</span>: (<span class="hljs-number">14px</span>/<span class="hljs-number">2</span>);<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span> + <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-variable">$var</span> * <span class="hljs-number">10%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要注意的是，计算时会将单位也进行运算，所以使用时需注意<strong>最终单位</strong>：100px*10px = 1000 px<sup>2</sup></p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><ul><li><p><strong>选择器嵌套</strong>　<code>ul&#123; li&#123;&#125; &#125;</code> 后代选择、<code>ul&#123; &gt;li&#123;&#125; &#125;</code> 子代选择、</p><p>&amp;表示外层的父选择器 <code>div&#123; ul&#123; li&#123; &amp;==&quot;div ul li&quot; &#125; &#125; &#125;</code></p></li><li><p><strong>属性嵌套</strong>　　<code>p&#123;border:&#123;color: green;style:solid;width: 5px;&#125;&#125;</code>，注意里面的border要加上冒号</p></li><li><p><strong>伪类嵌套</strong>　　<code>ul&#123; li&#123; &amp;:hover&#123;&#125; &#125; &#125;</code></p></li></ul><h3 id="混合、继承、占位符"><a href="#混合、继承、占位符" class="headerlink" title="混合、继承、占位符"></a>混合、继承、占位符</h3><p><strong>混合宏</strong>：<br>声明：@mixin name($param:value){} 调用：@include name(value);<br> 声明时可以有参可以无参，可以带默认值也可不带，但调用时必须符合声明规范，同less<br>优点：可以传参；缺点：会将混合宏中代码，copy到对应的选择器中，产生冗余代码<br><strong>继承</strong>：<br>声明：.class{} 调用:@extend .class;<br>优点：继承的相同代码，会提取到并集选择器中，减少冗余代码；<br>缺点：无法进行传参，会在CSS中生成一个同名class<br><strong>占位符</strong>：<br>声明：%class{} 调用：@extend %class;<br>优点：继承的相同代码，会提取到并集选择器中，减少冗余代码，不会在CSS中生成一个同名class；<br>缺点：无法进行传参<br><strong>综上，当需要传递参数时用混合宏，当有现成class时用继承，当不需要参数也不需要class时用占位符</strong></p><h3 id="控制指令"><a href="#控制指令" class="headerlink" title="控制指令"></a>控制指令</h3><p><strong>if条件结构</strong>：<br> <code>@if条件&#123;&#125; @else&#123;&#125;</code><br><strong>for 循环结构</strong>:<br><code> @for $i from 1 to/through 10;</code> (to不包括10，through包括10 )<br><strong>whlie 循环结构</strong>：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-variable">$j</span>;<br><span class="hljs-keyword">@while</span> <span class="hljs-variable">$j</span>&lt;<span class="hljs-number">10</span>&#123;<span class="hljs-selector-class">.while</span> #&#123;<span class="hljs-variable">$j</span>&#125;&#123;<br><span class="hljs-attribute">background-color</span>: red;<br>&#125;<span class="hljs-variable">$j</span>:<span class="hljs-variable">$j</span>+<span class="hljs-number">1</span>;&#125;<br></code></pre></div></td></tr></table></figure><p><strong>each循环遍历</strong><br><code>@each item in a,b,c,d&#123;&#125;</code></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>Sass允许用户自己编写函数使用</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">　　<span class="hljs-keyword">@function</span> double(<span class="hljs-variable">$n</span>) &#123;<br>　　　　<span class="hljs-keyword">@return</span> <span class="hljs-variable">$n</span> * <span class="hljs-number">2</span>;<br>　　&#125;<br>　　<span class="hljs-selector-id">#sidebar</span> &#123;<br>　　　　<span class="hljs-attribute">width</span>: double(<span class="hljs-number">5px</span>);<br>　　&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>Sass和less一样，有两种注释方法</p><p>一种是单行注释，<code>//注释一</code> 不会被输出到编译后的CSS文件中；<br>另一种是多行注释，<code>/*注释二*/</code> 这种注释会保留在编译后的文件中；<br>另外还有一种算是多行注释的升级版，<code>/*!注释三 重要注释*/</code> 这种注释即使是压缩模式编译，也会被保留，通常可以用于声明版权信息。</p><h2 id="两种预处理语言的编译方式"><a href="#两种预处理语言的编译方式" class="headerlink" title="两种预处理语言的编译方式"></a>两种预处理语言的编译方式</h2><p>less和Sass的编译方式大同小异，他们可以通过下面几种方式进行编译：</p><h3 id="1、命令行方式"><a href="#1、命令行方式" class="headerlink" title="1、命令行方式"></a>1、命令行方式</h3><p>使用这种方式编译需要先安装less和Sass，less可以通过npm安装，Sass的安装方式比较多，不仅可以通过npm安装，也可以通过Ruby安装，更多安装方式可以去<a href="https://sass-lang.com/install">官网</a>查看。安装成功后就能使用命令行直接编译文件了。</p><p>less的编译命令</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">lessc styles.<span class="hljs-keyword">less</span> styles.css<br></code></pre></div></td></tr></table></figure><p>Sass的编译命令</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">sass <span class="hljs-keyword">test</span>.scss <span class="hljs-keyword">test</span>.css<br></code></pre></div></td></tr></table></figure><p>SASS提供四个<a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#output_style">编译风格</a>的选项：</p><ul><li>nested：嵌套缩进的css代码，它是默认值。</li><li>expanded：没有缩进的、扩展的css代码。</li><li>compact：简洁格式的css代码。</li><li>compressed：压缩后的css代码。</li></ul><p>生产环境当中，一般使用最后一个选项。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">sass --style compressed <span class="hljs-keyword">test</span>.sass <span class="hljs-keyword">test</span>.css<br></code></pre></div></td></tr></table></figure><p>命令行方式也可以对某个文件或者目录进行监听，在源文件产生变动时自动生成编译后版本，less可以通过安装一个插件watcher-lessc来监听编译，Sass直接使用命令行就能实现：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">　　<span class="hljs-regexp">//</span> 监听一个文件<br>　　sass --watch input.scss:output.css<br><br>　　<span class="hljs-regexp">//</span> 监听一个文件夹目录<br>　　sass --watch app<span class="hljs-regexp">/sass:public/</span>stylesheets<br></code></pre></div></td></tr></table></figure><h3 id="2、使用编译软件Koala编译"><a href="#2、使用编译软件Koala编译" class="headerlink" title="2、使用编译软件Koala编译"></a>2、使用编译软件Koala编译</h3><p>Koala是一个国产免费前端预处理器语言图形编译工具，支持Less、Sass、Compass、CoffeeScript，帮助web开发者更高效地使用它们进行开发。跨平台运行，完美兼容windows、linux、mac。</p><p>前往<a href="http://koala-app.com/index-zh.html">官网</a>下载安装，安装完成打开显示如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/banner01.gif" srcset="/img/loading.gif" lazyload alt="img"></p><p>点击左侧的+号添加需要编译的文件夹，也可以直接将文件夹拖动进来，添加完成后就可以对文件进行编译了，点击一个文件可以设置编译选项。编译时软件默认是将less文件编译到同级目录下，如果想要改变可以在文件上进行单个文件的改变；缺点是不能实现批量的改变。使用koala的好处是有错误提示，可以比较方便的获取错误信息。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/banner01.gif" srcset="/img/loading.gif" lazyload alt="img"></p><h3 id="3、使用开发工具编译"><a href="#3、使用开发工具编译" class="headerlink" title="3、使用开发工具编译"></a>3、使用开发工具编译</h3><p>可以使用一些常用的开发工具或开发工具中的某些插件来直接自动编译，如webstorm、sublime插件SASS-Build、vscode插件easy sass等等，具体操作方法自行搜索。</p><h3 id="4、使用JS文件"><a href="#4、使用JS文件" class="headerlink" title="4、使用JS文件"></a>4、使用JS文件</h3><p>这一条针对的是less文件，因为less基于js。去官网下载less.js文件，然后在文件中引入，或者直接使用CDN引入：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;less/test.less&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/less&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.3/less.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用时注意以下几点：<br>link引入的是less文件，路径直接是less所在位置即可；<br>link内一定要注明type类型，因为默认为css；<br>顺序一定要是引入的less文件在less.js文件上面。</p><h3 id="5、其他编译方式"><a href="#5、其他编译方式" class="headerlink" title="5、其他编译方式"></a>5、其他编译方式</h3><p>前端自动化软件codekit、Grunt打造前端自动化工作流grunt-sass、Gulp打造前端自动化工作流gulp-ruby-sass等，具体用法自行搜索。</p><h2 id="less与Sass的区别"><a href="#less与Sass的区别" class="headerlink" title="less与Sass的区别"></a>less与Sass的区别</h2><table><thead><tr><th align="center">区别</th><th align="center">Sass</th><th align="center">less</th></tr></thead><tbody><tr><td align="center">环境</td><td align="center">Sass基于Ruby，需要安装Ruby。属于服务端处理。</td><td align="center">Less和Sass在Ruby中构建相似，但它已被移植到JavaScript中。less编译通过引入less.js文件或通过编译软件编译成css文件再将css文件放入项目中。属于客户端处理。</td></tr><tr><td align="center">声明变量</td><td align="center">Sass使用$</td><td align="center">Less使用@</td></tr><tr><td align="center">输出格式</td><td align="center">nested：嵌套缩进的css代码；expanded：展开的多行css代码；compact：简洁格式的css代码；compressed：压缩后的css代码</td><td align="center">Less无输出格式</td></tr><tr><td align="center">继承</td><td align="center">sass的继承：@extend</td><td align="center">less的继承：类似于mixins .block</td></tr></tbody></table><p>以上是部分Sass和less的区别，仅供参考。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://lesscss.org/">less官网</a></p><p><a href="https://less.bootcss.com/">less中文网</a></p><p><a href="http://koala-app.com/index-zh.html">Koala官网</a></p><p><a href="https://www.sass.hk/">Sass中文网</a></p><p><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html">SASS用法指南 - 阮一峰的网络日志</a></p><p><a href="https://www.jianshu.com/p/96430f2e5161">sass和less的区别</a></p><p><a href="https://blog.csdn.net/gaomengwang/article/details/80573915">Sass与Less区别</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转】弹性盒子（Flex Box）布局语法教程</title>
    <link href="/2020/01/flex-layout/"/>
    <url>/2020/01/flex-layout/</url>
    
    <content type="html"><![CDATA[<p>网页布局（layout）是 CSS 的一个重点应用。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float"><code>float</code></a>属性。它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/">垂直居中</a>就不容易实现。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>Flex 布局将成为未来布局的首选方案。本文介绍它的语法，<a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">下一篇文章</a>给出常见布局的 Flex 写法。网友 <a href="http://vgee.cn/">JailBreak</a> 为本文的所有示例制作了 <a href="http://static.vgee.cn/static/index.html">Demo</a>，也可以参考。</p><p>以下内容主要参考了下面两篇文章：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a> 和 <a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties">A Visual Guide to CSS3 Flexbox Properties</a>。</p><h2 id="一、Flex-布局是什么？"><a href="#一、Flex-布局是什么？" class="headerlink" title="一、Flex 布局是什么？"></a>一、Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p>行内元素也可以使用 Flex 布局。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: inline-flex;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: -webkit-flex; <span class="hljs-comment">/* Safari */</span><br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。</p><blockquote><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></blockquote><h3 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">flex-direction</span>: row | row-reverse | column | column-reverse;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://github.com/greedymonkey/image/blob/master/flex/bg2015071005.png?raw=true" srcset="/img/loading.gif" lazyload alt="img"></p><p>它可能有4个值。</p><blockquote><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul></blockquote><h3 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p>它可能取三个值。</p><p>（1）<code>nowrap</code>（默认）：不换行。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>（2）<code>wrap</code>：换行，第一行在上方。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><h3 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性"></a>3.4 justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><blockquote><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></blockquote><h3 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><blockquote><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></blockquote><h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>该属性可能取6个值。</p><blockquote><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul></blockquote><h2 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h2><p>以下6个属性设置在项目上。</p><blockquote><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul></blockquote><h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">order</span>: &lt;integer&gt;;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex-grow</span>: &lt;number&gt;; <span class="hljs-comment">/* default 0 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex-shrink</span>: &lt;number&gt;; <span class="hljs-comment">/* default 1 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="hljs-comment">/* default auto */</span><br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex</span>: none | [ &lt;<span class="hljs-string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="hljs-string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="hljs-string">&#x27;flex-basis&#x27;</span>&gt; ]<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><p>（完）</p><p><strong>转自</strong> </p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰的语法日志——Flex 布局教程：语法篇</a></p><p><strong>附</strong> </p><p>英文版flex布局教程 <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a></p><p> <a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a> </p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Web</tag>
      
      <tag>Flex Box</tag>
      
      <tag>弹性布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>banner图滚动的两种方式</title>
    <link href="/2020/01/banner/"/>
    <url>/2020/01/banner/</url>
    
    <content type="html"><![CDATA[<h2 id="利用CSS动画效果制作循环滚动的动画"><a href="#利用CSS动画效果制作循环滚动的动画" class="headerlink" title="利用CSS动画效果制作循环滚动的动画"></a>利用CSS动画效果制作循环滚动的动画</h2><h3 id="设置图片宽度"><a href="#设置图片宽度" class="headerlink" title="设置图片宽度"></a>设置图片宽度</h3><p>以1920px的图片为例，首先要用一个div将滚动的banner图包起来，比如像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/banner.jpg&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>接下来对图片宽度和高度进行调整：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot; &gt;<br>*&#123;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-id">#banner</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-comment">/*宽度为浏览器的100%*/</span><br><span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;  <span class="hljs-comment">/*原则上,高度=图片高度*/</span><br><span class="hljs-attribute">overflow</span>:hidden;<br><span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-id">#banner</span> <span class="hljs-selector-tag">img</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">1920px</span>; <span class="hljs-comment">/*宽度为图片的实际宽度*/</span><br><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; <span class="hljs-comment">/*高度充满父容器*/</span><br>                <br><span class="hljs-comment">/*使用绝对定位,让图片在父容器中绝对居中*/</span><br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">960px</span>;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h3 id="使用动画实现滚动功能"><a href="#使用动画实现滚动功能" class="headerlink" title="使用动画实现滚动功能"></a>使用动画实现滚动功能</h3><p>下面是使用动画实现滚动的示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/banner01.gif" srcset="/img/loading.gif" lazyload alt="动画滚动"></p><p>具体实现方法如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;banner_in&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/banner1.png&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!--为了去掉图片之间的缝隙--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/banner2.png&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!--为了去掉图片之间的缝隙--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/banner3.png&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!--为了去掉图片之间的缝隙--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/banner1.png&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>上面代码中，每个img标签后面都加了一个注释，原因是为了去掉图片之间的缝隙，把所有的img标签写在同一行也可以达到效果。</p><p>下面是CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br>*&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;<br>&#125;<br><span class="hljs-selector-id">#banner</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-id">#banner_in</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">7680px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    -webkit-<span class="hljs-attribute">animation</span>: banner <span class="hljs-number">8s</span> ease infinite;<br>&#125;<br><br><span class="hljs-keyword">@-webkit-keyframes</span> banner&#123;<br>    <span class="hljs-number">0%</span>&#123;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>    &#125;<br>    <span class="hljs-number">10%</span>&#123;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>    &#125;<br>    <span class="hljs-number">30%</span>&#123;<br>        <span class="hljs-attribute">left</span>: -<span class="hljs-number">1920px</span>;<br>    &#125;<br>    <span class="hljs-number">40%</span>&#123;<br>        <span class="hljs-attribute">left</span>: -<span class="hljs-number">1920px</span>;<br>    &#125;<br>    <span class="hljs-number">70%</span>&#123;<br>        <span class="hljs-attribute">left</span>: -<span class="hljs-number">3840px</span>;<br>    &#125;<br>    <span class="hljs-number">80%</span>&#123;<br>        <span class="hljs-attribute">left</span>: -<span class="hljs-number">3840px</span>;<br>    &#125;<br>    <span class="hljs-number">100%</span>&#123;<br>        <span class="hljs-attribute">left</span>: -<span class="hljs-number">5760px</span>;<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>至此，一个使用动画功能做出来的banner滚动就实现了，如果要暂停滚动可以利用鼠标hover事件设置动画的状态属性，以达到暂停banner滚动的目的。</p><h2 id="利用CSS和JavaScript实现banner滚动和点击切换"><a href="#利用CSS和JavaScript实现banner滚动和点击切换" class="headerlink" title="利用CSS和JavaScript实现banner滚动和点击切换"></a>利用CSS和JavaScript实现banner滚动和点击切换</h2><p>​       上面利用CSS使banner滚动的方法虽然比较简单，但是如果想看其中一张banner的时候，只能等他慢慢滚动显示出来，不能直接切换，但是如果用CSS+JS的方法就可以直接跳转到想看的banner了。</p><p>先上HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span><br>　　<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inside&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/banner1.png&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img1&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/banner2.png&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img2&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/banner3.png&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img3&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/banner4.png&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img4&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/banner1.png&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img5&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--切换banner按钮--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bannerNum&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeBanner(1)&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeBanner(2)&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeBanner(3)&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeBanner(4)&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>再稍微调整一下样式：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;style type=&quot;text/css&quot;&gt;<br>  *&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<br>  &#125;<br>  <span class="hljs-selector-id">#banner</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>    <span class="hljs-attribute">position</span>: relative;<br>  &#125;<br>  <span class="hljs-selector-id">#banner</span> <span class="hljs-selector-id">#inside</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">9600px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">960px</span>;<br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;<br>  &#125;<br>  <span class="hljs-selector-id">#banner</span> <span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1920px</span>;<br>  &#125;<br>  <span class="hljs-selector-id">#bannerNum</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">list-style</span>: none;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">50px</span>;<br>  &#125;<br>  <span class="hljs-selector-id">#bannerNum</span> <span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">background-color</span>: white;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h3 id="实现滚动和切换"><a href="#实现滚动和切换" class="headerlink" title="实现滚动和切换"></a>实现滚动和切换</h3><p>接下来用JS使图片滚动起来，并且可以自由切换当前显示的图片。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br>　　<span class="hljs-keyword">var</span> n = <span class="hljs-number">1</span>;<br>　　<span class="hljs-keyword">var</span> inside;<br>　　<span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　inside = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;inside&quot;</span>);<br><br>　　<span class="hljs-keyword">var</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>　　　　inside.style.transition = <span class="hljs-string">&quot;all 1s ease&quot;</span>;<br>　　　　n++;<br>　　　　<span class="hljs-keyword">switch</span> (n)&#123;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>　　　　inside.style.transition = <span class="hljs-string">&quot;none&quot;</span>;<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>-<span class="hljs-number">1920</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>-<span class="hljs-number">1920</span>*<span class="hljs-number">2</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>-<span class="hljs-number">1920</span>*<span class="hljs-number">3</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>-<span class="hljs-number">1920</span>*<span class="hljs-number">4</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　n = <span class="hljs-number">0</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">default</span>:<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　&#125;<br>　　　　&#125;,<span class="hljs-number">2000</span>);<br>　　&#125;<br><br>　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeBanner</span>(<span class="hljs-params">num</span>)</span>&#123;<br>　　　　inside.style.transition = <span class="hljs-string">&quot;none&quot;</span>;<br>　　　　<span class="hljs-keyword">switch</span> (num)&#123;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>-<span class="hljs-number">1920</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>-<span class="hljs-number">1920</span>*<span class="hljs-number">2</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>　　　　inside.style.marginLeft = (-<span class="hljs-number">960</span>-<span class="hljs-number">1920</span>*<span class="hljs-number">3</span>)+<span class="hljs-string">&quot;px&quot;</span>;<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　<span class="hljs-keyword">default</span>:<br>　　　　<span class="hljs-keyword">break</span>;<br>　　　　&#125;<br><br>　　   n = num-<span class="hljs-number">1</span>;<br>　　&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>下面是我用div代替图片做的一个简单demo：</p><p>在线查看：<a href="">滚动效果</a></p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/banner02.gif" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的基本操作</title>
    <link href="/2020/01/hexo-operate/"/>
    <url>/2020/01/hexo-operate/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的Hexo博客搭建（三）—— 博客进阶设置、在其他电脑发布博客</title>
    <link href="/2020/01/blog-advance/"/>
    <url>/2020/01/blog-advance/</url>
    
    <content type="html"><![CDATA[<h2 id="添加其他样式"><a href="#添加其他样式" class="headerlink" title="添加其他样式"></a>添加其他样式</h2><p>主要添加自定义样式。首先编辑主题配置文件，然后在站点根目录的<code>source</code>文件夹内新建你配置的文件夹和文件：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">custom_js:</span>   <span class="hljs-comment"># 指定自定义 js 文件路径，路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js，支持列表</span><br><span class="hljs-attr">custom_css:</span>  <span class="hljs-string">/css/custom.css</span> <span class="hljs-comment"># 指定自定义 css 文件路径，路径是相对 source 目录，如 /css/custom.css 同上，支持列表</span><br><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），也可用于外部引入 js css 这些操作，注意不要和 post.custom 配置冲突</span><br></code></pre></div></td></tr></table></figure><h3 id="修改鼠标样式"><a href="#修改鼠标样式" class="headerlink" title="修改鼠标样式"></a>修改鼠标样式</h3><p>在前面新建的CSS文件中添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*鼠标样式 */</span><br>  <span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;/img/huaji.cur&quot;</span>),auto <span class="hljs-meta">!important</span><br>  &#125;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;/img/laji.png&quot;</span>),auto <span class="hljs-meta">!important</span><br>  &#125;<br></code></pre></div></td></tr></table></figure><p>上面代码中<code>url</code>的地址是在source目录下的文件，也可以写其他的图片地址。</p><h3 id="修改网页背景"><a href="#修改网页背景" class="headerlink" title="修改网页背景"></a>修改网页背景</h3><p>还是在前面新建的CSS文件中修改，添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">/images/bg.jpg</span>);<br>    <span class="hljs-attribute">background-size</span>:cover;<br>    <span class="hljs-attribute">background-repeat</span>:no-repeat;<br>    <span class="hljs-attribute">background-attachment</span>:fixed;<br>    <span class="hljs-attribute">background-position</span>:center;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>还可以配置动态背景：</p><h2 id="添加其他功能"><a href="#添加其他功能" class="headerlink" title="添加其他功能"></a>添加其他功能</h2><p>本篇主要添加一些主题中没有提供的功能。</p><h3 id="添加网页看板娘（Live2D）"><a href="#添加网页看板娘（Live2D）" class="headerlink" title="添加网页看板娘（Live2D）"></a>添加网页看板娘（Live2D）</h3><p>首先安装Live2D插件，在站点根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save hexo-helper-live2d<br></code></pre></div></td></tr></table></figure><p>然后选择自己喜欢的模型，复制名字。</p><p>Epsilon2.1</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>Gantzert_Felixander</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>haru</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>miku</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>ni-j</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nico</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nietzche</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nipsilon</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nito</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>shizuku</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>tsumiki</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>wanko</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>z16</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>hibiki</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>koharu</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>haruto</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>Unitychan</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>tororo</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>hijiki</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>将下面的代码添加到站点配置文件<code>_config.yml</code>中，修改&lt;模型名字&gt;（有教程说放在主题配置文件中，但是实际测试放在主题文件中并不好用，不管使用哪个模型网页中都不生效，都显示默认的<code>shizuku</code>这个模型，但是把代码放在站点配置文件中就好用了，不知道是什么原因）</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Live2D</span><br><span class="hljs-comment">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="hljs-attr">live2d:</span><br>  <span class="hljs-comment"># enable: true</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># 默认</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span> <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span> <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span> <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  <span class="hljs-comment"># scriptFrom: jsdelivr # jsdelivr CDN</span><br>  <span class="hljs-comment"># scriptFrom: unpkg # unpkg CDN</span><br>  <span class="hljs-comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-&lt;模型名字&gt;</span> <span class="hljs-comment"># npm-module package name</span><br>    <span class="hljs-comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br>    <span class="hljs-comment"># use: ./wives/wanko # 相对于博客根目录的路径</span><br>    <span class="hljs-comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br>    <span class="hljs-attr">scale:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">hHeadPos:</span> <span class="hljs-number">0.5</span><br>    <span class="hljs-attr">vHeadPos:</span> <span class="hljs-number">0.618</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">superSample:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">250</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">500</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">hOffset:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-20</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">scale:</span> <span class="hljs-number">0.5</span><br>  <span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.7</span><br>  <span class="hljs-attr">dialog:</span> <br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hitokoto:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>安装你选择的模型，在命令行运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save live2d-widget-model-&lt;你选择的模型名字&gt;<br></code></pre></div></td></tr></table></figure><p>然后在命令行运行以下命令，在浏览器里访问<code>localhost:4000</code>查看效果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></div></td></tr></table></figure><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>当想要写一些不想让人随便看到的博客时，可以通过密码验证的方式阻挡别人的浏览，之前有一款文章加密的插件，但是好像效果不是很好，因为密码就被写在了网页源码里，只要打开网页源码就能看到。现在又找到另外一个（也可能是原来的升级了？主要不记得原来的插件名字了）加密插件，似乎并不会将密码泄露到网页中，可以尝试使用这款插件。</p><p><strong>安装方式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save hexo-blog-encrypt<br></code></pre></div></td></tr></table></figure><p>或</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> hexo-blog-<span class="hljs-built_in">encrypt</span> (需要Yarn)<br></code></pre></div></td></tr></table></figure><p>最简单的使用方式就是将 “password” 字段添加到文章的信息头上：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2020-01-03 15:43:38<br>password: 123456<br>---<br></code></pre></div></td></tr></table></figure><p><strong>高级设置：</strong></p><p>两种设置方式：</p><ul><li>在文章信息头添加加密信息：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">作为日记加密</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-01-03 15:43:38</span><br><span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br><span class="hljs-attr">abstract:</span> <span class="hljs-string">有东西被加密了,</span> <span class="hljs-string">请输入密码查看.</span><br><span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码.</span><br><span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个密码看着不太对,</span> <span class="hljs-string">请再试试.</span><br><span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个文章不能被校验,</span> <span class="hljs-string">不过您还是能看看解密后的内容.</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure><ul><li>在站点文件<code>_config.yml</code>内配置加密信息：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Security</span><br><span class="hljs-attr">encrypt:</span> <span class="hljs-comment"># hexo-blog-encrypt</span><br>  <span class="hljs-attr">abstract:</span> <span class="hljs-string">有东西被加密了,</span> <span class="hljs-string">请输入密码查看.</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码.</span><br>  <span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tagName</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码A</span>&#125;<br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tagName</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码B</span>&#125;<br>  <span class="hljs-attr">template:</span> <span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;hexo-blog-encrypt&quot;</span> <span class="hljs-string">data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot;</span> <span class="hljs-string">data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div</span> <span class="hljs-string">class=&quot;hbe-input-container&quot;&gt;&lt;input</span> <span class="hljs-string">type=&quot;password&quot;</span> <span class="hljs-string">id=&quot;hbePass&quot;</span> <span class="hljs-string">placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot;</span> <span class="hljs-string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="hljs-string">class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="hljs-string">id=&quot;hbeData&quot;</span> <span class="hljs-string">type=&quot;hbeData&quot;</span> <span class="hljs-string">data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span><br>  <span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个密码看着不太对,</span> <span class="hljs-string">请再试试.</span><br>  <span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个文章不能被校验,</span> <span class="hljs-string">不过您还是能看看解密后的内容.</span><br></code></pre></div></td></tr></table></figure><p><strong>注意！！！</strong>在站点配置文件配置上述内容时，如果把tags下面的内容都注释掉的话编译生成的时候会报错，要改成这样才行：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span> [] <span class="hljs-comment">#在后面加一对方括号，表示是个数组，不然报错 Cannot read property &#x27;forEach&#x27; of null</span><br>  <span class="hljs-comment"># - &#123;name: tagName, password: 密码A&#125;</span><br>  <span class="hljs-comment"># - &#123;name: tagName, password: 密码B&#125;</span><br></code></pre></div></td></tr></table></figure><p><em><strong>以后有类似的配置遇到问题也可以尝试这样解决。</strong></em></p><p><strong>加密优先级</strong>是 文章信息头 &gt; 按标签加密。</p><p><strong>配置优先级</strong>是 文章信息头 &gt; <code>_config.yml</code> (站点根目录下的) &gt; 默认配置。</p><p><strong>其他问题</strong></p><p>在部分博客中, 解密后部分元素可能无法正常显示或者表现, 这属于已知问题. 目前的解决办法是通过自行查阅自己的博客中的代码, 了解到在 onload 事件发生时调用了哪些函数, 并将这些函数挑选后写入到博客内容中. 如:</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Callback</span> <span class="hljs-string">Test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-12-21 11:54:07</span><br><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Encrypted</span><br><span class="hljs-meta">---</span><br><br><span class="hljs-attr">This is a blog to test Callback functions. You just need to add code at the last of your post like following:</span><br><br><span class="hljs-string">It</span> <span class="hljs-string">will</span> <span class="hljs-string">be</span> <span class="hljs-string">called</span> <span class="hljs-string">after</span> <span class="hljs-string">the</span> <span class="hljs-string">blog</span> <span class="hljs-string">decrypted.</span><br><br><span class="hljs-string">&lt;script&gt;</span><br>    <span class="hljs-string">//</span> <span class="hljs-string">添加一个</span> <span class="hljs-string">script</span> <span class="hljs-string">tag</span> <span class="hljs-string">与代码在文章末尾.</span><br>    <span class="hljs-string">alert(&quot;Hello</span> <span class="hljs-string">World&quot;);</span><br><span class="hljs-string">&lt;/script&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>对 TOC 进行加密</strong></p><p>如果你有一篇文章使用了 TOC，你需要修改模板的部分代码。这里用 landscape 作为例子：</p><ul><li>你可以在 hexo/themes/landscape/layout/_partial/article.ejs 找到 article.ejs。</li><li>然后找到 &lt;% post.content %&gt; 这段代码，通常在30行左右。</li><li>使用如下的代码来替代它:</li></ul><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ejs">&lt;% if(post.toc &#x3D;&#x3D; true)&#123; %&gt;<br>  &lt;div id&#x3D;&quot;toc-div&quot; class&#x3D;&quot;toc-article&quot; &lt;% if (post.encrypt &#x3D;&#x3D; true) &#123; %&gt;style&#x3D;&quot;display:none&quot; &lt;% &#125; %&gt;&gt;<br>    &lt;strong class&#x3D;&quot;toc-title&quot;&gt;Index&lt;&#x2F;strong&gt;<br>      &lt;% if (post.encrypt &#x3D;&#x3D; true) &#123; %&gt;<br>        &lt;%- toc(post.origin, &#123;list_number: true&#125;) %&gt;<br>      &lt;% &#125; else &#123; %&gt;<br>        &lt;%- toc(post.content, &#123;list_number: true&#125;) %&gt;<br>      &lt;% &#125; %&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;% &#125; %&gt;<br>&lt;%- post.content %&gt;<br></code></pre></div></td></tr></table></figure><h2 id="利用GitHub备份博客源文件并且在不同电脑操作"><a href="#利用GitHub备份博客源文件并且在不同电脑操作" class="headerlink" title="利用GitHub备份博客源文件并且在不同电脑操作"></a>利用GitHub备份博客源文件并且在不同电脑操作</h2><p>在你换电脑或者重装系统的时候万一不小心把博客的站点文件夹删了或者弄丢了那就什么都没了，所以为了防止发生这样的情况，就可以用GitHub来保存博客的源文件。</p><h3 id="用命令行操作"><a href="#用命令行操作" class="headerlink" title="用命令行操作"></a>用命令行操作</h3><p>具体操作是在你的GitHub中新建一个仓库或者在你的博客仓库内新建一个分支，个人推荐新建一个仓库，和博客的静态文件分开管理比较好，然后在本地找一个空文件夹，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:你的git账户名/你的博客仓库名<br></code></pre></div></td></tr></table></figure><p>就是如下图所示这个链接：</p><p><img src="" srcset="/img/loading.gif" lazyload></p><p>复制粘帖到<code>git clone</code>后面即可。</p><p><strong>更新：</strong>我在过了不知道多久之后回来整理吃灰博客的时候碰到的两个问题</p><p>一是用于太久没用ssh，github自动把ssh删掉了，然后在我克隆仓库的时候就出现了<code>git@github.com:Permission denied (publickey). fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.</code>这个错误。这个时候首先使用<code>ls ~/.ssh/</code>这个命令检查你电脑上的之前创建的ssh文件是否还在，如果存在的话把之前创建的公钥再复制到github里就行，如果没有ssh就要重新创建ssh密钥然后再添加到github上。</p><p>二是如果你电脑上有设置了多个Git帐号的话，上面的代码就要修改一下了。</p><p>根据你ssh文件夹下的config文件，把<code>git@github.com:</code>这部分中<code>@</code>和<code>：</code>之间的<code>github.com</code>改成config文件中host对应的名称，否则拉取仓库的时候也会报上面的错。</p><p>把仓库克隆到本地，然后把你的博客源文件全部复制过来，除了<code>.deploy_git</code>，注意复制过来的文件里面应该有一个叫<code>.gitignore</code>的文件，用来忽略一些不要提交到Git的文件，如果没有可以自己新建一个，在里面加上下面的内容：</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></div></td></tr></table></figure><p>如果还有其他自己不想提交的文件也可以加到这个文件中。</p><p>然后再在命令行中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br>git commit –m <span class="hljs-string">&quot;commit message&quot;</span><br>git push <br></code></pre></div></td></tr></table></figure><p>可以在网页中查看是否上传成功。</p><p>当你换了电脑或者重装系统后想把博客下回来怎么操作？</p><p>首先前面的都一样，下载安装node，Git，然后设置git全局邮箱和用户名，设置SHH，安装hexo，然后在任意一个文件夹内，执行<code>git clone git@你的博客源文件仓库地址</code>，进入克隆下来的文件夹，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install<br>npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>然后就可以继续写博客了，写完之后运行<code>hexo g &amp;&amp; hexo d</code>，就可以部署到GitHub Pages上了。而且现在可以每次写完博客都把源文件备份一下了：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br>git commit –m <span class="hljs-string">&quot;commit message&quot;</span><br>git push <br></code></pre></div></td></tr></table></figure><h3 id="用GitHub-Desktop操作"><a href="#用GitHub-Desktop操作" class="headerlink" title="用GitHub Desktop操作"></a>用GitHub Desktop操作</h3><p>下载安装GitHub Desktop然后登陆GitHub，把对应的作为保存博客源文件的仓库克隆到本地，然后把除了<code>.deploy_git</code>以外的博客源文件复制进来，注意有没有<code>.gitignore</code>这个文件，没有按上面方法加上，然后再写上备注信息，，提交推送到Git上就行了。</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p><p><a href="https://uchuhimo.me/2017/04/11/genesis/">如何使用 Hexo 和 GitHub Pages 搭建这个博客</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的Hexo博客搭建（二）—— 网站设置和主题优化</title>
    <link href="/2020/01/blog-config/"/>
    <url>/2020/01/blog-config/</url>
    
    <content type="html"><![CDATA[<p>本篇文章主要来对网站做进一步的设置和美化，这里的美化主要针对我用的主题-<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>，对于其他主题不一定完全适用。</p><h2 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h2><h3 id="设置网站信息"><a href="#设置网站信息" class="headerlink" title="设置网站信息"></a>设置网站信息</h3><p>在<strong>站点</strong>配置文件<code>_config.yml</code>中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">你的博客名称</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">副标题（可不设置）</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">描述，通常由于搜索引擎搜索，SEO优化等（如果没有搜索引擎爬取收录的需要可不设置）</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">关键字，通常由于搜索引擎搜索，SEO优化等（可不设置）</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">作者</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN（设置语言）</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">时区（可不设置）</span><br></code></pre></div></td></tr></table></figure><h3 id="修改永久链接的路径"><a href="#修改永久链接的路径" class="headerlink" title="修改永久链接的路径"></a>修改永久链接的路径</h3><p>在站点配置文件<code>_config.yml</code>中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:title/</span><br></code></pre></div></td></tr></table></figure><h3 id="跳过渲染某些文件"><a href="#跳过渲染某些文件" class="headerlink" title="跳过渲染某些文件"></a>跳过渲染某些文件</h3><p>在站点配置文件<code>_config.yml</code>中修改，为了显示某个自己做的网页，或者为了显示readme说明文件等等：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Directory</span><br><span class="hljs-attr">skip_render:</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">test/*</span><br> <span class="hljs-comment"># 跳过文件夹下所有文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;文件夹名/*&quot;</span>  <br> <span class="hljs-comment"># 跳过子文件夹</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;文件夹名/子文件夹名/*&quot;</span><br> <span class="hljs-comment"># 跳过文件夹下所有子文件夹和文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;文件夹名/**&quot;</span>   <br></code></pre></div></td></tr></table></figure><h2 id="主题美化设置"><a href="#主题美化设置" class="headerlink" title="主题美化设置"></a>主题美化设置</h2><p>主题配置我使用了覆盖配置，将<strong>主题配置文件</strong>放置在 fluid 目录之外，避免在更新主题时丢失自定义的配置。</p><p>使用该功能必须保证 Hexo 版本不低于 3.0，因为该功能利用了 <a href="https://hexo.io/zh-cn/docs/data-files.html">Hexo 数据文件</a> 功能。</p><p><strong>使用方式：</strong></p><ol><li>进入<strong>博客根目录</strong>（不是主题目录）的 source 目录下，创建 <code>_data</code> 目录（和 <code>_post</code> 目录同级）；</li><li>在 <code>_data</code> 目录下创建 <code>fluid_config.yml</code> 文件，将 <code>/theme/fluid/_config.yml</code> 中全部配置（或部分配置）复制到 <code>fluid_config.yml</code> 中；</li><li>以后配置都在 <code>fluid_config.yml</code> 中修改，配置会在 <code>hexo g</code> 时自动覆盖。</li></ol><p><strong>注意：</strong></p><ul><li><p>存在于 <code>fluid_config.yml</code> 的配置都是高优先级，修改原 <code>_config.yml</code> 是无效的。</p></li><li><p>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">icons:</span>  <span class="hljs-comment"># 不要把 icon 注释掉，否则无法覆盖配置</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-github-fill&#x27;, link: &#x27;https://github.com&#x27; &#125;</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-wechat-fill&#x27;, qrcode: &#x27;/img/favicon.png&#x27; &#125;</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="修改网页标签icon"><a href="#修改网页标签icon" class="headerlink" title="修改网页标签icon"></a>修改网页标签icon</h3><p>打开主题配置文件<code>themes/fluid/_config.yml</code>，找到下面的代码修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/favicon.png</span> <span class="hljs-comment"># 网站标签页的 icon</span><br></code></pre></div></td></tr></table></figure><p>上面的路径位于source文件夹下，而且必须位于source下，文件夹名称可以修改为别的，同时source文件夹在主题目录和站点目录各有一个，但是主题的source目录最终会合并到站点目录下，而主题目录在版本更新的时候可能会造成内容被覆盖或丢失，<strong>所以推荐放在博客站点的source文件夹下</strong>，文章后续提到的资源路径也均是放在站点source文件夹内。</p><h3 id="设置标题的打字机效果"><a href="#设置标题的打字机效果" class="headerlink" title="设置标题的打字机效果"></a>设置标题的打字机效果</h3><p>还是在主题配置文件<code>themes/fluid/_config.yml</code>里面修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">typing:</span> <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span>  <span class="hljs-comment"># 打印速度，数字越大越慢</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否循环播放效果</span><br></code></pre></div></td></tr></table></figure><h3 id="添加鼠标点击特效"><a href="#添加鼠标点击特效" class="headerlink" title="添加鼠标点击特效"></a>添加鼠标点击特效</h3><p>修改主题配置文件<code>themes/fluid/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">mouse_click:</span>  <span class="hljs-comment"># 鼠标点击动效</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">style:</span> <span class="hljs-string">values</span> <span class="hljs-comment"># 目前设置两个值：values（价值观词汇） | love（爱心）</span><br></code></pre></div></td></tr></table></figure><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>修改主题配置文件<code>themes/fluid/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">lazyload:</span> <span class="hljs-comment"># 对页面中的图片进行懒加载处理，可见范围外的图片不会加载</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 仅在文章页使用懒加载，开启后如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span><br></code></pre></div></td></tr></table></figure><p>更多可修改信息在配置文件中查看。</p><h3 id="设置音乐播放器"><a href="#设置音乐播放器" class="headerlink" title="设置音乐播放器"></a>设置音乐播放器</h3><p>编辑主题配置文件<code>themes/fluid/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">aplayer:</span>  <span class="hljs-comment"># 音乐播放器，注意不能与 hexo-tag-aplayer 插件共用</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">autoplay:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 音频自动播放</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-string">&#x27;all&#x27;</span>  <span class="hljs-comment"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span><br>  <span class="hljs-attr">order:</span> <span class="hljs-string">&#x27;random&#x27;</span>  <span class="hljs-comment"># 播放顺序，可选值: &#x27;list&#x27;, &#x27;random&#x27;</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;#b7daff&#x27;</span>  <span class="hljs-comment"># 主题色</span><br>  <span class="hljs-attr">songs:</span>  <span class="hljs-comment"># 歌曲列表，必须传入下列各参数，其中 url 与 cover 在本地需存于 source 目录，更多参数见文档：https://aplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;artist&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/songs/test.mp3&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;/img/cover.jpg&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">artist:</span> <span class="hljs-string">&#x27;artist&#x27;</span>, <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;https://...url.mp3&#x27;</span>, <span class="hljs-attr">cover:</span> <span class="hljs-string">&#x27;https://...cover.jpg&#x27;</span> &#125;<br></code></pre></div></td></tr></table></figure><h3 id="设置右上角导航菜单"><a href="#设置右上角导航菜单" class="headerlink" title="设置右上角导航菜单"></a>设置右上角导航菜单</h3><p>编辑主题配置文件<code>themes/fluid/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span>  <span class="hljs-comment"># 可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-home-fill&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;archive&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/archives/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-archive-fill&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;category&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/categories/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-category-fill&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;tag&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/tags/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-tags-fill&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;about&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/about/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-user-fill&#x27;</span> &#125;<br>    <span class="hljs-comment">#- &#123; key: &#x27;links&#x27;, link: &#x27;/links/&#x27;, icon: &#x27;iconfont icon-link-fill&#x27; &#125;  # 友链页，把前面#去掉即可展示</span><br></code></pre></div></td></tr></table></figure><p>另外二级菜单写法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;文档&#x27;</span>,<br>      <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-books&#x27;</span>,<br>      <span class="hljs-attr">submenu:</span> [<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;配置指南&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/guide/&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;操作示例&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/example/&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;图标用法&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/icon/&#x27;</span> &#125;<br>      ]<br>  &#125;<br></code></pre></div></td></tr></table></figure><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>编辑主题配置文件<code>themes/fluid/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">search:</span> <span class="hljs-comment"># 搜索栏，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件。</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/local-search.xml</span> <span class="hljs-comment"># 文件引用地址，默认是下方生成位置，也可以将生成后的 local-search.xml 上传到其它位置引用，如：https://www.example.com/local-search.xml</span><br>  <span class="hljs-attr">generate_path:</span> <span class="hljs-string">/local-search.xml</span> <span class="hljs-comment"># 文件生成位置，必须为相对位置</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>更多配置可以查看主题配置文件以及<a href="https://hexo.fluid-dev.com/docs/">官方配置指南</a>。</p><h3 id="自定义网页背景"><a href="#自定义网页背景" class="headerlink" title="自定义网页背景"></a>自定义网页背景</h3><p>首先在站点根目录的<code>source\_data</code>文件夹内新建一个名为<code>styles.styl</code>的文件，然后编辑主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">custom_file_path:</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">source/_data/styles.styl</span><br></code></pre></div></td></tr></table></figure><p><strong>我们所有自定义的样式都会在<code>styles.styl</code>这个文件里添加</strong>。</p><p>编辑<code>styles.styl</code>，添加如下代码，把URL里面的地址改为你的背景图片的链接即可：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">/images/bg.jpg</span>);<br>    <span class="hljs-attribute">background-size</span>:cover;<br>    <span class="hljs-attribute">background-repeat</span>:no-repeat;<br>    <span class="hljs-attribute">background-attachment</span>:fixed;<br>    <span class="hljs-attribute">background-position</span>:center;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h3><p>还是在<code>styles.styl</code>里编辑，添加下面的代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 鼠标样式<br>  * &#123;<br>      <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;鼠标图标地址&quot;</span>),auto<span class="hljs-meta">!important</span><br>  &#125;<br>  <span class="hljs-selector-pseudo">:active</span> &#123;<br>      <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;鼠标图标地址&quot;</span>),auto<span class="hljs-meta">!important</span><br>  &#125;<br></code></pre></div></td></tr></table></figure><h3 id="点击出现爱心效果"><a href="#点击出现爱心效果" class="headerlink" title="点击出现爱心效果"></a>点击出现爱心效果</h3><p>在主题文件夹内的<code>/source/js/src</code>下新建文件<code>click-effect.js</code>，接着把下面的内容复制粘贴到<code>click-effect.js</code>文件中。<br>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">!<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e,t,a</span>)</span>&#123;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params"></span>)</span>&#123;c(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">r</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e=<span class="hljs-number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="hljs-number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="hljs-number">1</span>)):(d[e].y--,d[e].scale+=<span class="hljs-number">.004</span>,d[e].alpha-=<span class="hljs-number">.013</span>,d[e].el.style.cssText=<span class="hljs-string">&quot;left:&quot;</span>+d[e].x+<span class="hljs-string">&quot;px;top:&quot;</span>+d[e].y+<span class="hljs-string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="hljs-string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="hljs-string">&quot;,&quot;</span>+d[e].scale+<span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="hljs-string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">o</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> t=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">i</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-keyword">var</span> a=t.createElement(<span class="hljs-string">&quot;div&quot;</span>);a.className=<span class="hljs-string">&quot;heart&quot;</span>,d.push(&#123;<span class="hljs-attr">el</span>:a,<span class="hljs-attr">x</span>:e.clientX-<span class="hljs-number">5</span>,<span class="hljs-attr">y</span>:e.clientY-<span class="hljs-number">5</span>,<span class="hljs-attr">scale</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">alpha</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-keyword">var</span> a=t.createElement(<span class="hljs-string">&quot;style&quot;</span>);a.type=<span class="hljs-string">&quot;text/css&quot;</span>;<span class="hljs-keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="hljs-keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].appendChild(a)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&quot;rgb(&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-built_in">Math</span>.random())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-built_in">Math</span>.random())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-built_in">Math</span>.random())+<span class="hljs-string">&quot;)&quot;</span>&#125;<span class="hljs-keyword">var</span> d=[];e.requestAnimationFrame=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-built_in">setTimeout</span>(e,<span class="hljs-number">1e3</span>/<span class="hljs-number">60</span>)&#125;&#125;(),n()&#125;(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>);<br></code></pre></div></td></tr></table></figure><p>在主题文件夹的<code>\layout\_layout.swig</code>文件末尾添加：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 页面点击出现小桃心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://hexo.fluid-dev.com/docs/">fluid官方配置指南</a></p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p><p><a href="https://uchuhimo.me/2017/04/11/genesis/">如何使用 Hexo 和 GitHub Pages 搭建这个博客</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的Hexo博客搭建（一）—— 搭建博客并部署到github</title>
    <link href="/2020/01/blog-create/"/>
    <url>/2020/01/blog-create/</url>
    
    <content type="html"><![CDATA[<p>事情的起因是这样的，在上网查东西的时候经常看见一些文章在个人博客网站发布，于是决定自己也捣鼓个博客装装逼，然后就在网上搜了一圈，发现现在市面上的博客平台还是有不少的，比方说博客园、简书、CSDN啥的，这些平台功能完善，注册给账号就能开始写文章，也不用去进行什么复杂的配置，简单点说就是你只管写文章就行，剩下的平台帮你处理。而且这些平台基本上都有社区论坛之类的，用户交流也很方便。<span id="more"></span></p><p>这么一看，好像在这几个平台直接注册账号开始写文章就挺八错了，但是呢，前面提到的这几个平台，博客园我有用过，CSDN注册了账号就没有以后了，简书虽然没用过，但是经常会看上面的文章，然后就发现这些平台都或多或少有一些限制，比方说想自己放点奇奇怪怪的东西上去就不太行了，而且除了博客园以外，其他的平台不能自定义网站的外观，最多可以换换主题。所以思来想去还是自己搭一个博客网站吧，但是又一想自己搭网站不仅要买服务器买域名还有备案，而且还要自己设计制作网站，网站上线以后还要定期进行维护，像我这么懒得人说不定过几天就扔一边了，这样一想不行太亏，只能再考虑考虑别的方式。然后机智如我又想到了一个办法，就是把网站放到GitHub page上面，套上Hexo这个博客框架，前期设置好了后期基本上不太需要维护，所以用这个方法很容易就能做出一个好看又装逼的博客网站了，啰嗦了这么多下面就来说说具体怎么操作吧。</p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a><strong>Hexo简介</strong></h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。官网对Hexo的介绍是快速、简洁且高效的博客框架。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>安装Node.js</strong></p><p>Node.js 为大多数平台提供了官方的安装程序。可以去官网<a href="https://nodejs.org/zh-cn/download/">下载 | Node.js</a>下载</p><p>安装完成后打开命令行查看是否安装成功：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></div></td></tr></table></figure><p><strong>安装Git</strong></p><p>Git是目前世界上最先进的分布式版本控制系统，我们用它来管理Hexo博客文章，上传到GitHub。去<a href="https://git-scm.com/downloads">官网下载</a>对应系统的Git安装程序或者通过命令行的方式安装。</p><p><strong>安装Hexo</strong></p><p>在Node.js和Git都安装完成之后，安装Hexo，用命令行运行以下命令 <code>npm install -g hexo-cli</code>，之后可以用<code>hexo -v</code>查看版本来检查是否安装成功。</p><h2 id="初始化Hexo并设置主题"><a href="#初始化Hexo并设置主题" class="headerlink" title="初始化Hexo并设置主题"></a>初始化Hexo并设置主题</h2><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p> Hexo 安装完成后，用命令行依次执行以下命令，Hexo 将会在指定文件夹中新建所需要的文件，其中&lt;folder&gt;就是你想要作为博客初始化的文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br></code></pre></div></td></tr></table></figure><p>或者通过<strong>git bash</strong>操作，在你想新建博客的<strong>空文件夹</strong>中右键，选择<code>git bash here</code>，然后在打开的命令窗口直接输入<code>hexo init</code>就能初始化。</p><p>其中，<code>hexo init &lt;folder&gt;</code> 的&lt;folder&gt;是可选项，代表你想要初始化的文件夹，如果不写则默认在你当前打开的文件夹内初始化，比如你在<code>blog</code>文件夹内用<code>Git bash here</code> 打开命令行，再运行<code>hexo init</code> 这个命令，就会直接在<code>blog</code>这个文件夹内初始化，如果加上参数<code>hexo init hexo</code> 则会在<code>blog</code>文件夹内新建一个名为<code>hexo</code>的文件夹，然后在<code>hexo</code>这个文件夹内初始化。另外不管在哪个位置初始化，都要求你初始化的文件夹是空文件夹，否则初始化失败，命令行会打印错误提示文件夹不为空。</p><p><strong>还要注意的一点是：</strong>如果使用<strong>cmd命令行</strong>操作，会直接在<strong>我的文档（如Administrator）</strong>下新建文件夹进行初始化，如果不想新建在我的文档内，需要先用命令行切换到你想新建的位置下然后再初始化，如：</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">d:</span><br>cd hexo-blog<br>hexo init <br></code></pre></div></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">.<br>├── .gitignore<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── package-<span class="hljs-built_in">lock</span>.json<br>├── node_modules<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></div></td></tr></table></figure><p>这时你可以在这个文件夹下使用命令<code>hexo server</code>来运行博客，在浏览器中访问<code>http://localhost:4000/</code>查看效果。</p><p>默认显示页面如下：</p><p><img src="https://cdn.jsdelivr.net/gh/DogeLasVegas/image-source/2020/2020-01/99%E4%B9%98%E6%B3%95%E8%A1%A8.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>更多关于hexo的命令和设置可以去<a href="https://hexo.io/zh-cn/docs/">官网</a>查看。</p><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>Hexo默认的主题是landscape，更多主题可以去<a href="https://hexo.io/themes/">官网</a>查看挑选。</p><p>主题的安装方式通常有两种：</p><p>一种是去主题的GitHub项目上下载到本地，然后将主题文件夹复制到站点目录的<code>themes</code>文件夹下。<br>另一种方式是用命令行安装：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;your-hexo-folder&gt;<br>git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure><p>虽然两种安装方式不同，但主题的配置方式是一样的，都是在博客的<strong>站点目录</strong>下的配置文件<code>_config.yml</code>中修改：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&lt;主题文件夹的名称&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>重点：</strong>这里需要注意的是，站点配置文件和主题配置文件是两个不同的配置文件。假设你的博客站点文件夹名字是<code>blog</code>，那么你的站点配置文件路径就是<code>blog\_config.yml</code>，而主题配置文件的路径则是<code>blog\themes\主题文件夹名\_config.yml</code>，修改配置时要注意区分。</p><h2 id="部署博客到GithubPages"><a href="#部署博客到GithubPages" class="headerlink" title="部署博客到GithubPages"></a>部署博客到GithubPages</h2><h3 id="创建GitHub仓库并添加SHH-key"><a href="#创建GitHub仓库并添加SHH-key" class="headerlink" title="创建GitHub仓库并添加SHH key"></a>创建GitHub仓库并添加SHH key</h3><p><strong>创建仓库</strong></p><p>创建仓库之前，你要有一个GitHub账号，如果没有先去注册一个，之后在你的&lt;Github账号名称&gt;.github.io页面右上角头像点开下拉菜单，找到<code>Your repository</code>点开，然后点<code>new</code>按钮创建一个名为<code>&lt;你的Github账号名称&gt;.github.io</code>的仓库，并且设置为公开（public），再进行下一步。</p><p><strong>添加SSH key</strong></p><p>创建SSH key是为了将博客推送到GitHub上 ，在命令行运行以下命令，创建过程中需要根据提示按三下回车：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱地址&quot;</span><br></code></pre></div></td></tr></table></figure><p>创建完成后在电脑上找到生成的秘钥，比如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>，打开这个文件，注意是带<code>pub</code>后缀名的这个文件，将里面内容复制出来，然后打开GitHub，点击你的头像，在setting中找到<code>SSH and GPG keys </code>这个选项，然后点击<code>New SSH key</code>把你刚刚复制的内容放进去，可以给这个SSH Key起一个名字方便知道是做什么用途的。（操作中更具体的内容可以在另一篇文章中查看。）</p><p>测试是否添加成功。在命令行中依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<br>yes<br></code></pre></div></td></tr></table></figure><p>当看到返回<code>You’ve successfully authenticated</code>即为成功。</p><h3 id="将本地博客推送到GitHub仓库"><a href="#将本地博客推送到GitHub仓库" class="headerlink" title="将本地博客推送到GitHub仓库"></a>将本地博客推送到GitHub仓库</h3><p>安装hexo-deployer-git插件。在命令行运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>然后打开<strong>站点配置文件</strong><code>_config.yml</code>，把文件的最后修改为如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:&lt;你的Github用户名&gt;/&lt;你的Github用户名&gt;.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>接下来就可以把博客推送到GitHub Pages了，在命令行（位置已经跳转到博客目录下）输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></div></td></tr></table></figure><p>其中<code> hexo clean</code>命令是清除缓存文件和已生成的静态文件，也可以不加。<br><code>hexo generate</code> 生成静态文章，可以用缩写 hexo g。<br><code>hexo deploy </code>是部署网站，就是把博客推送到GitHub上，可以用缩写hexo d。</p><p>注意deploy时可能要你输入username和password。</p><p>返回<code>INFO Deploy done: git</code>即推送成功了，稍等几分钟就可以在浏览器访问<code>http://你的GitHub用户名.github.io</code></p><p>到这里，你的Hexo博客就已经在GitHub Pages部署完成，可以开始发博客了。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>这部分先跳过，目前并没有绑定域名的打算，所以没有做深入了解，如果想绑定，可以看看下面的参考链接。</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p><p><a href="https://uchuhimo.me/2017/04/11/genesis/">如何使用 Hexo 和 GitHub Pages 搭建这个博客</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/12/hello-world/"/>
    <url>/2019/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/2019/12/hexo/"/>
    <url>/2019/12/hexo/</url>
    
    <content type="html"><![CDATA[<p><strong>此篇废弃，移步至另一篇<a href="https://dogelasvegas.github.io/2020/01/blog-create/">从零开始的Hexo博客搭建（一）</a></strong></p><p>现在市面上的博客平台有很多，比方说博客园、简书、CSDN等等，功能完善，专注写作即可，而且还有社区，用户交流也很方便，但是这些平台都或多或少有一定限制，还有各种广告。由此，我们可以自己搭建一个博客网站，但是自己搭建又要买服务器还有域名，还要自己制作网站，而且还要定期进行维护，不光花钱还费时间，不过还有一个办法，就是把博客放到GitHub page上面，这样只要专注写作就行了，不需要定期维护，然后再套上Hexo这个博客框架，可以直接生成一个漂亮的网站，这样搭建一个博客就容易多了。</p><p><strong>Hexo简介</strong><br>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。官网对Hexo的介绍是快速、简洁且高效的博客框架。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><strong>安装Node.js</strong></p><p>Node.js 为大多数平台提供了官方的安装程序。可以去官网<a href="https://nodejs.org/zh-cn/download/">下载 | Node.js</a>下载</p><p>安装完成后打开命令行查看是否安装成功：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></div></td></tr></table></figure><p><strong>安装Git</strong></p><p>Git是目前世界上最先进的分布式版本控制系统，我们用它来管理Hexo博客文章，上传到GitHub。去<a href="https://git-scm.com/downloads">官网下载</a>对应系统的Git安装程序或查看命令行进行安装。</p><p><strong>安装Hexo</strong></p><p>在Node.js和Git都安装完成之后，安装Hexo，用命令行运行以下命令 <code>npm install -g hexo-cli</code>，之后可以用<code>hexo -v</code>查看版本来检查是否安装成功。</p><h3 id="初始化Hexo并设置主题"><a href="#初始化Hexo并设置主题" class="headerlink" title="初始化Hexo并设置主题"></a>初始化Hexo并设置主题</h3><h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><p>安装 Hexo 完成后，依次执行以下命令，Hexo 将会在指定文件夹中新建所需要的文件，其中&lt;folder&gt;就是你想要作为博客初始化的文件夹。</p><p><strong>注意</strong>：如果使用<strong>cmd命令行</strong>操作，会直接在<strong>我的文档（如Administrator）</strong>下新建这个文件夹进行初始化，如果不想新建在我的文档内，需要先用命令行切换到你想新建的位置下如<code>cd d:</code>，<code>cd hexo-blog</code>，然后再进行下面的初始化操作。如果是使用<strong>git bash</strong>进行的命令行操作，则可以直接在想要作为博客初始化的文件夹内右键，在弹出的菜单中点击<code>git bash here</code>进行操作即可。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init &lt;folder&gt;<br><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>npm install<br></code></pre></div></td></tr></table></figure><p><code>hexo init &lt;folder&gt;</code> 中的&lt;folder&gt;是可选项，代表你想要初始化的文件夹，如果不写则默认在你当前打开的文件夹内初始化，比如你在<code>blog</code>文件夹内用<code>Git bash here</code> 打开命令行，再运行<code>hexo init</code> 这个命令，就会直接在<code>blog</code>这个文件夹内初始化，如果加上参数<code>hexo init hexo</code> 则会在<code>blog</code>文件夹内新建一个名为<code>hexo</code>的文件夹，然后在<code>hexo</code>这个文件夹内初始化。</p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></div></td></tr></table></figure><p>这时你可以在这个文件夹下用命令行<code>hexo server</code>来运行博客，在浏览器中访问<code>http://localhost:4000/</code>来查看效果。</p><p>默认显示页面如下：</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>更多关于hexo的命令和设置可以去<a href="https://hexo.io/zh-cn/docs/">官网</a>查看。</p><h4 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h4><p>Hexo默认的主题是landscape，更多主题可以去<a href="https://hexo.io/themes/">官网</a>挑选。</p><p>主题的安装方式有两种：</p><p>一种是去主题的GitHub项目上下载到本地，然后将主题文件夹复制到站点目录的<code>themes</code>文件夹下。<br>另一种方式是用命令行安装：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;your-hexo-folder&gt;<br>git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure><p>虽然两种安装方式不同，但主题的配置方式是一样的，都是在博客的站点目录下的配置文件<code>_config.yml</code>中修改：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">&lt;主题文件夹的名称&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>重点：</strong>这里需要注意，站点配置文件和主题配置文件是两个不同的配置文件。假设你的博客站点文件夹名字是<code>blog</code>，那么你的站点配置文件路径就是<code>blog\_config.yml</code>，而主题配置文件的路径则是<code>blog\themes\主题文件夹名\_config.yml</code>，修改配置时注意区分。</p><h3 id="部署博客到GithubPages"><a href="#部署博客到GithubPages" class="headerlink" title="部署博客到GithubPages"></a>部署博客到GithubPages</h3><h4 id="创建GitHub仓库并添加SHH-key"><a href="#创建GitHub仓库并添加SHH-key" class="headerlink" title="创建GitHub仓库并添加SHH key"></a>创建GitHub仓库并添加SHH key</h4><p><strong>创建仓库</strong></p><p>创建仓库之前，你要有一个GitHub账号，如果没有先去注册一个，之后在页面里找到<code>New repository</code>按钮，创建一个和你GitHub用户名一样的仓库，然后进行下一步。</p><p><strong>添加SSH key</strong></p><p>首先创建一个SSH key ，在命令行运行以下命令，创建过程中需要根据提示按三下回车：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱地址&quot;</span><br></code></pre></div></td></tr></table></figure><p>创建完成后在电脑上找到生成的秘钥，比如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>，打开这个文件，将里面内容复制出来，然后打开GitHub，点击你的头像，在setting中找到<code>SSH and GPG keys </code>这个选项，然后点击<code>New SSH key</code>把你刚刚复制的内容放进去。</p><p>测试是否添加成功。在命令行中依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<br>yes<br></code></pre></div></td></tr></table></figure><p>当看到返回<code>You’ve successfully authenticated</code>即为成功。</p><h4 id="将本地博客推送到GitHub仓库"><a href="#将本地博客推送到GitHub仓库" class="headerlink" title="将本地博客推送到GitHub仓库"></a>将本地博客推送到GitHub仓库</h4><p>安装hexo-deployer-git插件。在命令行运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>然后打开站点配置文件<code>_config.yml</code>，把文件的最后修改为如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:&lt;你的Github用户名&gt;/&lt;你的Github用户名&gt;.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure><p>接下来就可以把博客推送到GitHub Pages了，在命令行输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></div></td></tr></table></figure><p>其中 hexo clean是清除缓存文件和已生成的静态文件，也可以不加。<br>hexo generate 生成静态文章，可以用缩写 hexo g。<br>hexo deploy 部署网站，可以用缩写hexo d。</p><p>注意deploy时可能要你输入username和password。</p><p>返回<code>INFO Deploy done: git</code>即推送成功了，稍等几分钟就可以在浏览器访问<code>http://你的GitHub用户名.github.io</code></p><p>至此，你的Hexo博客就已经搭建在GitHub Pages了。</p><h4 id="绑定域名（可选）"><a href="#绑定域名（可选）" class="headerlink" title="绑定域名（可选）"></a>绑定域名（可选）</h4><p>略，具体操作看下面的参考链接。</p><h3 id="网站设置和主题优化"><a href="#网站设置和主题优化" class="headerlink" title="网站设置和主题优化"></a>网站设置和主题优化</h3><p>这里的优化主要针对我用的主题-<a href="https://github.com/theme-next/hexo-theme-next">NexT</a>。</p><h4 id="设置网站"><a href="#设置网站" class="headerlink" title="设置网站"></a>设置网站</h4><p>在站点配置文件<code>_config.yml</code>中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">你的博客名称</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">副标题（可不设置）</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">描述，通常由于搜索引擎搜索，SEO优化等（可不设置）</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">关键字（可不设置）</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">作者</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN（设置语言）</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">时区（可不设置）</span><br></code></pre></div></td></tr></table></figure><h4 id="修改永久链接的路径"><a href="#修改永久链接的路径" class="headerlink" title="修改永久链接的路径"></a>修改永久链接的路径</h4><p>在站点配置文件<code>_config.yml</code>中修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:title/</span><br></code></pre></div></td></tr></table></figure><h4 id="跳过渲染某些文件"><a href="#跳过渲染某些文件" class="headerlink" title="跳过渲染某些文件"></a>跳过渲染某些文件</h4><p>在站点配置文件<code>_config.yml</code>中修改，为了显示某个自己做的网页，或者为了显示readme说明文件等等：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Directory</span><br><span class="hljs-attr">skip_render:</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">test/*</span><br> <span class="hljs-comment"># 跳过文件夹下所有文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;文件夹名/*&quot;</span>  <br> <span class="hljs-comment"># 跳过子文件夹</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;文件夹名/子文件夹名/*&quot;</span><br> <span class="hljs-comment"># 跳过文件夹下所有子文件夹和文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;文件夹名/**&quot;</span>   <br></code></pre></div></td></tr></table></figure><h4 id="设置主题风格"><a href="#设置主题风格" class="headerlink" title="设置主题风格"></a>设置主题风格</h4><p>在主题配置文件<code>themes/next/_config.yml</code>中修改下面的代码，想用哪个就把那个前面的#去掉，给其他的加上#：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Schemes</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">Muse</span><br><span class="hljs-comment">#scheme: Mist</span><br><span class="hljs-comment">#scheme: Pisces</span><br><span class="hljs-comment">#scheme: Gemini</span><br></code></pre></div></td></tr></table></figure><h4 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h4><p>打开主题配置文件<code>themes/next/_config.yml</code>，找到下面的代码修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">avatar:</span><br>  <span class="hljs-comment"># Replace the default image and set the url here.</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">图片链接</span><br></code></pre></div></td></tr></table></figure><h4 id="文章信息设置"><a href="#文章信息设置" class="headerlink" title="文章信息设置"></a>文章信息设置</h4><p>还是在主题配置文件<code>themes/next/_config.yml</code>里面修改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Post meta display settings</span><br><span class="hljs-attr">post_meta:</span><br>  <span class="hljs-attr">item_text:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">created_at:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">updated_at:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">another_day:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h4 id="回到顶部和文章阅读进度"><a href="#回到顶部和文章阅读进度" class="headerlink" title="回到顶部和文章阅读进度"></a>回到顶部和文章阅读进度</h4><p>修改主题配置文件<code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">back2top:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Back to top in sidebar.</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Scroll percent label in b2t button.</span><br>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h4 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h4><p>修改主题配置文件<code>themes/next/_config.yml</code>，把链接改为自己的：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">favicon:</span><br>  <span class="hljs-attr">small:</span> <span class="hljs-string">/images/favicon-16x16-next.png</span><br>  <span class="hljs-attr">medium:</span> <span class="hljs-string">/images/favicon-32x32-next.png</span><br>  <span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/images/apple-touch-icon-next.png</span><br>  <span class="hljs-attr">safari_pinned_tab:</span> <span class="hljs-string">/images/logo.svg</span><br>  <span class="hljs-comment">#android_manifest: /images/manifest.json</span><br>  <span class="hljs-comment">#ms_browserconfig: /images/browserconfig.xml</span><br></code></pre></div></td></tr></table></figure><h4 id="修改网站页脚信息"><a href="#修改网站页脚信息" class="headerlink" title="修改网站页脚信息"></a>修改网站页脚信息</h4><p>修改主题配置文件<code>themes/next/_config.yml</code>，icon图标去上面注释里面给的网站找，然后把图标名字改成你想要的就行（比如user改成heart），<code>powered</code>和<code>theme</code>是设置底部页脚是否显示hexo版本和主题版本的。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># Specify the date when the site was setup. If not defined, current year will be used.</span><br>  <span class="hljs-comment">#since: 2015</span><br><br>  <span class="hljs-comment"># Icon between year and copyright info.</span><br>  <span class="hljs-attr">icon:</span><br>    <span class="hljs-comment"># Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/</span><br>    <span class="hljs-comment"># `heart` is recommended with animation in red (#ff0000).</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user</span><br>    <span class="hljs-comment"># If you want to animate the icon, set it to true.</span><br>    <span class="hljs-attr">animated:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Change the color of icon, using Hex Code.</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#808080&quot;</span><br><br>  <span class="hljs-attr">powered:</span><br>    <span class="hljs-comment"># Hexo link (Powered by Hexo).</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Version info of Hexo after Hexo link (vX.X.X).</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-attr">theme:</span><br>    <span class="hljs-comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Version info of NexT after scheme info (vX.X.X).</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>更多可修改信息在配置文件中查看。</p><h4 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h4><p>编辑主题配置文件<code>themes/next/_config.yml</code>，需要哪个就把哪个的注释去掉：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">home</span><br>  <span class="hljs-comment">#about: /about/ || user</span><br>  <span class="hljs-comment">#tags: /tags/ || tags</span><br>  <span class="hljs-comment">#categories: /categories/ || th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">archive</span><br>  <span class="hljs-comment">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-comment">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-comment">#commonweal: /404/ || heartbeat</span><br><br><span class="hljs-comment"># Enable / Disable menu icons / item badges.</span><br><span class="hljs-attr">menu_settings:</span><br>  <span class="hljs-attr">icons:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">badges:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h4 id="点击图片查看大图"><a href="#点击图片查看大图" class="headerlink" title="点击图片查看大图"></a>点击图片查看大图</h4><p>编辑主题配置文件<code>themes/next/_config.yml</code>，有两种选择，任选其一就行，把false改成true</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span><br><span class="hljs-comment"># For more information: https://fancyapps.com/fancybox</span><br><span class="hljs-attr">fancybox:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># A JavaScript library for zooming images like Medium.</span><br><span class="hljs-comment"># Do not enable both `fancybox` and `mediumzoom`.</span><br><span class="hljs-comment"># For more information: https://github.com/francoischalifour/medium-zoom</span><br><span class="hljs-attr">mediumzoom:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h4 id="设置图片懒加载"><a href="#设置图片懒加载" class="headerlink" title="设置图片懒加载"></a>设置图片懒加载</h4><p>编辑主题配置文件<code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h4 id="设置动态网页背景"><a href="#设置动态网页背景" class="headerlink" title="设置动态网页背景"></a>设置动态网页背景</h4><p>编辑主题配置文件<code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># JavaScript 3D library.</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/theme-next-three</span><br><span class="hljs-attr">three:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">three_waves:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">canvas_lines:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">canvas_sphere:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Canvas-nest</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="hljs-comment"># For more information: https://github.com/hustcc/canvas-nest.js</span><br><span class="hljs-attr">canvas_nest:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">onmobile:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Display on mobile or not</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;0,0,255&quot;</span> <span class="hljs-comment"># RGB values, use `,` to separate</span><br>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># The opacity of line: 0~1</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span> <span class="hljs-comment"># z-index property of the background</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">99</span> <span class="hljs-comment"># The number of lines</span><br><br><span class="hljs-comment"># Canvas-ribbon</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span><br><span class="hljs-comment"># For more information: https://github.com/zproo/canvas-ribbon</span><br><span class="hljs-attr">canvas_ribbon:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">size:</span> <span class="hljs-number">300</span> <span class="hljs-comment"># The width of the ribbon</span><br>  <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.6</span> <span class="hljs-comment"># The transparency of the ribbon</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span> <span class="hljs-comment"># The display level of the ribbon</span><br></code></pre></div></td></tr></table></figure><h4 id="设置网站顶部加载进度条"><a href="#设置网站顶部加载进度条" class="headerlink" title="设置网站顶部加载进度条"></a>设置网站顶部加载进度条</h4><p>编辑主题配置文件<code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">pace:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h4 id="自定义网页背景"><a href="#自定义网页背景" class="headerlink" title="自定义网页背景"></a>自定义网页背景</h4><p>首先在站点根目录的<code>source\_data</code>文件夹内新建一个名为<code>styles.styl</code>的文件，然后编辑主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">custom_file_path:</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">source/_data/styles.styl</span><br></code></pre></div></td></tr></table></figure><p><strong>我们所有自定义的样式都会在<code>styles.styl</code>这个文件里添加</strong>。</p><p>编辑<code>styles.styl</code>，添加如下代码，把URL里面的地址改为你的背景图片的链接即可：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">/images/bg.jpg</span>);<br>    <span class="hljs-attribute">background-size</span>:cover;<br>    <span class="hljs-attribute">background-repeat</span>:no-repeat;<br>    <span class="hljs-attribute">background-attachment</span>:fixed;<br>    <span class="hljs-attribute">background-position</span>:center;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h4><p>还是在<code>styles.styl</code>里编辑，添加下面的代码：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">// 鼠标样式<br>  * &#123;<br>      <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;鼠标图标地址&quot;</span>),auto<span class="hljs-meta">!important</span><br>  &#125;<br>  <span class="hljs-selector-pseudo">:active</span> &#123;<br>      <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;鼠标图标地址&quot;</span>),auto<span class="hljs-meta">!important</span><br>  &#125;<br></code></pre></div></td></tr></table></figure><h4 id="点击出现爱心效果"><a href="#点击出现爱心效果" class="headerlink" title="点击出现爱心效果"></a>点击出现爱心效果</h4><p>在主题文件夹内的<code>/source/js/src</code>下新建文件<code>click-effect.js</code>，接着把下面的内容复制粘贴到<code>click-effect.js</code>文件中。<br>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">!<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e,t,a</span>)</span>&#123;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params"></span>)</span>&#123;c(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">r</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e=<span class="hljs-number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="hljs-number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="hljs-number">1</span>)):(d[e].y--,d[e].scale+=<span class="hljs-number">.004</span>,d[e].alpha-=<span class="hljs-number">.013</span>,d[e].el.style.cssText=<span class="hljs-string">&quot;left:&quot;</span>+d[e].x+<span class="hljs-string">&quot;px;top:&quot;</span>+d[e].y+<span class="hljs-string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="hljs-string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="hljs-string">&quot;,&quot;</span>+d[e].scale+<span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="hljs-string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">o</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> t=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">i</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-keyword">var</span> a=t.createElement(<span class="hljs-string">&quot;div&quot;</span>);a.className=<span class="hljs-string">&quot;heart&quot;</span>,d.push(&#123;<span class="hljs-attr">el</span>:a,<span class="hljs-attr">x</span>:e.clientX-<span class="hljs-number">5</span>,<span class="hljs-attr">y</span>:e.clientY-<span class="hljs-number">5</span>,<span class="hljs-attr">scale</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">alpha</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-keyword">var</span> a=t.createElement(<span class="hljs-string">&quot;style&quot;</span>);a.type=<span class="hljs-string">&quot;text/css&quot;</span>;<span class="hljs-keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="hljs-keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].appendChild(a)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&quot;rgb(&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-built_in">Math</span>.random())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-built_in">Math</span>.random())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-built_in">Math</span>.random())+<span class="hljs-string">&quot;)&quot;</span>&#125;<span class="hljs-keyword">var</span> d=[];e.requestAnimationFrame=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<span class="hljs-built_in">setTimeout</span>(e,<span class="hljs-number">1e3</span>/<span class="hljs-number">60</span>)&#125;&#125;(),n()&#125;(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>);<br></code></pre></div></td></tr></table></figure><p>在主题文件夹的<code>\layout\_layout.swig</code>文件末尾添加：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 页面点击出现小桃心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><h4 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h4><p>这里搜索功能我用的是本地搜索，也有一些其他的搜索方法，比如Aloglia，使用前需要注册账号，具体操作因为没有实践所以跳过，下面说一下添加本地搜索功能的方法：</p><ol><li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-generator-searchdb --save<br></code></pre></div></td></tr></table></figure></li><li><p>编辑站点配置文件<code>_config.yml</code>，新增以下内容到任意位置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br>  <span class="hljs-attr">format:</span> <span class="hljs-string">html</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">10000</span><br></code></pre></div></td></tr></table></figure></li><li><p>编辑主题配置文件<code>themes/next/_config.yml</code>，启用本地搜索功能：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Local search</span><br><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li></ol><h4 id="添加评论和统计功能"><a href="#添加评论和统计功能" class="headerlink" title="添加评论和统计功能"></a>添加评论和统计功能</h4><p>略，没有实际添加这两个功能，想添加的话看下面参考链接。</p><h4 id="添加网页看板娘（Live2D）"><a href="#添加网页看板娘（Live2D）" class="headerlink" title="添加网页看板娘（Live2D）"></a>添加网页看板娘（Live2D）</h4><p>首先安装Live2D插件，在站点根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save hexo-helper-live2d<br></code></pre></div></td></tr></table></figure><p>然后选择自己喜欢的模型，复制名字。</p><p>Epsilon2.1</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>Gantzert_Felixander</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>haru</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>miku</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>ni-j</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nico</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nietzche</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nipsilon</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>nito</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>shizuku</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>tsumiki</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>wanko</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>z16</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>hibiki</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>koharu</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>haruto</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>Unitychan</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>tororo</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>hijiki</p><p><img src="" srcset="/img/loading.gif" lazyload alt="img"></p><p>将下面的代码添加到站点配置文件<code>_config.yml</code>中，修改&lt;模型名字&gt;（有教程说放在主题配置文件中，但是实际测试放在主题文件中并不好用，不管使用哪个模型网页中都不生效，都显示默认的<code>shizuku</code>这个模型，但是把代码放在站点配置文件中就好用了，不知道是什么原因）</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Live2D</span><br><span class="hljs-comment">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="hljs-attr">live2d:</span><br>  <span class="hljs-comment"># enable: true</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span> <span class="hljs-comment"># 默认</span><br>  <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span> <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span> <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span> <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  <span class="hljs-comment"># scriptFrom: jsdelivr # jsdelivr CDN</span><br>  <span class="hljs-comment"># scriptFrom: unpkg # unpkg CDN</span><br>  <span class="hljs-comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span><br>  <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  <span class="hljs-attr">model:</span><br>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-&lt;模型名字&gt;</span> <span class="hljs-comment"># npm-module package name</span><br>    <span class="hljs-comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br>    <span class="hljs-comment"># use: ./wives/wanko # 相对于博客根目录的路径</span><br>    <span class="hljs-comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br>    <span class="hljs-attr">scale:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">hHeadPos:</span> <span class="hljs-number">0.5</span><br>    <span class="hljs-attr">vHeadPos:</span> <span class="hljs-number">0.618</span><br>  <span class="hljs-attr">display:</span><br>    <span class="hljs-attr">superSample:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">width:</span> <span class="hljs-number">250</span><br>    <span class="hljs-attr">height:</span> <span class="hljs-number">500</span><br>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>    <span class="hljs-attr">hOffset:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-20</span><br>  <span class="hljs-attr">mobile:</span><br>    <span class="hljs-attr">show:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">scale:</span> <span class="hljs-number">0.5</span><br>  <span class="hljs-attr">react:</span><br>    <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.7</span><br>  <span class="hljs-attr">dialog:</span> <br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hitokoto:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>安装你选择的模型，在命令行运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save live2d-widget-model-&lt;你选择的模型名字&gt;<br></code></pre></div></td></tr></table></figure><p>然后在命令行运行以下命令，在浏览器里访问<code>localhost:4000</code>查看效果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></div></td></tr></table></figure><p>上面的配置都完成以后就可以开始写博客了。</p><h3 id="利用GitHub备份博客源文件并且进行多终端操作"><a href="#利用GitHub备份博客源文件并且进行多终端操作" class="headerlink" title="利用GitHub备份博客源文件并且进行多终端操作"></a>利用GitHub备份博客源文件并且进行多终端操作</h3><p>在你换电脑或者重装系统的时候万一不小心把博客的站点文件夹删了或者弄丢了那就什么都没了，所以为了防止发生这样的情况，就可以用GitHub来保存博客的源文件。</p><h4 id="用命令行操作"><a href="#用命令行操作" class="headerlink" title="用命令行操作"></a>用命令行操作</h4><p>具体操作是在你的GitHub中新建一个仓库或者在你的博客仓库内新建一个分支，个人推荐新建一个仓库，和博客的静态文件分开管理比较好，然后在本地找一个空文件夹，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:你的项目地址<br></code></pre></div></td></tr></table></figure><p>把仓库克隆到本地，然后把你的博客源文件全部复制过来，除了<code>.deploy_git</code>，注意复制过来的文件里面应该有一个叫<code>.gitignore</code>的文件，用来忽略一些不要提交到Git的文件，如果没有可以自己新建一个，在里面加上下面的内容：</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></div></td></tr></table></figure><p>如果还有其他自己不想提交的文件也可以加到这个文件中。</p><p>然后再在命令行中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br>git commit –m <span class="hljs-string">&quot;commit message&quot;</span><br>git push <br></code></pre></div></td></tr></table></figure><p>可以在网页中查看是否上传成功。</p><p>当你换了电脑或者重装系统后想把博客下回来怎么操作？</p><p>首先前面的都一样，下载安装node，Git，然后设置git全局邮箱和用户名，设置SHH，安装hexo，然后在任意一个文件夹内，执行<code>git clone git@你的博客源文件仓库地址</code>，进入克隆下来的文件夹，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install<br>npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>然后就可以继续写博客了，写完之后运行<code>hexo g &amp;&amp; hexo d</code>，就可以部署到GitHub Pages上了。而且现在可以每次写完博客都把源文件备份一下了：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git add .<br>git commit –m <span class="hljs-string">&quot;commit message&quot;</span><br>git push <br></code></pre></div></td></tr></table></figure><h4 id="用GitHub-Desktop操作"><a href="#用GitHub-Desktop操作" class="headerlink" title="用GitHub Desktop操作"></a>用GitHub Desktop操作</h4><p>下载安装GitHub Desktop然后登陆GitHub，把对应的作为保存博客源文件的仓库克隆到本地，然后把除了<code>.deploy_git</code>以外的博客源文件复制进来，注意有没有<code>.gitignore</code>这个文件，没有按上面方法加上，然后再写上备注信息，，提交推送到Git上就行了。</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p><p><a href="https://uchuhimo.me/2017/04/11/genesis/">如何使用 Hexo 和 GitHub Pages 搭建这个博客</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></p><p><a href="http://theme-next.iissnan.com/getting-started.html">开始使用-NexT使用文档</a></p><p><a href="https://hexo-theme-next.netlify.com/docs/">Documention | NexT</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
